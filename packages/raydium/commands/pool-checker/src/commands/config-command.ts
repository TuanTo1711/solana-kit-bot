import { formatUnits, wrapEscHandler, type SolanaBotContext } from '@solana-kit-bot/core'
import Table from 'cli-table3'
import { Command, type BaseContext } from 'clipanion'
import type { ConfigService } from '../services/ConfigService'
import { poolCheckerSchema, type PoolCheckerConfig } from '../validator/pool-checker-validator'

type PoolCheckerConfigContext = BaseContext &
  SolanaBotContext & {
    configService: ConfigService
  }

export class PoolCheckerConfigCommand extends Command<PoolCheckerConfigContext> {
  override async execute(): Promise<number | void> {
    const controller = new AbortController()
    const inquirer = (await import('inquirer')).default
    const prompt = inquirer.prompt

    while (!controller.signal.aborted) {
      const question = prompt<{ action: () => Promise<void> }>({
        type: 'select',
        name: 'action',
        message: 'Ch·ªçn m·ªôt h√†nh ƒë·ªông: ',
        choices: [
          {
            name: 'üìã Xem danh s√°ch c·∫•u h√¨nh',
            value: this.viewConfig.bind(this),
          },
          {
            name: '‚ûï Th√™m c·∫•u h√¨nh m·ªõi',
            value: this.addConfig.bind(this),
          },
          {
            name: '‚úèÔ∏è S·ª≠a c·∫•u h√¨nh',
            value: this.editConfig.bind(this),
          },
          {
            name: 'üóëÔ∏è X√≥a c·∫•u h√¨nh',
            value: this.deleteConfig.bind(this),
          },
          new inquirer.Separator('-'.repeat(80)),
          {
            name: 'Quay l·∫°i menu',
            value: async () => controller.abort(),
          },
        ],
      })

      const { action } = await wrapEscHandler<typeof question>(question)

      await action()
    }
  }

  async viewConfig() {
    const { configService } = this.context
    const configs = await configService.getAllConfig()

    if (configs.length === 0) {
      console.log('üìù Kh√¥ng c√≥ c·∫•u h√¨nh n√†o ƒë∆∞·ª£c t·∫°o')
      return
    }

    const cliTable = new Table({
      head: [
        'ID',
        'M·ª•c ti√™u',
        'Boost',
        'T·ªïng boost',
        'H√¨nh ·∫£nh',
        'H·∫øt h·∫°n (gi·ªù)',
        'S·ªë ti·ªÅn (SOL)',
        'L·ª£i nhu·∫≠n (%)',
        'Tip (SOL)',
      ],
      colWidths: [5, 10, 7, 12, 10, 15, 15, 15, 10],
    })

    configs.forEach((config, index) => {
      cliTable.push([
        index + 1,
        formatUnits(Number(config.target) / 10 ** 6),
        config.hasBoost ? '‚úÖ' : '‚ùå',
        config.totalBoost ?? 'N/A',
        config.hasImage ? '‚úÖ' : '‚ùå',
        (config.expiresHour / 3600).toFixed(0),
        Number(config.amount) / 10 ** 9,
        config.profitSell.toFixed(1),
        config.jitoTip.toFixed(3),
      ])
    })

    console.log('\nüìã Danh s√°ch c·∫•u h√¨nh Pool Checker: ')
    console.log(cliTable.toString())
    console.log(`\nT·ªïng c·ªông: ${configs.length} c·∫•u h√¨nh`)
  }

  async addConfig() {
    const inquirer = await import('inquirer')
    const prompt = inquirer.default.prompt

    const question = prompt<PoolCheckerConfig>([
      {
        type: 'input',
        name: 'target',
        message: 'M·ª©c pool m·ª•c ti√™u ƒë·ªÉ ki·ªÉm tra: ',
        required: true,
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || parseFloat(value) <= 0
            ? 'M·ª©c pool m·ª•c ti√™u ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
      },
      {
        type: 'confirm',
        name: 'hasBoost',
        message: 'C√≥ c·∫ßn ki·ªÉm tra boost kh√¥ng? ',
        default: false,
      },
      {
        type: 'input',
        name: 'totalBoost',
        message: 'T·ªïng boost mu·ªën ki·ªÉm tra: ',
        required: true,
        when: ({ hasBoost: hasBoost }) => hasBoost,
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || Number(value) <= 0 ? 'T·ªïng boost ph·∫£i l√† s·ªë l·ªõn h∆°n 0' : true,
      },
      {
        type: 'confirm',
        name: 'hasImage',
        message: 'C√≥ c·∫ßn ki·ªÉm tra ·∫£nh kh√¥ng? ',
        default: false,
      },
      {
        type: 'input',
        name: 'expiresHour',
        message: 'Th·ªùi gian h·∫øt h·∫°n (gi·ªù): ',
        default: '15',
        required: true,
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || Number(value) <= 0
            ? 'Th·ªùi gian h·∫øt h·∫°n ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
      },
      {
        type: 'input',
        name: 'amount',
        message: 'S·ªë ti·ªÅn mua (SOL): ',
        required: true,
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || parseFloat(value) <= 0
            ? 'S·ªë ti·ªÅn mua ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
      },
      {
        type: 'input',
        name: 'profitSell',
        message: 'L·ª£i nhu·∫≠n t·ª± ƒë·ªông b√°n (%): ',
        required: true,
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || parseFloat(value) <= 0
            ? 'L·ª£i nhu·∫≠n t·ª± ƒë·ªông b√°n ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
        default: '80',
      },
      {
        type: 'input',
        name: 'jitoTip',
        message: 'Tip cho Jito (SOL): ',
        required: true,
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || parseFloat(value) <= 0
            ? 'Tip cho Jito ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
        default: '0.001',
      },
    ])

    const answers = await wrapEscHandler<PoolCheckerConfig>(question)
    const parsedConfig = poolCheckerSchema.parse(answers)
    const { configService } = this.context
    await configService.createNewConfig(parsedConfig)

    this.context.stdout.write('C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng\n')
  }

  async deleteConfig() {
    const { configService } = this.context
    const configs = await configService.getAllConfig()

    if (configs.length === 0) {
      console.log('‚ùå Kh√¥ng c√≥ c·∫•u h√¨nh n√†o ƒë·ªÉ x√≥a')
      return
    }

    const inquirer = await import('inquirer')
    const prompt = inquirer.default.prompt

    const choices = configs.map((config, index) => ({
      name: `Config ${index + 1}: Target=${config.target}, Amount=${config.amount}`,
      value: config.id,
    }))

    const question = prompt<{ configId: string }>({
      type: 'list',
      name: 'configId',
      message: 'Ch·ªçn c·∫•u h√¨nh ƒë·ªÉ x√≥a:',
      choices,
    })

    const { configId } = await wrapEscHandler<typeof question>(question)

    if (configId) {
      await configService.deleteConfig(configId)
      console.log('‚úÖ C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng')
    }
  }

  async editConfig() {
    const { configService } = this.context
    const configs = await configService.getAllConfig()

    if (configs.length === 0) {
      console.log('‚ùå Kh√¥ng c√≥ c·∫•u h√¨nh n√†o ƒë·ªÉ s·ª≠a')
      return
    }

    const inquirer = await import('inquirer')
    const prompt = inquirer.default.prompt

    const choices = configs.map((config, index) => ({
      name: `Config ${index + 1}: Target=${config.target}, Amount=${config.amount}`,
      value: config,
    }))

    const question = prompt<{ config: PoolCheckerConfig }>({
      type: 'list',
      name: 'config',
      message: 'Ch·ªçn c·∫•u h√¨nh ƒë·ªÉ s·ª≠a:',
      choices,
    })

    const { config } = await wrapEscHandler<typeof question>(question)

    if (config) {
      const updatedConfig = await this.editConfigFields(config)
      await configService.updateConfig(config.id!, updatedConfig)
      console.log('‚úÖ C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng')
    }
  }

  private async editConfigFields(config: PoolCheckerConfig): Promise<PoolCheckerConfig> {
    const inquirer = await import('inquirer')
    const prompt = inquirer.default.prompt

    const question = prompt<Partial<PoolCheckerConfig>>([
      {
        type: 'input',
        name: 'target',
        message: `M·ª©c pool m·ª•c ti√™u (hi·ªán t·∫°i: ${config.target}):`,
        default: config.target.toString(),
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || parseFloat(value) <= 0
            ? 'M·ª©c pool m·ª•c ti√™u ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
      },
      {
        type: 'confirm',
        name: 'hasBoost',
        message: `C√≥ c·∫ßn ki·ªÉm tra boost kh√¥ng? (hi·ªán t·∫°i: ${config.hasBoost ? 'C√≥' : 'Kh√¥ng'}):`,
        default: config.hasBoost,
      },
      {
        type: 'input',
        name: 'totalBoost',
        message: 'T·ªïng boost mu·ªën ki·ªÉm tra:',
        default: config.totalBoost?.toString() || '0',
        when: ({ hasBoost }) => hasBoost,
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || Number(value) <= 0 ? 'T·ªïng boost ph·∫£i l√† s·ªë l·ªõn h∆°n 0' : true,
      },
      {
        type: 'confirm',
        name: 'hasImage',
        message: `C√≥ c·∫ßn ki·ªÉm tra ·∫£nh kh√¥ng? (hi·ªán t·∫°i: ${config.hasImage ? 'C√≥' : 'Kh√¥ng'}):`,
        default: config.hasImage,
      },
      {
        type: 'input',
        name: 'expiresHour',
        message: `Th·ªùi gian h·∫øt h·∫°n (gi·ªù) (hi·ªán t·∫°i: ${config.expiresHour / 3600}):`,
        default: (config.expiresHour / 3600).toString(),
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || Number(value) <= 0
            ? 'Th·ªùi gian h·∫øt h·∫°n ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
      },
      {
        type: 'input',
        name: 'amount',
        message: `S·ªë ti·ªÅn mua (SOL) (hi·ªán t·∫°i: ${Number(config.amount) / 10 ** 9}):`,
        default: (Number(config.amount) / 10 ** 9).toString(),
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || parseFloat(value) <= 0
            ? 'S·ªë ti·ªÅn mua ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
      },
      {
        type: 'input',
        name: 'profitSell',
        message: `L·ª£i nhu·∫≠n t·ª± ƒë·ªông b√°n (%) (hi·ªán t·∫°i: ${config.profitSell / 100}):`,
        default: (config.profitSell / 100).toString(),
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || parseFloat(value) <= 0
            ? 'L·ª£i nhu·∫≠n t·ª± ƒë·ªông b√°n ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
      },
      {
        type: 'input',
        name: 'jitoTip',
        message: `Tip cho Jito (SOL) (hi·ªán t·∫°i: ${config.jitoTip}):`,
        default: config.jitoTip.toString(),
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || parseFloat(value) <= 0
            ? 'Tip cho Jito ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
      },
    ])

    const answers = await wrapEscHandler<Partial<PoolCheckerConfig>>(question)
    return poolCheckerSchema.parse({ ...config, ...answers })
  }
}

PoolCheckerConfigCommand.paths = [['config run']]
