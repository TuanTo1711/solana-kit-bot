import { Command, Option, type BaseContext } from 'clipanion'

import {
  FixedPriceStrategy,
  RandomPriceStrategy,
  wrapEscHandler,
  globalSignalHandler,
  type PriceStrategy,
  type SolanaBotContext,
  RunnerState,
} from '@solana-kit-bot/core'
import { createRaydiumCpmmClient } from '@solana-kit-bot/raydium-cpmm'
import chalk from 'chalk'
import { virtualTradingOptionsSchema, type VirtualTradingOptions } from './validation'
import {
  MAX_VIRTUAL_WALLETS,
  MIN_VIRTUAL_WALLETS,
  DEFAULT_TIP_SOL,
  LAMPORTS_PER_SOL,
} from './constants'
import { globalVirtualTradingController } from './controllers/virtual-trading-controller'

export class VirtualTradingCommand extends Command<BaseContext & SolanaBotContext> {
  pool = Option.String('-p,--pool', { description: 'ƒê·ªãa ch·ªâ pool ƒë·ªÉ ch·∫°y l·ªánh', required: false })
  wallets = Option.String('-w,--wallets', {
    description: 'S·ªë l∆∞·ª£ng v√≠ mu·ªën d√πng',
    required: false,
  })
  tip = Option.String('-t,--tip', { description: 'S·ªë ti·ªÅn tip cho Jito', required: false })
  loops = Option.String('-l,--loops', {
    description: 'S·ªë chu k·ª≥ ch·∫°y (0 -> v√¥ h·∫°n, >0 -> s·ªë l·∫ßn nh·∫•t ƒë·ªãnh)',
    required: false,
  })
  interval = Option.String('-i,--interval', {
    description: 'Kho·∫£ng th·ªùi gian ch·∫°y l·ªánh (gi√¢y)',
    required: false,
  })
  strategy = Option.String('-s,--strategy', {
    description: 'Chi·∫øn l∆∞·ª£c ƒë·ªãnh gi√° (fixed/random)',
    required: false,
  })
  amount? = Option.String('-a,--amount', {
    description: 'S·ªë ti·ªÅn s·ª≠ d·ª•ng (strategy = fixed)',
    required: false,
  })
  min? = Option.String('-min,--min', {
    description: 'S·ªë ti·ªÅn t·ªëi thi·ªÉu s·ª≠ d·ª•ng (strategy = random)',
    required: false,
  })
  max? = Option.String('-max,--max', {
    description: 'S·ªë ti·ªÅn t·ªëi ƒëa s·ª≠ d·ª•ng (strategy = random)',
    required: false,
  })

  override async execute(): Promise<number | void> {
    const options = {
      pool: this.pool,
      wallets: this.wallets,
      tip: this.tip,
      loops: this.loops,
      interval: this.interval,
      strategy: this.strategy,
      amount: this.amount,
      min: this.min,
      max: this.max,
    }

    const inquirer = await import('inquirer')
    const prompt = inquirer.createPromptModule({
      input: process.stdin,
      output: process.stdout,
    })

    const questions = prompt<VirtualTradingOptions>(
      [
        {
          type: 'input',
          name: 'pool',
          message: 'ƒê·ªãa ch·ªâ pool: ',
          required: true,
          transformer: (value: string) => value.trim(),
          validate: (value: string) =>
            value.length === 0 ? 'ƒê·ªãa ch·ªâ pool kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' : true,
        },
        {
          type: 'number',
          name: 'wallets',
          message: 'S·ªë l∆∞·ª£ng v√≠ mu·ªën d√πng: ',
          required: true,
          min: MIN_VIRTUAL_WALLETS,
          max: MAX_VIRTUAL_WALLETS,
          validate: (value: number | undefined) =>
            !value || isNaN(value)
              ? `S·ªë l∆∞·ª£ng v√≠ ph·∫£i t·ª´ ${MIN_VIRTUAL_WALLETS} ƒë·∫øn ${MAX_VIRTUAL_WALLETS}`
              : true,
        },
        {
          type: 'list',
          name: 'strategy',
          message: 'Ch·ªçn chi·∫øn l∆∞·ª£c ƒë·ªãnh gi√°: ',
          choices: [
            { name: 'ƒê·ªãnh gi√° c·ªë ƒë·ªãnh', value: 'fixed' },
            { name: 'ƒê·ªãnh gi√° ng·∫´u nhi√™n', value: 'random' },
          ],
          default: 'random',
        },
        {
          type: 'input',
          name: 'amount',
          message: 'Nh·∫≠p s·ªë ti·ªÅn s·ª≠ d·ª•ng: ',
          required: false,
          when: (answers: Partial<VirtualTradingOptions>) => answers.strategy === 'fixed',
          validate: (value: string) =>
            isNaN(parseFloat(value)) || parseFloat(value) <= 0
              ? 'S·ªë ti·ªÅn s·ª≠ d·ª•ng ph·∫£i l·ªõn h∆°n 0'
              : true,
        },
        {
          type: 'input',
          name: 'min',
          message: 'Nh·∫≠p gi√° t·ªëi thi·ªÉu: ',
          required: false,
          when: (answers: Partial<VirtualTradingOptions>) => answers.strategy === 'random',
          validate: (value: string) =>
            isNaN(parseFloat(value)) || parseFloat(value) <= 0
              ? 'Gi√° t·ªëi thi·ªÉu ph·∫£i l·ªõn h∆°n 0'
              : true,
        },
        {
          type: 'input',
          name: 'max',
          message: 'Nh·∫≠p gi√° t·ªëi ƒëa: ',
          required: false,
          when: (answers: Partial<VirtualTradingOptions>) => answers.strategy === 'random',
          validate: (value: string) =>
            isNaN(parseFloat(value)) || parseFloat(value) <= 0 ? 'Gi√° t·ªëi ƒëa ph·∫£i l·ªõn h∆°n 0' : true,
        },
        {
          type: 'input',
          name: 'tip',
          message: 'S·ªë ti·ªÅn tip cho Jito: ',
          required: true,
          default: DEFAULT_TIP_SOL.toString(),
          transformer: (value: string) => value.trim(),
          validate: (value: string) =>
            value.length === 0 ? 'S·ªë ti·ªÅn tip kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' : true,
        },
        {
          type: 'number',
          name: 'loops',
          message: 'S·ªë chu k·ª≥ ch·∫°y: ',
          min: 0,
          required: true,
          validate: (value: number | undefined) =>
            isNaN(value!) || value! < 0 ? 'S·ªë chu k·ª≥ ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0' : true,
        },
        {
          type: 'input',
          name: 'interval',
          message: 'Kho·∫£ng th·ªùi gian gi·ªØa c√°c chu k·ª≥ (gi√¢y): ',
          required: true,
          validate: (value: string) =>
            isNaN(parseFloat(value)) || parseFloat(value) < 0
              ? 'Kho·∫£ng th·ªùi gian ph·∫£i l·ªõn h∆°n 0'
              : true,
        },
        {
          type: 'input',
          name: 'timeout',
          message: 'Kho·∫£ng th·ªùi gian ch·ªù ƒë·ªÉ b√°n (gi√¢y): ',
          required: true,
          validate: (value: string) =>
            isNaN(parseFloat(value)) || parseFloat(value) < 0
              ? 'Kho·∫£ng th·ªùi gian ph·∫£i l·ªõn h∆°n 0'
              : true,
        },
      ],
      options
    )

    const answers = await wrapEscHandler<typeof questions>(questions)
    const result = virtualTradingOptionsSchema.safeParse(answers)
    if (!result.success) {
      this.context.stderr.write(result.error)
      return
    }

    this.printPrettyConfig(result.data)

    const priceStrategy = this.initializePricingStrategy(result.data)

    if (!priceStrategy) {
      this.context.stderr.write('Chi·∫øn l∆∞·ª£c ƒë·ªãnh gi√° kh√¥ng h·ª£p l·ªá')
      return
    }

    const { confirmed } = await prompt<{ confirmed: boolean }>({
      type: 'confirm',
      name: 'confirmed',
      message: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ch·∫°y l·ªánh n√†y kh√¥ng?',
      default: true,
    })

    if (!confirmed) {
      this.context.stderr.write('ƒê√£ h·ªßy th·ª±c thi l·ªánh')
      return
    }

    const raydiumClient = createRaydiumCpmmClient(this.context.provider.rpc)

    // Initialize controller with dependencies
    await globalVirtualTradingController.initialize(result.data, priceStrategy, raydiumClient)

    // Setup signal handlers ƒë·ªÉ c√≥ th·ªÉ d·ª´ng b·∫±ng Ctrl+C
    console.log('üéØ Kh·ªüi ƒë·ªông runner v·ªõi signal handling...')
    console.log('üí° Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng runner v√† quay v·ªÅ menu ch√≠nh')
    console.log('')

    globalSignalHandler.setRunnerController(globalVirtualTradingController)
    globalSignalHandler.setupSignalHandlers()

    try {
      // S·ª≠ d·ª•ng runner controller v·ªõi foreground mode
      await globalVirtualTradingController.start(this.context, true)

      console.log('üèÅ Runner ƒë√£ ho√†n th√†nh t·∫•t c·∫£ iterations!')
    } catch (error) {
      // N·∫øu c√≥ l·ªói, cleanup gracefully
      this.context.stderr.write('L·ªói khi ch·∫°y virtual trading: ')

      // C·ªë g·∫Øng stop runner n·∫øu n√≥ ƒëang ch·∫°y
      const status = globalVirtualTradingController.getStatus()
      if (status.state === RunnerState.RUNNING) {
        console.log('üîÑ ƒêang cleanup runner...')
        try {
          await globalVirtualTradingController.stop()
        } catch (stopError) {
          console.error('‚ùå Cleanup error:', stopError)
        }
      }

      throw error
    } finally {
      // Lu√¥n restore signal handlers khi xong
      globalSignalHandler.restoreSignalHandlers()
      console.log('üîô ƒê√£ quay v·ªÅ menu ch√≠nh')
    }
  }

  /**
   * In ra m√†n h√¨nh b·∫£n t√≥m t·∫Øt c·∫•u h√¨nh ƒë√£ ƒë·ªãnh d·∫°ng
   *
   * Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c tham s·ªë ƒë√£ c·∫•u h√¨nh theo ƒë·ªãnh d·∫°ng d·ªÖ ƒë·ªçc,
   * v·ªõi m√†u s·∫Øc ƒë·ªÉ d·ªÖ nh√¨n h∆°n.
   *
   * @private
   * @param {VirtualTradingOptions} parsedConfig - C√°c t√πy ch·ªçn c·∫•u h√¨nh ƒë√£ x√°c th·ª±c
   */
  private printPrettyConfig = (parsedConfig: VirtualTradingOptions) => {
    console.log('Chi ti·∫øt c·∫•u h√¨nh l·ªánh:')
    console.log(`   - ƒê·ªãa ch·ªâ pool                        | ${chalk.blue(parsedConfig.pool)}`)
    console.log(
      `   - S·ªë l∆∞·ª£ng v√≠                         | ${chalk.green(parsedConfig.wallets)} v√≠`
    )
    console.log(
      `   - S·ªë ti·ªÅn tip                         | ${chalk.green(Number(parsedConfig.tip) / LAMPORTS_PER_SOL)} SOL`
    )
    console.log(
      `   - S·ªë chu k·ª≥ ch·∫°y                      | ${chalk.green(parsedConfig.loops === 0 ? 'V√¥ h·∫°n' : parsedConfig.loops)} l·∫ßn`
    )
    console.log(
      `   - Kho·∫£ng th·ªùi gian ch·ªù ƒë·ªÉ b√°n         | ${chalk.green(parsedConfig.timeout / 1000)} gi√¢y`
    )

    console.log(
      `   - Kho·∫£ng th·ªùi gian gi·ªØa c√°c chu k·ª≥    | ${chalk.green(parsedConfig.interval / 1000)} gi√¢y`
    )
    console.log(
      `   - Chi·∫øn l∆∞·ª£c ƒë·ªãnh gi√°                 | ${chalk.green(parsedConfig.strategy === 'fixed' ? 'C·ªë ƒë·ªãnh' : 'Ng·∫´u nhi√™n')}`
    )
    if (parsedConfig.strategy === 'fixed') {
      console.log(
        `   - S·ªë ti·ªÅn s·ª≠ d·ª•ng                     | ${chalk.green(Number(parsedConfig.amount) / LAMPORTS_PER_SOL)} SOL`
      )
    } else {
      console.log(
        `   - Gi√° t·ªëi thi·ªÉu                       | ${chalk.green(Number(parsedConfig.min) / LAMPORTS_PER_SOL)} SOL`
      )
      console.log(
        `   - Gi√° t·ªëi ƒëa                          | ${chalk.green(Number(parsedConfig.max) / LAMPORTS_PER_SOL)} SOL`
      )
    }
  }

  /**
   * Kh·ªüi t·∫°o v√† c·∫•u h√¨nh chi·∫øn l∆∞·ª£c ƒë·ªãnh gi√° d·ª±a tr√™n t√πy ch·ªçn ng∆∞·ªùi d√πng
   *
   * T·∫°o v√† c·∫•u h√¨nh phi√™n b·∫£n chi·∫øn l∆∞·ª£c ƒë·ªãnh gi√° ph√π h·ª£p d·ª±a tr√™n
   * l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng. H·ªó tr·ª£ hai chi·∫øn l∆∞·ª£c:
   * 1. Chi·∫øn l∆∞·ª£c Gi√° C·ªë ƒë·ªãnh:
   *    - S·ª≠ d·ª•ng m·ªôt s·ªë ti·ªÅn kh√¥ng ƒë·ªïi cho t·∫•t c·∫£ c√°c l·∫ßn mua
   *    - ƒê∆∞·ª£c c·∫•u h√¨nh v·ªõi m·ªôt tham s·ªë s·ªë ti·ªÅn duy nh·∫•t
   * 2. Chi·∫øn l∆∞·ª£c Gi√° Ng·∫´u nhi√™n:
   *    - T·∫°o s·ªë ti·ªÅn ng·∫´u nhi√™n trong m·ªôt kho·∫£ng x√°c ƒë·ªãnh
   *    - ƒê∆∞·ª£c c·∫•u h√¨nh v·ªõi c√°c tham s·ªë gi√° t·ªëi thi·ªÉu/t·ªëi ƒëa
   *
   * @private
   * @param {VirtualTradingOptions} config - C√°c t√πy ch·ªçn c·∫•u h√¨nh ƒë√£ x√°c th·ª±c
   * @returns {PriceStrategy | null} Phi√™n b·∫£n chi·∫øn l∆∞·ª£c ƒë·ªãnh gi√° ƒë√£ kh·ªüi t·∫°o, ho·∫∑c null n·∫øu x√°c th·ª±c th·∫•t b·∫°i
   * @throws {Error} N·∫øu c·∫•u h√¨nh chi·∫øn l∆∞·ª£c kh√¥ng h·ª£p l·ªá
   */
  private initializePricingStrategy = (config: VirtualTradingOptions): PriceStrategy | null => {
    switch (config.strategy) {
      case 'fixed': {
        if (!config.amount) {
          return null
        }

        const fixedStrategy = new FixedPriceStrategy({
          fixedPrice: Number(config.amount),
          precision: 0,
        })

        return fixedStrategy
      }

      case 'random': {
        if (!config.min || !config.max) {
          return null
        }
        const randomStrategy = new RandomPriceStrategy({
          minPrice: Number(config.min),
          maxPrice: Number(config.max),
          precision: 0,
        })
        return randomStrategy
      }

      default:
        return null
    }
  }
}

VirtualTradingCommand.paths = [['virtual-trading'], ['v-trading']]

VirtualTradingCommand.usage = VirtualTradingCommand.usage = Command.Usage({
  category: `Raydium Launchlab`,
  description: `Th·ª±c hi·ªán mua v√† b√°n v·ªõi nhi·ªÅu v√≠ ·∫£o`,
  details: `
  H·ªá th·ªëng giao d·ªãch ·∫£o tinh vi cho c√°c pool Raydium Concentrated Liquidity Market Maker (CPMM) th·ª±c hi·ªán c√°c g√≥i giao d·ªãch t·∫ßn su·∫•t cao s·ª≠ d·ª•ng nhi·ªÅu v√≠ ·∫£o.

  ‚ú® T√≠nh nƒÉng:

  - ${chalk.green('Qu·∫£n l√Ω V√≠ ·∫¢o')}: T·∫°o v√† qu·∫£n l√Ω nhi·ªÅu v√≠ t·∫°m th·ªùi cho giao d·ªãch
  - ${chalk.green('Chi·∫øn l∆∞·ª£c Mua-R·ªìi-B√°n')}: Th·ª±c hi·ªán giao d·ªãch mua v√† giao d·ªãch b√°n t·ª± ƒë·ªông sau th·ªùi gian ch·ªù c√≥ th·ªÉ c·∫•u h√¨nh
  - ${chalk.green('Chi·∫øn l∆∞·ª£c ƒê·ªãnh gi√° Linh ho·∫°t')}: H·ªó tr·ª£ ƒë·ªãnh gi√° c·ªë ƒë·ªãnh v√† ng·∫´u nhi√™n t√πy ch·ªânh
  - ${chalk.green('T·ªëi ∆∞u h√≥a Bundle')}: S·ª≠ d·ª•ng Jito bundles cho vi·ªác g·ª≠i g√≥i giao d·ªãch
  - ${chalk.green('D·ªçn d·∫πp T·ª± ƒë·ªông')}: X·ª≠ l√Ω t√†i tr·ª£ v√≠, ho√†n ti·ªÅn v√† d·ªçn d·∫πp t√†i nguy√™n t·ª± ƒë·ªông
  `,
  examples: [
    [
      `- V√≠ d·ª• ch·∫°y v√¥ h·∫°n v·ªõi s·ªë l∆∞·ª£ng mua gi·ªõi h·∫°n`,
      `$0 virtual-trading -p ... 
                          -w 4 -t 0.00001
                          ${chalk.green('-s fixed')} -amount 0.000001
                          ${chalk.green('-l 0')} -interval 1`,
    ],
    [
      `- V√≠ d·ª• ch·∫°y 10 l·∫ßn v·ªõi s·ªë l∆∞·ª£ng mua ng·∫´u nhi√™n`,
      `$0 virtual-trading -p ...
                          -w 4 -t 0.00001
                          ${chalk.green('-l 10')} -i 1 
                          ${chalk.green('-s random')} -min 0.000001 -max 0.000001`,
    ],
  ],
})
