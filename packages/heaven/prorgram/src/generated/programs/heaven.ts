/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit'
import {
  type ParsedAdminBorrowSolInstruction,
  type ParsedAdminClaimMsolInstruction,
  type ParsedAdminClaimStakingRewardsInstruction,
  type ParsedAdminClaimStandardCreatorTradingFeesInstruction,
  type ParsedAdminDepositMsolInstruction,
  type ParsedAdminMintMsolInstruction,
  type ParsedAdminRepaySolInstruction,
  type ParsedAdminUnstakeMsolInstruction,
  type ParsedAdminUpdateStandardLiquidityPoolStateInstruction,
  type ParsedAdminWithdrawMsolInstruction,
  type ParsedAdminWithdrawTransferFeeInstruction,
  type ParsedBuyInstruction,
  type ParsedClaimStandardCreatorTradingFeeProtocolFeesInstruction,
  type ParsedClaimStandardCreatorTradingFeesInstruction,
  type ParsedClaimStandardProtocolTradingFeesInstruction,
  type ParsedClaimStandardReflectionTradingFeesInstruction,
  type ParsedCloseProtocolLookupTableInstruction,
  type ParsedCreateOrUpdateProtocolFeeAdminInstruction,
  type ParsedCreateOrUpdateProtocolOwnerInstruction,
  type ParsedCreateOrUpdateProtocolStakingAdminInstruction,
  type ParsedCreateProtocolConfigInstruction,
  type ParsedCreateProtocolLookupTableInstruction,
  type ParsedCreateStandardLiquidityPoolInstruction,
  type ParsedDeactivateProtocolLookupTableInstruction,
  type ParsedExtendProtocolLookupTableInstruction,
  type ParsedInitializeProtocolLendingInstruction,
  type ParsedRemainingAccountsStubInstruction,
  type ParsedSellInstruction,
  type ParsedSetProtocolSlotFeesInstruction,
  type ParsedUpdateAllowCreatePoolInstruction,
  type ParsedUpdateCreatorTradingFeeReceiverInstruction,
  type ParsedUpdateProtocolConfigInstruction,
} from '../instructions'

export const HEAVEN_PROGRAM_ADDRESS =
  'GgE4QoiM8VYoQNZkiNLHNbzXEkKyynzsApC8BvBY4b1V' as Address<'GgE4QoiM8VYoQNZkiNLHNbzXEkKyynzsApC8BvBY4b1V'>

export enum HeavenAccount {
  LiquidityPoolState,
  MsolTicketSolSpent,
  ProtocolAdminState,
  ProtocolConfig,
  ProtocolOwnerState,
}

export function identifyHeavenAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): HeavenAccount {
  const data = 'data' in account ? account.data : account
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([190, 158, 220, 130, 15, 162, 132, 252])
      ),
      0
    )
  ) {
    return HeavenAccount.LiquidityPoolState
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([66, 196, 62, 134, 124, 149, 250, 66])
      ),
      0
    )
  ) {
    return HeavenAccount.MsolTicketSolSpent
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([24, 124, 174, 225, 232, 30, 115, 192])
      ),
      0
    )
  ) {
    return HeavenAccount.ProtocolAdminState
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([207, 91, 250, 28, 152, 179, 215, 209])
      ),
      0
    )
  ) {
    return HeavenAccount.ProtocolConfig
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([208, 64, 209, 204, 113, 226, 22, 98])
      ),
      0
    )
  ) {
    return HeavenAccount.ProtocolOwnerState
  }
  throw new Error('The provided account could not be identified as a heaven account.')
}

export enum HeavenInstruction {
  AdminBorrowSol,
  AdminClaimMsol,
  AdminClaimStakingRewards,
  AdminClaimStandardCreatorTradingFees,
  AdminDepositMsol,
  AdminMintMsol,
  AdminRepaySol,
  AdminUnstakeMsol,
  AdminUpdateStandardLiquidityPoolState,
  AdminWithdrawMsol,
  AdminWithdrawTransferFee,
  Buy,
  ClaimStandardCreatorTradingFeeProtocolFees,
  ClaimStandardCreatorTradingFees,
  ClaimStandardProtocolTradingFees,
  ClaimStandardReflectionTradingFees,
  CloseProtocolLookupTable,
  CreateOrUpdateProtocolFeeAdmin,
  CreateOrUpdateProtocolOwner,
  CreateOrUpdateProtocolStakingAdmin,
  CreateProtocolConfig,
  CreateProtocolLookupTable,
  CreateStandardLiquidityPool,
  DeactivateProtocolLookupTable,
  ExtendProtocolLookupTable,
  InitializeProtocolLending,
  RemainingAccountsStub,
  Sell,
  SetProtocolSlotFees,
  UpdateAllowCreatePool,
  UpdateCreatorTradingFeeReceiver,
  UpdateProtocolConfig,
}

export function identifyHeavenInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): HeavenInstruction {
  const data = 'data' in instruction ? instruction.data : instruction
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([204, 72, 95, 215, 172, 192, 137, 252])
      ),
      0
    )
  ) {
    return HeavenInstruction.AdminBorrowSol
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([124, 48, 60, 199, 203, 49, 36, 41])
      ),
      0
    )
  ) {
    return HeavenInstruction.AdminClaimMsol
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([24, 163, 220, 171, 225, 222, 166, 248])
      ),
      0
    )
  ) {
    return HeavenInstruction.AdminClaimStakingRewards
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([182, 39, 168, 25, 96, 63, 76, 17])
      ),
      0
    )
  ) {
    return HeavenInstruction.AdminClaimStandardCreatorTradingFees
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([206, 189, 208, 166, 19, 81, 202, 48])
      ),
      0
    )
  ) {
    return HeavenInstruction.AdminDepositMsol
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([140, 202, 57, 195, 97, 213, 168, 19])
      ),
      0
    )
  ) {
    return HeavenInstruction.AdminMintMsol
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([136, 61, 48, 232, 166, 26, 207, 46])
      ),
      0
    )
  ) {
    return HeavenInstruction.AdminRepaySol
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([253, 218, 141, 252, 40, 9, 7, 154])
      ),
      0
    )
  ) {
    return HeavenInstruction.AdminUnstakeMsol
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([99, 228, 41, 63, 221, 244, 200, 199])
      ),
      0
    )
  ) {
    return HeavenInstruction.AdminUpdateStandardLiquidityPoolState
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([249, 219, 141, 72, 210, 110, 216, 99])
      ),
      0
    )
  ) {
    return HeavenInstruction.AdminWithdrawMsol
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([117, 79, 164, 203, 126, 72, 22, 246])
      ),
      0
    )
  ) {
    return HeavenInstruction.AdminWithdrawTransferFee
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([102, 6, 61, 18, 1, 218, 235, 234])
      ),
      0
    )
  ) {
    return HeavenInstruction.Buy
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([0, 201, 226, 228, 127, 45, 69, 110])
      ),
      0
    )
  ) {
    return HeavenInstruction.ClaimStandardCreatorTradingFeeProtocolFees
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([165, 89, 221, 52, 170, 249, 34, 111])
      ),
      0
    )
  ) {
    return HeavenInstruction.ClaimStandardCreatorTradingFees
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([84, 206, 140, 245, 63, 212, 64, 237])
      ),
      0
    )
  ) {
    return HeavenInstruction.ClaimStandardProtocolTradingFees
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([70, 148, 37, 147, 102, 20, 30, 23])
      ),
      0
    )
  ) {
    return HeavenInstruction.ClaimStandardReflectionTradingFees
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([79, 72, 48, 39, 119, 3, 42, 116])
      ),
      0
    )
  ) {
    return HeavenInstruction.CloseProtocolLookupTable
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([21, 126, 176, 20, 85, 111, 53, 31])
      ),
      0
    )
  ) {
    return HeavenInstruction.CreateOrUpdateProtocolFeeAdmin
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([170, 124, 128, 40, 48, 105, 139, 148])
      ),
      0
    )
  ) {
    return HeavenInstruction.CreateOrUpdateProtocolOwner
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([4, 172, 196, 213, 120, 50, 30, 137])
      ),
      0
    )
  ) {
    return HeavenInstruction.CreateOrUpdateProtocolStakingAdmin
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([115, 114, 24, 111, 14, 53, 113, 254])
      ),
      0
    )
  ) {
    return HeavenInstruction.CreateProtocolConfig
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([249, 3, 99, 153, 168, 241, 243, 228])
      ),
      0
    )
  ) {
    return HeavenInstruction.CreateProtocolLookupTable
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([42, 43, 126, 56, 231, 10, 208, 53])
      ),
      0
    )
  ) {
    return HeavenInstruction.CreateStandardLiquidityPool
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([218, 12, 88, 58, 150, 44, 152, 72])
      ),
      0
    )
  ) {
    return HeavenInstruction.DeactivateProtocolLookupTable
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([7, 227, 198, 1, 107, 113, 31, 88])
      ),
      0
    )
  ) {
    return HeavenInstruction.ExtendProtocolLookupTable
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([0, 205, 237, 240, 27, 79, 27, 59])
      ),
      0
    )
  ) {
    return HeavenInstruction.InitializeProtocolLending
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([32, 143, 83, 94, 23, 34, 59, 239])
      ),
      0
    )
  ) {
    return HeavenInstruction.RemainingAccountsStub
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([51, 230, 133, 164, 1, 127, 131, 173])
      ),
      0
    )
  ) {
    return HeavenInstruction.Sell
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([181, 82, 19, 15, 126, 205, 152, 242])
      ),
      0
    )
  ) {
    return HeavenInstruction.SetProtocolSlotFees
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([223, 252, 231, 62, 96, 219, 241, 214])
      ),
      0
    )
  ) {
    return HeavenInstruction.UpdateAllowCreatePool
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([246, 229, 200, 79, 31, 21, 120, 25])
      ),
      0
    )
  ) {
    return HeavenInstruction.UpdateCreatorTradingFeeReceiver
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([197, 97, 123, 54, 221, 168, 11, 135])
      ),
      0
    )
  ) {
    return HeavenInstruction.UpdateProtocolConfig
  }
  throw new Error('The provided instruction could not be identified as a heaven instruction.')
}

export type ParsedHeavenInstruction<
  TProgram extends string = 'GgE4QoiM8VYoQNZkiNLHNbzXEkKyynzsApC8BvBY4b1V',
> =
  | ({
      instructionType: HeavenInstruction.AdminBorrowSol
    } & ParsedAdminBorrowSolInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.AdminClaimMsol
    } & ParsedAdminClaimMsolInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.AdminClaimStakingRewards
    } & ParsedAdminClaimStakingRewardsInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.AdminClaimStandardCreatorTradingFees
    } & ParsedAdminClaimStandardCreatorTradingFeesInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.AdminDepositMsol
    } & ParsedAdminDepositMsolInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.AdminMintMsol
    } & ParsedAdminMintMsolInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.AdminRepaySol
    } & ParsedAdminRepaySolInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.AdminUnstakeMsol
    } & ParsedAdminUnstakeMsolInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.AdminUpdateStandardLiquidityPoolState
    } & ParsedAdminUpdateStandardLiquidityPoolStateInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.AdminWithdrawMsol
    } & ParsedAdminWithdrawMsolInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.AdminWithdrawTransferFee
    } & ParsedAdminWithdrawTransferFeeInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.Buy
    } & ParsedBuyInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.ClaimStandardCreatorTradingFeeProtocolFees
    } & ParsedClaimStandardCreatorTradingFeeProtocolFeesInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.ClaimStandardCreatorTradingFees
    } & ParsedClaimStandardCreatorTradingFeesInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.ClaimStandardProtocolTradingFees
    } & ParsedClaimStandardProtocolTradingFeesInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.ClaimStandardReflectionTradingFees
    } & ParsedClaimStandardReflectionTradingFeesInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.CloseProtocolLookupTable
    } & ParsedCloseProtocolLookupTableInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.CreateOrUpdateProtocolFeeAdmin
    } & ParsedCreateOrUpdateProtocolFeeAdminInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.CreateOrUpdateProtocolOwner
    } & ParsedCreateOrUpdateProtocolOwnerInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.CreateOrUpdateProtocolStakingAdmin
    } & ParsedCreateOrUpdateProtocolStakingAdminInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.CreateProtocolConfig
    } & ParsedCreateProtocolConfigInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.CreateProtocolLookupTable
    } & ParsedCreateProtocolLookupTableInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.CreateStandardLiquidityPool
    } & ParsedCreateStandardLiquidityPoolInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.DeactivateProtocolLookupTable
    } & ParsedDeactivateProtocolLookupTableInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.ExtendProtocolLookupTable
    } & ParsedExtendProtocolLookupTableInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.InitializeProtocolLending
    } & ParsedInitializeProtocolLendingInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.RemainingAccountsStub
    } & ParsedRemainingAccountsStubInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.Sell
    } & ParsedSellInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.SetProtocolSlotFees
    } & ParsedSetProtocolSlotFeesInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.UpdateAllowCreatePool
    } & ParsedUpdateAllowCreatePoolInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.UpdateCreatorTradingFeeReceiver
    } & ParsedUpdateCreatorTradingFeeReceiverInstruction<TProgram>)
  | ({
      instructionType: HeavenInstruction.UpdateProtocolConfig
    } & ParsedUpdateProtocolConfigInstruction<TProgram>)
