/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit'
import { HEAVEN_PROGRAM_ADDRESS } from '../programs'
import { expectSome, getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const ADMIN_WITHDRAW_TRANSFER_FEE_DISCRIMINATOR = new Uint8Array([
  117, 79, 164, 203, 126, 72, 22, 246,
])

export function getAdminWithdrawTransferFeeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ADMIN_WITHDRAW_TRANSFER_FEE_DISCRIMINATOR)
}

export type AdminWithdrawTransferFeeInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountReceiver extends string | AccountMeta<string> = string,
  TAccountProtocolFeeAdminState extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountProtocolConfig extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountMint extends string ? ReadonlyAccount<TAccountMint> : TAccountMint,
      TAccountReceiver extends string ? WritableAccount<TAccountReceiver> : TAccountReceiver,
      TAccountProtocolFeeAdminState extends string
        ? ReadonlyAccount<TAccountProtocolFeeAdminState>
        : TAccountProtocolFeeAdminState,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> & AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountProtocolConfig extends string
        ? WritableAccount<TAccountProtocolConfig>
        : TAccountProtocolConfig,
      ...TRemainingAccounts,
    ]
  >

export type AdminWithdrawTransferFeeInstructionData = {
  discriminator: ReadonlyUint8Array
  protocolConfigVersion: number
}

export type AdminWithdrawTransferFeeInstructionDataArgs = {
  protocolConfigVersion: number
}

export function getAdminWithdrawTransferFeeInstructionDataEncoder(): FixedSizeEncoder<AdminWithdrawTransferFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['protocolConfigVersion', getU16Encoder()],
    ]),
    value => ({
      ...value,
      discriminator: ADMIN_WITHDRAW_TRANSFER_FEE_DISCRIMINATOR,
    })
  )
}

export function getAdminWithdrawTransferFeeInstructionDataDecoder(): FixedSizeDecoder<AdminWithdrawTransferFeeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['protocolConfigVersion', getU16Decoder()],
  ])
}

export function getAdminWithdrawTransferFeeInstructionDataCodec(): FixedSizeCodec<
  AdminWithdrawTransferFeeInstructionDataArgs,
  AdminWithdrawTransferFeeInstructionData
> {
  return combineCodec(
    getAdminWithdrawTransferFeeInstructionDataEncoder(),
    getAdminWithdrawTransferFeeInstructionDataDecoder()
  )
}

export type AdminWithdrawTransferFeeAsyncInput<
  TAccountTokenProgram extends string = string,
  TAccountMint extends string = string,
  TAccountReceiver extends string = string,
  TAccountProtocolFeeAdminState extends string = string,
  TAccountAdmin extends string = string,
  TAccountProtocolConfig extends string = string,
> = {
  tokenProgram?: Address<TAccountTokenProgram>
  mint: Address<TAccountMint>
  receiver: Address<TAccountReceiver>
  protocolFeeAdminState?: Address<TAccountProtocolFeeAdminState>
  admin: TransactionSigner<TAccountAdmin>
  protocolConfig?: Address<TAccountProtocolConfig>
  protocolConfigVersion: AdminWithdrawTransferFeeInstructionDataArgs['protocolConfigVersion']
}

export async function getAdminWithdrawTransferFeeInstructionAsync<
  TAccountTokenProgram extends string,
  TAccountMint extends string,
  TAccountReceiver extends string,
  TAccountProtocolFeeAdminState extends string,
  TAccountAdmin extends string,
  TAccountProtocolConfig extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: AdminWithdrawTransferFeeAsyncInput<
    TAccountTokenProgram,
    TAccountMint,
    TAccountReceiver,
    TAccountProtocolFeeAdminState,
    TAccountAdmin,
    TAccountProtocolConfig
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  AdminWithdrawTransferFeeInstruction<
    TProgramAddress,
    TAccountTokenProgram,
    TAccountMint,
    TAccountReceiver,
    TAccountProtocolFeeAdminState,
    TAccountAdmin,
    TAccountProtocolConfig
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    receiver: { value: input.receiver ?? null, isWritable: true },
    protocolFeeAdminState: {
      value: input.protocolFeeAdminState ?? null,
      isWritable: false,
    },
    admin: { value: input.admin ?? null, isWritable: false },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: true },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }
  if (!accounts.protocolFeeAdminState.value) {
    accounts.protocolFeeAdminState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 102, 101, 101, 95, 97, 100, 109, 105, 110,
            95, 115, 116, 97, 116, 101,
          ])
        ),
      ],
    })
  }
  if (!accounts.protocolConfig.value) {
    accounts.protocolConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 99, 111, 110, 102, 105, 103, 95, 115, 116,
            97, 116, 101,
          ])
        ),
        getU16Encoder().encode(expectSome(args.protocolConfigVersion)),
      ],
    })
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.receiver),
      getAccountMeta(accounts.protocolFeeAdminState),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.protocolConfig),
    ],
    programAddress,
    data: getAdminWithdrawTransferFeeInstructionDataEncoder().encode(
      args as AdminWithdrawTransferFeeInstructionDataArgs
    ),
  } as AdminWithdrawTransferFeeInstruction<
    TProgramAddress,
    TAccountTokenProgram,
    TAccountMint,
    TAccountReceiver,
    TAccountProtocolFeeAdminState,
    TAccountAdmin,
    TAccountProtocolConfig
  >

  return instruction
}

export type AdminWithdrawTransferFeeInput<
  TAccountTokenProgram extends string = string,
  TAccountMint extends string = string,
  TAccountReceiver extends string = string,
  TAccountProtocolFeeAdminState extends string = string,
  TAccountAdmin extends string = string,
  TAccountProtocolConfig extends string = string,
> = {
  tokenProgram?: Address<TAccountTokenProgram>
  mint: Address<TAccountMint>
  receiver: Address<TAccountReceiver>
  protocolFeeAdminState: Address<TAccountProtocolFeeAdminState>
  admin: TransactionSigner<TAccountAdmin>
  protocolConfig: Address<TAccountProtocolConfig>
  protocolConfigVersion: AdminWithdrawTransferFeeInstructionDataArgs['protocolConfigVersion']
}

export function getAdminWithdrawTransferFeeInstruction<
  TAccountTokenProgram extends string,
  TAccountMint extends string,
  TAccountReceiver extends string,
  TAccountProtocolFeeAdminState extends string,
  TAccountAdmin extends string,
  TAccountProtocolConfig extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: AdminWithdrawTransferFeeInput<
    TAccountTokenProgram,
    TAccountMint,
    TAccountReceiver,
    TAccountProtocolFeeAdminState,
    TAccountAdmin,
    TAccountProtocolConfig
  >,
  config?: { programAddress?: TProgramAddress }
): AdminWithdrawTransferFeeInstruction<
  TProgramAddress,
  TAccountTokenProgram,
  TAccountMint,
  TAccountReceiver,
  TAccountProtocolFeeAdminState,
  TAccountAdmin,
  TAccountProtocolConfig
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    receiver: { value: input.receiver ?? null, isWritable: true },
    protocolFeeAdminState: {
      value: input.protocolFeeAdminState ?? null,
      isWritable: false,
    },
    admin: { value: input.admin ?? null, isWritable: false },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: true },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.receiver),
      getAccountMeta(accounts.protocolFeeAdminState),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.protocolConfig),
    ],
    programAddress,
    data: getAdminWithdrawTransferFeeInstructionDataEncoder().encode(
      args as AdminWithdrawTransferFeeInstructionDataArgs
    ),
  } as AdminWithdrawTransferFeeInstruction<
    TProgramAddress,
    TAccountTokenProgram,
    TAccountMint,
    TAccountReceiver,
    TAccountProtocolFeeAdminState,
    TAccountAdmin,
    TAccountProtocolConfig
  >

  return instruction
}

export type ParsedAdminWithdrawTransferFeeInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    tokenProgram: TAccountMetas[0]
    mint: TAccountMetas[1]
    receiver: TAccountMetas[2]
    protocolFeeAdminState: TAccountMetas[3]
    admin: TAccountMetas[4]
    protocolConfig: TAccountMetas[5]
  }
  data: AdminWithdrawTransferFeeInstructionData
}

export function parseAdminWithdrawTransferFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAdminWithdrawTransferFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tokenProgram: getNextAccount(),
      mint: getNextAccount(),
      receiver: getNextAccount(),
      protocolFeeAdminState: getNextAccount(),
      admin: getNextAccount(),
      protocolConfig: getNextAccount(),
    },
    data: getAdminWithdrawTransferFeeInstructionDataDecoder().decode(instruction.data),
  }
}
