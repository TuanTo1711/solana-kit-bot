/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit'
import { HEAVEN_PROGRAM_ADDRESS } from '../programs'
import { expectAddress, expectSome, getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const ADMIN_UNSTAKE_MSOL_DISCRIMINATOR = new Uint8Array([253, 218, 141, 252, 40, 9, 7, 154])

export function getAdminUnstakeMsolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ADMIN_UNSTAKE_MSOL_DISCRIMINATOR)
}

export type AdminUnstakeMsolInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountProtocolConfigState extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountProtocolStakingAdminState extends string | AccountMeta<string> = string,
  TAccountMsolTicket extends string | AccountMeta<string> = string,
  TAccountMsolMint extends
    | string
    | AccountMeta<string> = 'mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So',
  TAccountMsolTicketSolSpent extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> & AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountProtocolConfigState extends string
        ? WritableAccount<TAccountProtocolConfigState>
        : TAccountProtocolConfigState,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountProtocolStakingAdminState extends string
        ? ReadonlyAccount<TAccountProtocolStakingAdminState>
        : TAccountProtocolStakingAdminState,
      TAccountMsolTicket extends string ? WritableAccount<TAccountMsolTicket> : TAccountMsolTicket,
      TAccountMsolMint extends string ? ReadonlyAccount<TAccountMsolMint> : TAccountMsolMint,
      TAccountMsolTicketSolSpent extends string
        ? WritableAccount<TAccountMsolTicketSolSpent>
        : TAccountMsolTicketSolSpent,
      ...TRemainingAccounts,
    ]
  >

export type AdminUnstakeMsolInstructionData = {
  discriminator: ReadonlyUint8Array
  version: number
  ticketNumber: number
  amount: bigint
}

export type AdminUnstakeMsolInstructionDataArgs = {
  version: number
  ticketNumber: number
  amount: number | bigint
}

export function getAdminUnstakeMsolInstructionDataEncoder(): FixedSizeEncoder<AdminUnstakeMsolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['version', getU16Encoder()],
      ['ticketNumber', getU32Encoder()],
      ['amount', getU64Encoder()],
    ]),
    value => ({ ...value, discriminator: ADMIN_UNSTAKE_MSOL_DISCRIMINATOR })
  )
}

export function getAdminUnstakeMsolInstructionDataDecoder(): FixedSizeDecoder<AdminUnstakeMsolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['version', getU16Decoder()],
    ['ticketNumber', getU32Decoder()],
    ['amount', getU64Decoder()],
  ])
}

export function getAdminUnstakeMsolInstructionDataCodec(): FixedSizeCodec<
  AdminUnstakeMsolInstructionDataArgs,
  AdminUnstakeMsolInstructionData
> {
  return combineCodec(
    getAdminUnstakeMsolInstructionDataEncoder(),
    getAdminUnstakeMsolInstructionDataDecoder()
  )
}

export type AdminUnstakeMsolAsyncInput<
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountPayer extends string = string,
  TAccountAdmin extends string = string,
  TAccountProtocolConfigState extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountProtocolStakingAdminState extends string = string,
  TAccountMsolTicket extends string = string,
  TAccountMsolMint extends string = string,
  TAccountMsolTicketSolSpent extends string = string,
> = {
  tokenProgram?: Address<TAccountTokenProgram>
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>
  payer: TransactionSigner<TAccountPayer>
  admin: TransactionSigner<TAccountAdmin>
  protocolConfigState?: Address<TAccountProtocolConfigState>
  systemProgram?: Address<TAccountSystemProgram>
  protocolStakingAdminState?: Address<TAccountProtocolStakingAdminState>
  /** CHECK */
  msolTicket?: Address<TAccountMsolTicket>
  msolMint?: Address<TAccountMsolMint>
  /** CHECK */
  msolTicketSolSpent?: Address<TAccountMsolTicketSolSpent>
  version: AdminUnstakeMsolInstructionDataArgs['version']
  ticketNumber: AdminUnstakeMsolInstructionDataArgs['ticketNumber']
  amount: AdminUnstakeMsolInstructionDataArgs['amount']
}

export async function getAdminUnstakeMsolInstructionAsync<
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountPayer extends string,
  TAccountAdmin extends string,
  TAccountProtocolConfigState extends string,
  TAccountSystemProgram extends string,
  TAccountProtocolStakingAdminState extends string,
  TAccountMsolTicket extends string,
  TAccountMsolMint extends string,
  TAccountMsolTicketSolSpent extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: AdminUnstakeMsolAsyncInput<
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountSystemProgram,
    TAccountProtocolStakingAdminState,
    TAccountMsolTicket,
    TAccountMsolMint,
    TAccountMsolTicketSolSpent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  AdminUnstakeMsolInstruction<
    TProgramAddress,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountSystemProgram,
    TAccountProtocolStakingAdminState,
    TAccountMsolTicket,
    TAccountMsolMint,
    TAccountMsolTicketSolSpent
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
    protocolConfigState: {
      value: input.protocolConfigState ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    protocolStakingAdminState: {
      value: input.protocolStakingAdminState ?? null,
      isWritable: false,
    },
    msolTicket: { value: input.msolTicket ?? null, isWritable: true },
    msolMint: { value: input.msolMint ?? null, isWritable: false },
    msolTicketSolSpent: {
      value: input.msolTicketSolSpent ?? null,
      isWritable: true,
    },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>
  }
  if (!accounts.protocolConfigState.value) {
    accounts.protocolConfigState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 99, 111, 110, 102, 105, 103, 95, 115, 116,
            97, 116, 101,
          ])
        ),
        getU16Encoder().encode(expectSome(args.version)),
      ],
    })
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.protocolStakingAdminState.value) {
    accounts.protocolStakingAdminState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 115, 116, 97, 107, 105, 110, 103, 95, 97,
            100, 109, 105, 110, 95, 115, 116, 97, 116, 101,
          ])
        ),
      ],
    })
  }
  if (!accounts.msolTicket.value) {
    accounts.msolTicket.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 115, 111, 108, 95, 116, 105, 99, 107, 101, 116, 95, 97, 99, 99])
        ),
        getAddressEncoder().encode(expectAddress(accounts.protocolConfigState.value)),
        getU32Encoder().encode(expectSome(args.ticketNumber)),
      ],
    })
  }
  if (!accounts.msolMint.value) {
    accounts.msolMint.value =
      'mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So' as Address<'mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So'>
  }
  if (!accounts.msolTicketSolSpent.value) {
    accounts.msolTicketSolSpent.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            109, 115, 111, 108, 95, 116, 105, 99, 107, 101, 116, 95, 97, 99, 99, 95, 115, 111, 108,
            95, 115, 112, 101, 110, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.protocolConfigState.value)),
        getU32Encoder().encode(expectSome(args.ticketNumber)),
      ],
    })
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.protocolConfigState),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.protocolStakingAdminState),
      getAccountMeta(accounts.msolTicket),
      getAccountMeta(accounts.msolMint),
      getAccountMeta(accounts.msolTicketSolSpent),
    ],
    programAddress,
    data: getAdminUnstakeMsolInstructionDataEncoder().encode(
      args as AdminUnstakeMsolInstructionDataArgs
    ),
  } as AdminUnstakeMsolInstruction<
    TProgramAddress,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountSystemProgram,
    TAccountProtocolStakingAdminState,
    TAccountMsolTicket,
    TAccountMsolMint,
    TAccountMsolTicketSolSpent
  >

  return instruction
}

export type AdminUnstakeMsolInput<
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountPayer extends string = string,
  TAccountAdmin extends string = string,
  TAccountProtocolConfigState extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountProtocolStakingAdminState extends string = string,
  TAccountMsolTicket extends string = string,
  TAccountMsolMint extends string = string,
  TAccountMsolTicketSolSpent extends string = string,
> = {
  tokenProgram?: Address<TAccountTokenProgram>
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>
  payer: TransactionSigner<TAccountPayer>
  admin: TransactionSigner<TAccountAdmin>
  protocolConfigState: Address<TAccountProtocolConfigState>
  systemProgram?: Address<TAccountSystemProgram>
  protocolStakingAdminState: Address<TAccountProtocolStakingAdminState>
  /** CHECK */
  msolTicket: Address<TAccountMsolTicket>
  msolMint?: Address<TAccountMsolMint>
  /** CHECK */
  msolTicketSolSpent: Address<TAccountMsolTicketSolSpent>
  version: AdminUnstakeMsolInstructionDataArgs['version']
  ticketNumber: AdminUnstakeMsolInstructionDataArgs['ticketNumber']
  amount: AdminUnstakeMsolInstructionDataArgs['amount']
}

export function getAdminUnstakeMsolInstruction<
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountPayer extends string,
  TAccountAdmin extends string,
  TAccountProtocolConfigState extends string,
  TAccountSystemProgram extends string,
  TAccountProtocolStakingAdminState extends string,
  TAccountMsolTicket extends string,
  TAccountMsolMint extends string,
  TAccountMsolTicketSolSpent extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: AdminUnstakeMsolInput<
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountSystemProgram,
    TAccountProtocolStakingAdminState,
    TAccountMsolTicket,
    TAccountMsolMint,
    TAccountMsolTicketSolSpent
  >,
  config?: { programAddress?: TProgramAddress }
): AdminUnstakeMsolInstruction<
  TProgramAddress,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountPayer,
  TAccountAdmin,
  TAccountProtocolConfigState,
  TAccountSystemProgram,
  TAccountProtocolStakingAdminState,
  TAccountMsolTicket,
  TAccountMsolMint,
  TAccountMsolTicketSolSpent
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
    protocolConfigState: {
      value: input.protocolConfigState ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    protocolStakingAdminState: {
      value: input.protocolStakingAdminState ?? null,
      isWritable: false,
    },
    msolTicket: { value: input.msolTicket ?? null, isWritable: true },
    msolMint: { value: input.msolMint ?? null, isWritable: false },
    msolTicketSolSpent: {
      value: input.msolTicketSolSpent ?? null,
      isWritable: true,
    },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.msolMint.value) {
    accounts.msolMint.value =
      'mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So' as Address<'mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.protocolConfigState),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.protocolStakingAdminState),
      getAccountMeta(accounts.msolTicket),
      getAccountMeta(accounts.msolMint),
      getAccountMeta(accounts.msolTicketSolSpent),
    ],
    programAddress,
    data: getAdminUnstakeMsolInstructionDataEncoder().encode(
      args as AdminUnstakeMsolInstructionDataArgs
    ),
  } as AdminUnstakeMsolInstruction<
    TProgramAddress,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountSystemProgram,
    TAccountProtocolStakingAdminState,
    TAccountMsolTicket,
    TAccountMsolMint,
    TAccountMsolTicketSolSpent
  >

  return instruction
}

export type ParsedAdminUnstakeMsolInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    tokenProgram: TAccountMetas[0]
    associatedTokenProgram: TAccountMetas[1]
    payer: TAccountMetas[2]
    admin: TAccountMetas[3]
    protocolConfigState: TAccountMetas[4]
    systemProgram: TAccountMetas[5]
    protocolStakingAdminState: TAccountMetas[6]
    /** CHECK */
    msolTicket: TAccountMetas[7]
    msolMint: TAccountMetas[8]
    /** CHECK */
    msolTicketSolSpent: TAccountMetas[9]
  }
  data: AdminUnstakeMsolInstructionData
}

export function parseAdminUnstakeMsolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAdminUnstakeMsolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      payer: getNextAccount(),
      admin: getNextAccount(),
      protocolConfigState: getNextAccount(),
      systemProgram: getNextAccount(),
      protocolStakingAdminState: getNextAccount(),
      msolTicket: getNextAccount(),
      msolMint: getNextAccount(),
      msolTicketSolSpent: getNextAccount(),
    },
    data: getAdminUnstakeMsolInstructionDataDecoder().decode(instruction.data),
  }
}
