/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit'
import { HEAVEN_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const UPDATE_ALLOW_CREATE_POOL_DISCRIMINATOR = new Uint8Array([
  223, 252, 231, 62, 96, 219, 241, 214,
])

export function getUpdateAllowCreatePoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(UPDATE_ALLOW_CREATE_POOL_DISCRIMINATOR)
}

export type UpdateAllowCreatePoolInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountProtocolConfigState extends string | AccountMeta<string> = string,
  TAccountProtocolAdminState extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> & AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountProtocolConfigState extends string
        ? WritableAccount<TAccountProtocolConfigState>
        : TAccountProtocolConfigState,
      TAccountProtocolAdminState extends string
        ? ReadonlyAccount<TAccountProtocolAdminState>
        : TAccountProtocolAdminState,
      ...TRemainingAccounts,
    ]
  >

export type UpdateAllowCreatePoolInstructionData = {
  discriminator: ReadonlyUint8Array
  version: number
  allowCreatePool: boolean
}

export type UpdateAllowCreatePoolInstructionDataArgs = {
  version: number
  allowCreatePool: boolean
}

export function getUpdateAllowCreatePoolInstructionDataEncoder(): FixedSizeEncoder<UpdateAllowCreatePoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['version', getU16Encoder()],
      ['allowCreatePool', getBooleanEncoder()],
    ]),
    value => ({
      ...value,
      discriminator: UPDATE_ALLOW_CREATE_POOL_DISCRIMINATOR,
    })
  )
}

export function getUpdateAllowCreatePoolInstructionDataDecoder(): FixedSizeDecoder<UpdateAllowCreatePoolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['version', getU16Decoder()],
    ['allowCreatePool', getBooleanDecoder()],
  ])
}

export function getUpdateAllowCreatePoolInstructionDataCodec(): FixedSizeCodec<
  UpdateAllowCreatePoolInstructionDataArgs,
  UpdateAllowCreatePoolInstructionData
> {
  return combineCodec(
    getUpdateAllowCreatePoolInstructionDataEncoder(),
    getUpdateAllowCreatePoolInstructionDataDecoder()
  )
}

export type UpdateAllowCreatePoolAsyncInput<
  TAccountAdmin extends string = string,
  TAccountProtocolConfigState extends string = string,
  TAccountProtocolAdminState extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>
  protocolConfigState: Address<TAccountProtocolConfigState>
  protocolAdminState?: Address<TAccountProtocolAdminState>
  version: UpdateAllowCreatePoolInstructionDataArgs['version']
  allowCreatePool: UpdateAllowCreatePoolInstructionDataArgs['allowCreatePool']
}

export async function getUpdateAllowCreatePoolInstructionAsync<
  TAccountAdmin extends string,
  TAccountProtocolConfigState extends string,
  TAccountProtocolAdminState extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: UpdateAllowCreatePoolAsyncInput<
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountProtocolAdminState
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateAllowCreatePoolInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountProtocolAdminState
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    protocolConfigState: {
      value: input.protocolConfigState ?? null,
      isWritable: true,
    },
    protocolAdminState: {
      value: input.protocolAdminState ?? null,
      isWritable: false,
    },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.protocolAdminState.value) {
    accounts.protocolAdminState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 102, 101, 101, 95, 97, 100, 109, 105, 110,
            95, 115, 116, 97, 116, 101,
          ])
        ),
      ],
    })
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.protocolConfigState),
      getAccountMeta(accounts.protocolAdminState),
    ],
    programAddress,
    data: getUpdateAllowCreatePoolInstructionDataEncoder().encode(
      args as UpdateAllowCreatePoolInstructionDataArgs
    ),
  } as UpdateAllowCreatePoolInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountProtocolAdminState
  >

  return instruction
}

export type UpdateAllowCreatePoolInput<
  TAccountAdmin extends string = string,
  TAccountProtocolConfigState extends string = string,
  TAccountProtocolAdminState extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>
  protocolConfigState: Address<TAccountProtocolConfigState>
  protocolAdminState: Address<TAccountProtocolAdminState>
  version: UpdateAllowCreatePoolInstructionDataArgs['version']
  allowCreatePool: UpdateAllowCreatePoolInstructionDataArgs['allowCreatePool']
}

export function getUpdateAllowCreatePoolInstruction<
  TAccountAdmin extends string,
  TAccountProtocolConfigState extends string,
  TAccountProtocolAdminState extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: UpdateAllowCreatePoolInput<
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountProtocolAdminState
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateAllowCreatePoolInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountProtocolConfigState,
  TAccountProtocolAdminState
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    protocolConfigState: {
      value: input.protocolConfigState ?? null,
      isWritable: true,
    },
    protocolAdminState: {
      value: input.protocolAdminState ?? null,
      isWritable: false,
    },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.protocolConfigState),
      getAccountMeta(accounts.protocolAdminState),
    ],
    programAddress,
    data: getUpdateAllowCreatePoolInstructionDataEncoder().encode(
      args as UpdateAllowCreatePoolInstructionDataArgs
    ),
  } as UpdateAllowCreatePoolInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountProtocolAdminState
  >

  return instruction
}

export type ParsedUpdateAllowCreatePoolInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    admin: TAccountMetas[0]
    protocolConfigState: TAccountMetas[1]
    protocolAdminState: TAccountMetas[2]
  }
  data: UpdateAllowCreatePoolInstructionData
}

export function parseUpdateAllowCreatePoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateAllowCreatePoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      protocolConfigState: getNextAccount(),
      protocolAdminState: getNextAccount(),
    },
    data: getUpdateAllowCreatePoolInstructionDataDecoder().decode(instruction.data),
  }
}
