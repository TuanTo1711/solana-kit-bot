/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit'
import { HEAVEN_PROGRAM_ADDRESS } from '../programs'
import { expectAddress, expectSome, getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const CREATE_STANDARD_LIQUIDITY_POOL_DISCRIMINATOR = new Uint8Array([
  42, 43, 126, 56, 231, 10, 208, 53,
])

export function getCreateStandardLiquidityPoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CREATE_STANDARD_LIQUIDITY_POOL_DISCRIMINATOR)
}

export type CreateStandardLiquidityPoolInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountTokenAMint extends string | AccountMeta<string> = string,
  TAccountTokenBMint extends
    | string
    | AccountMeta<string> = 'So11111111111111111111111111111111111111112',
  TAccountUserTokenAVault extends string | AccountMeta<string> = string,
  TAccountTokenAVault extends string | AccountMeta<string> = string,
  TAccountTokenBVault extends string | AccountMeta<string> = string,
  TAccountLiquidityPoolState extends string | AccountMeta<string> = string,
  TAccountProtocolConfig extends string | AccountMeta<string> = string,
  TAccountTokenAProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountUser extends string
        ? ReadonlySignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTokenAMint extends string ? ReadonlyAccount<TAccountTokenAMint> : TAccountTokenAMint,
      TAccountTokenBMint extends string ? ReadonlyAccount<TAccountTokenBMint> : TAccountTokenBMint,
      TAccountUserTokenAVault extends string
        ? WritableAccount<TAccountUserTokenAVault>
        : TAccountUserTokenAVault,
      TAccountTokenAVault extends string
        ? WritableAccount<TAccountTokenAVault>
        : TAccountTokenAVault,
      TAccountTokenBVault extends string
        ? WritableAccount<TAccountTokenBVault>
        : TAccountTokenBVault,
      TAccountLiquidityPoolState extends string
        ? WritableAccount<TAccountLiquidityPoolState>
        : TAccountLiquidityPoolState,
      TAccountProtocolConfig extends string
        ? WritableAccount<TAccountProtocolConfig>
        : TAccountProtocolConfig,
      TAccountTokenAProgram extends string
        ? ReadonlyAccount<TAccountTokenAProgram>
        : TAccountTokenAProgram,
      ...TRemainingAccounts,
    ]
  >

export type CreateStandardLiquidityPoolInstructionData = {
  discriminator: ReadonlyUint8Array
  protocolConfigVersion: number
  encodedUserDefinedEventData: string
  initialPurchaseAmount: bigint
  maxSolSpend: bigint
}

export type CreateStandardLiquidityPoolInstructionDataArgs = {
  protocolConfigVersion: number
  encodedUserDefinedEventData: string
  initialPurchaseAmount: number | bigint
  maxSolSpend: number | bigint
}

export function getCreateStandardLiquidityPoolInstructionDataEncoder(): Encoder<CreateStandardLiquidityPoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['protocolConfigVersion', getU16Encoder()],
      ['encodedUserDefinedEventData', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['initialPurchaseAmount', getU64Encoder()],
      ['maxSolSpend', getU64Encoder()],
    ]),
    value => ({
      ...value,
      discriminator: CREATE_STANDARD_LIQUIDITY_POOL_DISCRIMINATOR,
    })
  )
}

export function getCreateStandardLiquidityPoolInstructionDataDecoder(): Decoder<CreateStandardLiquidityPoolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['protocolConfigVersion', getU16Decoder()],
    ['encodedUserDefinedEventData', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['initialPurchaseAmount', getU64Decoder()],
    ['maxSolSpend', getU64Decoder()],
  ])
}

export function getCreateStandardLiquidityPoolInstructionDataCodec(): Codec<
  CreateStandardLiquidityPoolInstructionDataArgs,
  CreateStandardLiquidityPoolInstructionData
> {
  return combineCodec(
    getCreateStandardLiquidityPoolInstructionDataEncoder(),
    getCreateStandardLiquidityPoolInstructionDataDecoder()
  )
}

export type CreateStandardLiquidityPoolAsyncInput<
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountUser extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenAMint extends string = string,
  TAccountTokenBMint extends string = string,
  TAccountUserTokenAVault extends string = string,
  TAccountTokenAVault extends string = string,
  TAccountTokenBVault extends string = string,
  TAccountLiquidityPoolState extends string = string,
  TAccountProtocolConfig extends string = string,
  TAccountTokenAProgram extends string = string,
> = {
  tokenProgram?: Address<TAccountTokenProgram>
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>
  systemProgram?: Address<TAccountSystemProgram>
  user: TransactionSigner<TAccountUser>
  payer: TransactionSigner<TAccountPayer>
  tokenAMint: Address<TAccountTokenAMint>
  tokenBMint?: Address<TAccountTokenBMint>
  userTokenAVault: Address<TAccountUserTokenAVault>
  tokenAVault?: Address<TAccountTokenAVault>
  tokenBVault?: Address<TAccountTokenBVault>
  liquidityPoolState?: Address<TAccountLiquidityPoolState>
  protocolConfig?: Address<TAccountProtocolConfig>
  tokenAProgram: Address<TAccountTokenAProgram>
  protocolConfigVersion: CreateStandardLiquidityPoolInstructionDataArgs['protocolConfigVersion']
  encodedUserDefinedEventData: CreateStandardLiquidityPoolInstructionDataArgs['encodedUserDefinedEventData']
  initialPurchaseAmount: CreateStandardLiquidityPoolInstructionDataArgs['initialPurchaseAmount']
  maxSolSpend: CreateStandardLiquidityPoolInstructionDataArgs['maxSolSpend']
}

export async function getCreateStandardLiquidityPoolInstructionAsync<
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountUser extends string,
  TAccountPayer extends string,
  TAccountTokenAMint extends string,
  TAccountTokenBMint extends string,
  TAccountUserTokenAVault extends string,
  TAccountTokenAVault extends string,
  TAccountTokenBVault extends string,
  TAccountLiquidityPoolState extends string,
  TAccountProtocolConfig extends string,
  TAccountTokenAProgram extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: CreateStandardLiquidityPoolAsyncInput<
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountUser,
    TAccountPayer,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountUserTokenAVault,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountLiquidityPoolState,
    TAccountProtocolConfig,
    TAccountTokenAProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateStandardLiquidityPoolInstruction<
    TProgramAddress,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountUser,
    TAccountPayer,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountUserTokenAVault,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountLiquidityPoolState,
    TAccountProtocolConfig,
    TAccountTokenAProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    user: { value: input.user ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    tokenAMint: { value: input.tokenAMint ?? null, isWritable: false },
    tokenBMint: { value: input.tokenBMint ?? null, isWritable: false },
    userTokenAVault: { value: input.userTokenAVault ?? null, isWritable: true },
    tokenAVault: { value: input.tokenAVault ?? null, isWritable: true },
    tokenBVault: { value: input.tokenBVault ?? null, isWritable: true },
    liquidityPoolState: {
      value: input.liquidityPoolState ?? null,
      isWritable: true,
    },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: true },
    tokenAProgram: { value: input.tokenAProgram ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.tokenBMint.value) {
    accounts.tokenBMint.value =
      'So11111111111111111111111111111111111111112' as Address<'So11111111111111111111111111111111111111112'>
  }
  if (!accounts.protocolConfig.value) {
    accounts.protocolConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 99, 111, 110, 102, 105, 103, 95, 115, 116,
            97, 116, 101,
          ])
        ),
        getU16Encoder().encode(expectSome(args.protocolConfigVersion)),
      ],
    })
  }
  if (!accounts.tokenAVault.value) {
    accounts.tokenAVault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.protocolConfig.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenAProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenAMint.value)),
      ],
    })
  }
  if (!accounts.tokenBVault.value) {
    accounts.tokenBVault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.protocolConfig.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenBMint.value)),
      ],
    })
  }
  if (!accounts.liquidityPoolState.value) {
    accounts.liquidityPoolState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            108, 105, 113, 117, 105, 100, 105, 116, 121, 95, 112, 111, 111, 108, 95, 115, 116, 97,
            116, 101,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenAMint.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenBMint.value)),
      ],
    })
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenAMint),
      getAccountMeta(accounts.tokenBMint),
      getAccountMeta(accounts.userTokenAVault),
      getAccountMeta(accounts.tokenAVault),
      getAccountMeta(accounts.tokenBVault),
      getAccountMeta(accounts.liquidityPoolState),
      getAccountMeta(accounts.protocolConfig),
      getAccountMeta(accounts.tokenAProgram),
    ],
    programAddress,
    data: getCreateStandardLiquidityPoolInstructionDataEncoder().encode(
      args as CreateStandardLiquidityPoolInstructionDataArgs
    ),
  } as CreateStandardLiquidityPoolInstruction<
    TProgramAddress,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountUser,
    TAccountPayer,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountUserTokenAVault,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountLiquidityPoolState,
    TAccountProtocolConfig,
    TAccountTokenAProgram
  >

  return instruction
}

export type CreateStandardLiquidityPoolInput<
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountUser extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenAMint extends string = string,
  TAccountTokenBMint extends string = string,
  TAccountUserTokenAVault extends string = string,
  TAccountTokenAVault extends string = string,
  TAccountTokenBVault extends string = string,
  TAccountLiquidityPoolState extends string = string,
  TAccountProtocolConfig extends string = string,
  TAccountTokenAProgram extends string = string,
> = {
  tokenProgram?: Address<TAccountTokenProgram>
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>
  systemProgram?: Address<TAccountSystemProgram>
  user: TransactionSigner<TAccountUser>
  payer: TransactionSigner<TAccountPayer>
  tokenAMint: Address<TAccountTokenAMint>
  tokenBMint?: Address<TAccountTokenBMint>
  userTokenAVault: Address<TAccountUserTokenAVault>
  tokenAVault: Address<TAccountTokenAVault>
  tokenBVault: Address<TAccountTokenBVault>
  liquidityPoolState: Address<TAccountLiquidityPoolState>
  protocolConfig: Address<TAccountProtocolConfig>
  tokenAProgram: Address<TAccountTokenAProgram>
  protocolConfigVersion: CreateStandardLiquidityPoolInstructionDataArgs['protocolConfigVersion']
  encodedUserDefinedEventData: CreateStandardLiquidityPoolInstructionDataArgs['encodedUserDefinedEventData']
  initialPurchaseAmount: CreateStandardLiquidityPoolInstructionDataArgs['initialPurchaseAmount']
  maxSolSpend: CreateStandardLiquidityPoolInstructionDataArgs['maxSolSpend']
}

export function getCreateStandardLiquidityPoolInstruction<
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountUser extends string,
  TAccountPayer extends string,
  TAccountTokenAMint extends string,
  TAccountTokenBMint extends string,
  TAccountUserTokenAVault extends string,
  TAccountTokenAVault extends string,
  TAccountTokenBVault extends string,
  TAccountLiquidityPoolState extends string,
  TAccountProtocolConfig extends string,
  TAccountTokenAProgram extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: CreateStandardLiquidityPoolInput<
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountUser,
    TAccountPayer,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountUserTokenAVault,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountLiquidityPoolState,
    TAccountProtocolConfig,
    TAccountTokenAProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateStandardLiquidityPoolInstruction<
  TProgramAddress,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountUser,
  TAccountPayer,
  TAccountTokenAMint,
  TAccountTokenBMint,
  TAccountUserTokenAVault,
  TAccountTokenAVault,
  TAccountTokenBVault,
  TAccountLiquidityPoolState,
  TAccountProtocolConfig,
  TAccountTokenAProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    user: { value: input.user ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    tokenAMint: { value: input.tokenAMint ?? null, isWritable: false },
    tokenBMint: { value: input.tokenBMint ?? null, isWritable: false },
    userTokenAVault: { value: input.userTokenAVault ?? null, isWritable: true },
    tokenAVault: { value: input.tokenAVault ?? null, isWritable: true },
    tokenBVault: { value: input.tokenBVault ?? null, isWritable: true },
    liquidityPoolState: {
      value: input.liquidityPoolState ?? null,
      isWritable: true,
    },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: true },
    tokenAProgram: { value: input.tokenAProgram ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.tokenBMint.value) {
    accounts.tokenBMint.value =
      'So11111111111111111111111111111111111111112' as Address<'So11111111111111111111111111111111111111112'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenAMint),
      getAccountMeta(accounts.tokenBMint),
      getAccountMeta(accounts.userTokenAVault),
      getAccountMeta(accounts.tokenAVault),
      getAccountMeta(accounts.tokenBVault),
      getAccountMeta(accounts.liquidityPoolState),
      getAccountMeta(accounts.protocolConfig),
      getAccountMeta(accounts.tokenAProgram),
    ],
    programAddress,
    data: getCreateStandardLiquidityPoolInstructionDataEncoder().encode(
      args as CreateStandardLiquidityPoolInstructionDataArgs
    ),
  } as CreateStandardLiquidityPoolInstruction<
    TProgramAddress,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountUser,
    TAccountPayer,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountUserTokenAVault,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountLiquidityPoolState,
    TAccountProtocolConfig,
    TAccountTokenAProgram
  >

  return instruction
}

export type ParsedCreateStandardLiquidityPoolInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    tokenProgram: TAccountMetas[0]
    associatedTokenProgram: TAccountMetas[1]
    systemProgram: TAccountMetas[2]
    user: TAccountMetas[3]
    payer: TAccountMetas[4]
    tokenAMint: TAccountMetas[5]
    tokenBMint: TAccountMetas[6]
    userTokenAVault: TAccountMetas[7]
    tokenAVault: TAccountMetas[8]
    tokenBVault: TAccountMetas[9]
    liquidityPoolState: TAccountMetas[10]
    protocolConfig: TAccountMetas[11]
    tokenAProgram: TAccountMetas[12]
  }
  data: CreateStandardLiquidityPoolInstructionData
}

export function parseCreateStandardLiquidityPoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateStandardLiquidityPoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      user: getNextAccount(),
      payer: getNextAccount(),
      tokenAMint: getNextAccount(),
      tokenBMint: getNextAccount(),
      userTokenAVault: getNextAccount(),
      tokenAVault: getNextAccount(),
      tokenBVault: getNextAccount(),
      liquidityPoolState: getNextAccount(),
      protocolConfig: getNextAccount(),
      tokenAProgram: getNextAccount(),
    },
    data: getCreateStandardLiquidityPoolInstructionDataDecoder().decode(instruction.data),
  }
}
