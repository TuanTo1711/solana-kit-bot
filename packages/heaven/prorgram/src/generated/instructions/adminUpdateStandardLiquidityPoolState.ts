/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit'
import { HEAVEN_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'
import {
  getAdminUpdateLiquidityPoolStateDecoder,
  getAdminUpdateLiquidityPoolStateEncoder,
  type AdminUpdateLiquidityPoolState,
  type AdminUpdateLiquidityPoolStateArgs,
} from '../types'

export const ADMIN_UPDATE_STANDARD_LIQUIDITY_POOL_STATE_DISCRIMINATOR = new Uint8Array([
  99, 228, 41, 63, 221, 244, 200, 199,
])

export function getAdminUpdateStandardLiquidityPoolStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADMIN_UPDATE_STANDARD_LIQUIDITY_POOL_STATE_DISCRIMINATOR
  )
}

export type AdminUpdateStandardLiquidityPoolStateInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountLiquidityPoolState extends string | AccountMeta<string> = string,
  TAccountProtocolConfig extends string | AccountMeta<string> = string,
  TAccountProtocolAdmin extends string | AccountMeta<string> = string,
  TAccountProtocolAdminState extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLiquidityPoolState extends string
        ? WritableAccount<TAccountLiquidityPoolState>
        : TAccountLiquidityPoolState,
      TAccountProtocolConfig extends string
        ? WritableAccount<TAccountProtocolConfig>
        : TAccountProtocolConfig,
      TAccountProtocolAdmin extends string
        ? ReadonlySignerAccount<TAccountProtocolAdmin> & AccountSignerMeta<TAccountProtocolAdmin>
        : TAccountProtocolAdmin,
      TAccountProtocolAdminState extends string
        ? ReadonlyAccount<TAccountProtocolAdminState>
        : TAccountProtocolAdminState,
      ...TRemainingAccounts,
    ]
  >

export type AdminUpdateStandardLiquidityPoolStateInstructionData = {
  discriminator: ReadonlyUint8Array
  update: AdminUpdateLiquidityPoolState
}

export type AdminUpdateStandardLiquidityPoolStateInstructionDataArgs = {
  update: AdminUpdateLiquidityPoolStateArgs
}

export function getAdminUpdateStandardLiquidityPoolStateInstructionDataEncoder(): Encoder<AdminUpdateStandardLiquidityPoolStateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['update', getAdminUpdateLiquidityPoolStateEncoder()],
    ]),
    value => ({
      ...value,
      discriminator: ADMIN_UPDATE_STANDARD_LIQUIDITY_POOL_STATE_DISCRIMINATOR,
    })
  )
}

export function getAdminUpdateStandardLiquidityPoolStateInstructionDataDecoder(): Decoder<AdminUpdateStandardLiquidityPoolStateInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['update', getAdminUpdateLiquidityPoolStateDecoder()],
  ])
}

export function getAdminUpdateStandardLiquidityPoolStateInstructionDataCodec(): Codec<
  AdminUpdateStandardLiquidityPoolStateInstructionDataArgs,
  AdminUpdateStandardLiquidityPoolStateInstructionData
> {
  return combineCodec(
    getAdminUpdateStandardLiquidityPoolStateInstructionDataEncoder(),
    getAdminUpdateStandardLiquidityPoolStateInstructionDataDecoder()
  )
}

export type AdminUpdateStandardLiquidityPoolStateAsyncInput<
  TAccountLiquidityPoolState extends string = string,
  TAccountProtocolConfig extends string = string,
  TAccountProtocolAdmin extends string = string,
  TAccountProtocolAdminState extends string = string,
> = {
  liquidityPoolState: Address<TAccountLiquidityPoolState>
  protocolConfig: Address<TAccountProtocolConfig>
  protocolAdmin: TransactionSigner<TAccountProtocolAdmin>
  protocolAdminState?: Address<TAccountProtocolAdminState>
  update: AdminUpdateStandardLiquidityPoolStateInstructionDataArgs['update']
}

export async function getAdminUpdateStandardLiquidityPoolStateInstructionAsync<
  TAccountLiquidityPoolState extends string,
  TAccountProtocolConfig extends string,
  TAccountProtocolAdmin extends string,
  TAccountProtocolAdminState extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: AdminUpdateStandardLiquidityPoolStateAsyncInput<
    TAccountLiquidityPoolState,
    TAccountProtocolConfig,
    TAccountProtocolAdmin,
    TAccountProtocolAdminState
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  AdminUpdateStandardLiquidityPoolStateInstruction<
    TProgramAddress,
    TAccountLiquidityPoolState,
    TAccountProtocolConfig,
    TAccountProtocolAdmin,
    TAccountProtocolAdminState
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    liquidityPoolState: {
      value: input.liquidityPoolState ?? null,
      isWritable: true,
    },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: true },
    protocolAdmin: { value: input.protocolAdmin ?? null, isWritable: false },
    protocolAdminState: {
      value: input.protocolAdminState ?? null,
      isWritable: false,
    },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.protocolAdminState.value) {
    accounts.protocolAdminState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 102, 101, 101, 95, 97, 100, 109, 105, 110,
            95, 115, 116, 97, 116, 101,
          ])
        ),
      ],
    })
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.liquidityPoolState),
      getAccountMeta(accounts.protocolConfig),
      getAccountMeta(accounts.protocolAdmin),
      getAccountMeta(accounts.protocolAdminState),
    ],
    programAddress,
    data: getAdminUpdateStandardLiquidityPoolStateInstructionDataEncoder().encode(
      args as AdminUpdateStandardLiquidityPoolStateInstructionDataArgs
    ),
  } as AdminUpdateStandardLiquidityPoolStateInstruction<
    TProgramAddress,
    TAccountLiquidityPoolState,
    TAccountProtocolConfig,
    TAccountProtocolAdmin,
    TAccountProtocolAdminState
  >

  return instruction
}

export type AdminUpdateStandardLiquidityPoolStateInput<
  TAccountLiquidityPoolState extends string = string,
  TAccountProtocolConfig extends string = string,
  TAccountProtocolAdmin extends string = string,
  TAccountProtocolAdminState extends string = string,
> = {
  liquidityPoolState: Address<TAccountLiquidityPoolState>
  protocolConfig: Address<TAccountProtocolConfig>
  protocolAdmin: TransactionSigner<TAccountProtocolAdmin>
  protocolAdminState: Address<TAccountProtocolAdminState>
  update: AdminUpdateStandardLiquidityPoolStateInstructionDataArgs['update']
}

export function getAdminUpdateStandardLiquidityPoolStateInstruction<
  TAccountLiquidityPoolState extends string,
  TAccountProtocolConfig extends string,
  TAccountProtocolAdmin extends string,
  TAccountProtocolAdminState extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: AdminUpdateStandardLiquidityPoolStateInput<
    TAccountLiquidityPoolState,
    TAccountProtocolConfig,
    TAccountProtocolAdmin,
    TAccountProtocolAdminState
  >,
  config?: { programAddress?: TProgramAddress }
): AdminUpdateStandardLiquidityPoolStateInstruction<
  TProgramAddress,
  TAccountLiquidityPoolState,
  TAccountProtocolConfig,
  TAccountProtocolAdmin,
  TAccountProtocolAdminState
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    liquidityPoolState: {
      value: input.liquidityPoolState ?? null,
      isWritable: true,
    },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: true },
    protocolAdmin: { value: input.protocolAdmin ?? null, isWritable: false },
    protocolAdminState: {
      value: input.protocolAdminState ?? null,
      isWritable: false,
    },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.liquidityPoolState),
      getAccountMeta(accounts.protocolConfig),
      getAccountMeta(accounts.protocolAdmin),
      getAccountMeta(accounts.protocolAdminState),
    ],
    programAddress,
    data: getAdminUpdateStandardLiquidityPoolStateInstructionDataEncoder().encode(
      args as AdminUpdateStandardLiquidityPoolStateInstructionDataArgs
    ),
  } as AdminUpdateStandardLiquidityPoolStateInstruction<
    TProgramAddress,
    TAccountLiquidityPoolState,
    TAccountProtocolConfig,
    TAccountProtocolAdmin,
    TAccountProtocolAdminState
  >

  return instruction
}

export type ParsedAdminUpdateStandardLiquidityPoolStateInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    liquidityPoolState: TAccountMetas[0]
    protocolConfig: TAccountMetas[1]
    protocolAdmin: TAccountMetas[2]
    protocolAdminState: TAccountMetas[3]
  }
  data: AdminUpdateStandardLiquidityPoolStateInstructionData
}

export function parseAdminUpdateStandardLiquidityPoolStateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAdminUpdateStandardLiquidityPoolStateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      liquidityPoolState: getNextAccount(),
      protocolConfig: getNextAccount(),
      protocolAdmin: getNextAccount(),
      protocolAdminState: getNextAccount(),
    },
    data: getAdminUpdateStandardLiquidityPoolStateInstructionDataDecoder().decode(instruction.data),
  }
}
