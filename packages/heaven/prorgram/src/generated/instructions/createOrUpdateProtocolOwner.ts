/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit'
import { HEAVEN_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const CREATE_OR_UPDATE_PROTOCOL_OWNER_DISCRIMINATOR = new Uint8Array([
  170, 124, 128, 40, 48, 105, 139, 148,
])

export function getCreateOrUpdateProtocolOwnerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CREATE_OR_UPDATE_PROTOCOL_OWNER_DISCRIMINATOR)
}

export type CreateOrUpdateProtocolOwnerInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountCurrentOwner extends string | AccountMeta<string> = string,
  TAccountNewOwner extends string | AccountMeta<string> = string,
  TAccountProtocolOwnerState extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountCurrentOwner extends string
        ? ReadonlySignerAccount<TAccountCurrentOwner> & AccountSignerMeta<TAccountCurrentOwner>
        : TAccountCurrentOwner,
      TAccountNewOwner extends string
        ? ReadonlySignerAccount<TAccountNewOwner> & AccountSignerMeta<TAccountNewOwner>
        : TAccountNewOwner,
      TAccountProtocolOwnerState extends string
        ? WritableAccount<TAccountProtocolOwnerState>
        : TAccountProtocolOwnerState,
      ...TRemainingAccounts,
    ]
  >

export type CreateOrUpdateProtocolOwnerInstructionData = {
  discriminator: ReadonlyUint8Array
}

export type CreateOrUpdateProtocolOwnerInstructionDataArgs = {}

export function getCreateOrUpdateProtocolOwnerInstructionDataEncoder(): FixedSizeEncoder<CreateOrUpdateProtocolOwnerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    value => ({
      ...value,
      discriminator: CREATE_OR_UPDATE_PROTOCOL_OWNER_DISCRIMINATOR,
    })
  )
}

export function getCreateOrUpdateProtocolOwnerInstructionDataDecoder(): FixedSizeDecoder<CreateOrUpdateProtocolOwnerInstructionData> {
  return getStructDecoder([['discriminator', fixDecoderSize(getBytesDecoder(), 8)]])
}

export function getCreateOrUpdateProtocolOwnerInstructionDataCodec(): FixedSizeCodec<
  CreateOrUpdateProtocolOwnerInstructionDataArgs,
  CreateOrUpdateProtocolOwnerInstructionData
> {
  return combineCodec(
    getCreateOrUpdateProtocolOwnerInstructionDataEncoder(),
    getCreateOrUpdateProtocolOwnerInstructionDataDecoder()
  )
}

export type CreateOrUpdateProtocolOwnerAsyncInput<
  TAccountSystemProgram extends string = string,
  TAccountPayer extends string = string,
  TAccountCurrentOwner extends string = string,
  TAccountNewOwner extends string = string,
  TAccountProtocolOwnerState extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>
  payer: TransactionSigner<TAccountPayer>
  currentOwner: TransactionSigner<TAccountCurrentOwner>
  newOwner: TransactionSigner<TAccountNewOwner>
  protocolOwnerState?: Address<TAccountProtocolOwnerState>
}

export async function getCreateOrUpdateProtocolOwnerInstructionAsync<
  TAccountSystemProgram extends string,
  TAccountPayer extends string,
  TAccountCurrentOwner extends string,
  TAccountNewOwner extends string,
  TAccountProtocolOwnerState extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: CreateOrUpdateProtocolOwnerAsyncInput<
    TAccountSystemProgram,
    TAccountPayer,
    TAccountCurrentOwner,
    TAccountNewOwner,
    TAccountProtocolOwnerState
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateOrUpdateProtocolOwnerInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountPayer,
    TAccountCurrentOwner,
    TAccountNewOwner,
    TAccountProtocolOwnerState
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    currentOwner: { value: input.currentOwner ?? null, isWritable: false },
    newOwner: { value: input.newOwner ?? null, isWritable: false },
    protocolOwnerState: {
      value: input.protocolOwnerState ?? null,
      isWritable: true,
    },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.protocolOwnerState.value) {
    accounts.protocolOwnerState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 111, 119, 110, 101, 114, 95, 115, 116, 97,
            116, 101,
          ])
        ),
      ],
    })
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.currentOwner),
      getAccountMeta(accounts.newOwner),
      getAccountMeta(accounts.protocolOwnerState),
    ],
    programAddress,
    data: getCreateOrUpdateProtocolOwnerInstructionDataEncoder().encode({}),
  } as CreateOrUpdateProtocolOwnerInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountPayer,
    TAccountCurrentOwner,
    TAccountNewOwner,
    TAccountProtocolOwnerState
  >

  return instruction
}

export type CreateOrUpdateProtocolOwnerInput<
  TAccountSystemProgram extends string = string,
  TAccountPayer extends string = string,
  TAccountCurrentOwner extends string = string,
  TAccountNewOwner extends string = string,
  TAccountProtocolOwnerState extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>
  payer: TransactionSigner<TAccountPayer>
  currentOwner: TransactionSigner<TAccountCurrentOwner>
  newOwner: TransactionSigner<TAccountNewOwner>
  protocolOwnerState: Address<TAccountProtocolOwnerState>
}

export function getCreateOrUpdateProtocolOwnerInstruction<
  TAccountSystemProgram extends string,
  TAccountPayer extends string,
  TAccountCurrentOwner extends string,
  TAccountNewOwner extends string,
  TAccountProtocolOwnerState extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: CreateOrUpdateProtocolOwnerInput<
    TAccountSystemProgram,
    TAccountPayer,
    TAccountCurrentOwner,
    TAccountNewOwner,
    TAccountProtocolOwnerState
  >,
  config?: { programAddress?: TProgramAddress }
): CreateOrUpdateProtocolOwnerInstruction<
  TProgramAddress,
  TAccountSystemProgram,
  TAccountPayer,
  TAccountCurrentOwner,
  TAccountNewOwner,
  TAccountProtocolOwnerState
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    currentOwner: { value: input.currentOwner ?? null, isWritable: false },
    newOwner: { value: input.newOwner ?? null, isWritable: false },
    protocolOwnerState: {
      value: input.protocolOwnerState ?? null,
      isWritable: true,
    },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.currentOwner),
      getAccountMeta(accounts.newOwner),
      getAccountMeta(accounts.protocolOwnerState),
    ],
    programAddress,
    data: getCreateOrUpdateProtocolOwnerInstructionDataEncoder().encode({}),
  } as CreateOrUpdateProtocolOwnerInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountPayer,
    TAccountCurrentOwner,
    TAccountNewOwner,
    TAccountProtocolOwnerState
  >

  return instruction
}

export type ParsedCreateOrUpdateProtocolOwnerInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    systemProgram: TAccountMetas[0]
    payer: TAccountMetas[1]
    currentOwner: TAccountMetas[2]
    newOwner: TAccountMetas[3]
    protocolOwnerState: TAccountMetas[4]
  }
  data: CreateOrUpdateProtocolOwnerInstructionData
}

export function parseCreateOrUpdateProtocolOwnerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateOrUpdateProtocolOwnerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      systemProgram: getNextAccount(),
      payer: getNextAccount(),
      currentOwner: getNextAccount(),
      newOwner: getNextAccount(),
      protocolOwnerState: getNextAccount(),
    },
    data: getCreateOrUpdateProtocolOwnerInstructionDataDecoder().decode(instruction.data),
  }
}
