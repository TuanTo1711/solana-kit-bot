/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit'
import { HEAVEN_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const CLAIM_STANDARD_REFLECTION_TRADING_FEES_DISCRIMINATOR = new Uint8Array([
  70, 148, 37, 147, 102, 20, 30, 23,
])

export function getClaimStandardReflectionTradingFeesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_STANDARD_REFLECTION_TRADING_FEES_DISCRIMINATOR
  )
}

export type ClaimStandardReflectionTradingFeesInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountTokenAProgram extends string | AccountMeta<string> = string,
  TAccountTokenBProgram extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountLiquidityPoolState extends string | AccountMeta<string> = string,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountTokenAMint extends string | AccountMeta<string> = string,
  TAccountTokenBMint extends string | AccountMeta<string> = string,
  TAccountUserTokenAVault extends string | AccountMeta<string> = string,
  TAccountUserTokenBVault extends string | AccountMeta<string> = string,
  TAccountTokenAVault extends string | AccountMeta<string> = string,
  TAccountTokenBVault extends string | AccountMeta<string> = string,
  TAccountProtocolConfig extends string | AccountMeta<string> = string,
  TAccountInstructionSysvarAccountInfo extends
    | string
    | AccountMeta<string> = 'Sysvar1nstructions1111111111111111111111111',
  TAccountProtocolAdmin extends string | AccountMeta<string> = string,
  TAccountProtocolAdminState extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTokenAProgram extends string
        ? ReadonlyAccount<TAccountTokenAProgram>
        : TAccountTokenAProgram,
      TAccountTokenBProgram extends string
        ? ReadonlyAccount<TAccountTokenBProgram>
        : TAccountTokenBProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountLiquidityPoolState extends string
        ? WritableAccount<TAccountLiquidityPoolState>
        : TAccountLiquidityPoolState,
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountTokenAMint extends string ? ReadonlyAccount<TAccountTokenAMint> : TAccountTokenAMint,
      TAccountTokenBMint extends string ? ReadonlyAccount<TAccountTokenBMint> : TAccountTokenBMint,
      TAccountUserTokenAVault extends string
        ? WritableAccount<TAccountUserTokenAVault>
        : TAccountUserTokenAVault,
      TAccountUserTokenBVault extends string
        ? WritableAccount<TAccountUserTokenBVault>
        : TAccountUserTokenBVault,
      TAccountTokenAVault extends string
        ? WritableAccount<TAccountTokenAVault>
        : TAccountTokenAVault,
      TAccountTokenBVault extends string
        ? WritableAccount<TAccountTokenBVault>
        : TAccountTokenBVault,
      TAccountProtocolConfig extends string
        ? WritableAccount<TAccountProtocolConfig>
        : TAccountProtocolConfig,
      TAccountInstructionSysvarAccountInfo extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccountInfo>
        : TAccountInstructionSysvarAccountInfo,
      TAccountProtocolAdmin extends string
        ? ReadonlySignerAccount<TAccountProtocolAdmin> & AccountSignerMeta<TAccountProtocolAdmin>
        : TAccountProtocolAdmin,
      TAccountProtocolAdminState extends string
        ? ReadonlyAccount<TAccountProtocolAdminState>
        : TAccountProtocolAdminState,
      ...TRemainingAccounts,
    ]
  >

export type ClaimStandardReflectionTradingFeesInstructionData = {
  discriminator: ReadonlyUint8Array
  amount: bigint
}

export type ClaimStandardReflectionTradingFeesInstructionDataArgs = {
  amount: number | bigint
}

export function getClaimStandardReflectionTradingFeesInstructionDataEncoder(): FixedSizeEncoder<ClaimStandardReflectionTradingFeesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    value => ({
      ...value,
      discriminator: CLAIM_STANDARD_REFLECTION_TRADING_FEES_DISCRIMINATOR,
    })
  )
}

export function getClaimStandardReflectionTradingFeesInstructionDataDecoder(): FixedSizeDecoder<ClaimStandardReflectionTradingFeesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ])
}

export function getClaimStandardReflectionTradingFeesInstructionDataCodec(): FixedSizeCodec<
  ClaimStandardReflectionTradingFeesInstructionDataArgs,
  ClaimStandardReflectionTradingFeesInstructionData
> {
  return combineCodec(
    getClaimStandardReflectionTradingFeesInstructionDataEncoder(),
    getClaimStandardReflectionTradingFeesInstructionDataDecoder()
  )
}

export type ClaimStandardReflectionTradingFeesAsyncInput<
  TAccountTokenAProgram extends string = string,
  TAccountTokenBProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountLiquidityPoolState extends string = string,
  TAccountUser extends string = string,
  TAccountTokenAMint extends string = string,
  TAccountTokenBMint extends string = string,
  TAccountUserTokenAVault extends string = string,
  TAccountUserTokenBVault extends string = string,
  TAccountTokenAVault extends string = string,
  TAccountTokenBVault extends string = string,
  TAccountProtocolConfig extends string = string,
  TAccountInstructionSysvarAccountInfo extends string = string,
  TAccountProtocolAdmin extends string = string,
  TAccountProtocolAdminState extends string = string,
> = {
  tokenAProgram: Address<TAccountTokenAProgram>
  tokenBProgram: Address<TAccountTokenBProgram>
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>
  systemProgram?: Address<TAccountSystemProgram>
  liquidityPoolState: Address<TAccountLiquidityPoolState>
  /** CHECK */
  user: TransactionSigner<TAccountUser>
  /** CHECK */
  tokenAMint: Address<TAccountTokenAMint>
  /** CHECK */
  tokenBMint: Address<TAccountTokenBMint>
  userTokenAVault: Address<TAccountUserTokenAVault>
  userTokenBVault: Address<TAccountUserTokenBVault>
  tokenAVault: Address<TAccountTokenAVault>
  tokenBVault: Address<TAccountTokenBVault>
  protocolConfig: Address<TAccountProtocolConfig>
  /** CHECK */
  instructionSysvarAccountInfo?: Address<TAccountInstructionSysvarAccountInfo>
  protocolAdmin: TransactionSigner<TAccountProtocolAdmin>
  protocolAdminState?: Address<TAccountProtocolAdminState>
  amount: ClaimStandardReflectionTradingFeesInstructionDataArgs['amount']
}

export async function getClaimStandardReflectionTradingFeesInstructionAsync<
  TAccountTokenAProgram extends string,
  TAccountTokenBProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountLiquidityPoolState extends string,
  TAccountUser extends string,
  TAccountTokenAMint extends string,
  TAccountTokenBMint extends string,
  TAccountUserTokenAVault extends string,
  TAccountUserTokenBVault extends string,
  TAccountTokenAVault extends string,
  TAccountTokenBVault extends string,
  TAccountProtocolConfig extends string,
  TAccountInstructionSysvarAccountInfo extends string,
  TAccountProtocolAdmin extends string,
  TAccountProtocolAdminState extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: ClaimStandardReflectionTradingFeesAsyncInput<
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountLiquidityPoolState,
    TAccountUser,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountUserTokenAVault,
    TAccountUserTokenBVault,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountProtocolConfig,
    TAccountInstructionSysvarAccountInfo,
    TAccountProtocolAdmin,
    TAccountProtocolAdminState
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimStandardReflectionTradingFeesInstruction<
    TProgramAddress,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountLiquidityPoolState,
    TAccountUser,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountUserTokenAVault,
    TAccountUserTokenBVault,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountProtocolConfig,
    TAccountInstructionSysvarAccountInfo,
    TAccountProtocolAdmin,
    TAccountProtocolAdminState
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    tokenAProgram: { value: input.tokenAProgram ?? null, isWritable: false },
    tokenBProgram: { value: input.tokenBProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    liquidityPoolState: {
      value: input.liquidityPoolState ?? null,
      isWritable: true,
    },
    user: { value: input.user ?? null, isWritable: true },
    tokenAMint: { value: input.tokenAMint ?? null, isWritable: false },
    tokenBMint: { value: input.tokenBMint ?? null, isWritable: false },
    userTokenAVault: { value: input.userTokenAVault ?? null, isWritable: true },
    userTokenBVault: { value: input.userTokenBVault ?? null, isWritable: true },
    tokenAVault: { value: input.tokenAVault ?? null, isWritable: true },
    tokenBVault: { value: input.tokenBVault ?? null, isWritable: true },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: true },
    instructionSysvarAccountInfo: {
      value: input.instructionSysvarAccountInfo ?? null,
      isWritable: false,
    },
    protocolAdmin: { value: input.protocolAdmin ?? null, isWritable: false },
    protocolAdminState: {
      value: input.protocolAdminState ?? null,
      isWritable: false,
    },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.instructionSysvarAccountInfo.value) {
    accounts.instructionSysvarAccountInfo.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>
  }
  if (!accounts.protocolAdminState.value) {
    accounts.protocolAdminState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 102, 101, 101, 95, 97, 100, 109, 105, 110,
            95, 115, 116, 97, 116, 101,
          ])
        ),
      ],
    })
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tokenAProgram),
      getAccountMeta(accounts.tokenBProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.liquidityPoolState),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.tokenAMint),
      getAccountMeta(accounts.tokenBMint),
      getAccountMeta(accounts.userTokenAVault),
      getAccountMeta(accounts.userTokenBVault),
      getAccountMeta(accounts.tokenAVault),
      getAccountMeta(accounts.tokenBVault),
      getAccountMeta(accounts.protocolConfig),
      getAccountMeta(accounts.instructionSysvarAccountInfo),
      getAccountMeta(accounts.protocolAdmin),
      getAccountMeta(accounts.protocolAdminState),
    ],
    programAddress,
    data: getClaimStandardReflectionTradingFeesInstructionDataEncoder().encode(
      args as ClaimStandardReflectionTradingFeesInstructionDataArgs
    ),
  } as ClaimStandardReflectionTradingFeesInstruction<
    TProgramAddress,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountLiquidityPoolState,
    TAccountUser,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountUserTokenAVault,
    TAccountUserTokenBVault,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountProtocolConfig,
    TAccountInstructionSysvarAccountInfo,
    TAccountProtocolAdmin,
    TAccountProtocolAdminState
  >

  return instruction
}

export type ClaimStandardReflectionTradingFeesInput<
  TAccountTokenAProgram extends string = string,
  TAccountTokenBProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountLiquidityPoolState extends string = string,
  TAccountUser extends string = string,
  TAccountTokenAMint extends string = string,
  TAccountTokenBMint extends string = string,
  TAccountUserTokenAVault extends string = string,
  TAccountUserTokenBVault extends string = string,
  TAccountTokenAVault extends string = string,
  TAccountTokenBVault extends string = string,
  TAccountProtocolConfig extends string = string,
  TAccountInstructionSysvarAccountInfo extends string = string,
  TAccountProtocolAdmin extends string = string,
  TAccountProtocolAdminState extends string = string,
> = {
  tokenAProgram: Address<TAccountTokenAProgram>
  tokenBProgram: Address<TAccountTokenBProgram>
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>
  systemProgram?: Address<TAccountSystemProgram>
  liquidityPoolState: Address<TAccountLiquidityPoolState>
  /** CHECK */
  user: TransactionSigner<TAccountUser>
  /** CHECK */
  tokenAMint: Address<TAccountTokenAMint>
  /** CHECK */
  tokenBMint: Address<TAccountTokenBMint>
  userTokenAVault: Address<TAccountUserTokenAVault>
  userTokenBVault: Address<TAccountUserTokenBVault>
  tokenAVault: Address<TAccountTokenAVault>
  tokenBVault: Address<TAccountTokenBVault>
  protocolConfig: Address<TAccountProtocolConfig>
  /** CHECK */
  instructionSysvarAccountInfo?: Address<TAccountInstructionSysvarAccountInfo>
  protocolAdmin: TransactionSigner<TAccountProtocolAdmin>
  protocolAdminState: Address<TAccountProtocolAdminState>
  amount: ClaimStandardReflectionTradingFeesInstructionDataArgs['amount']
}

export function getClaimStandardReflectionTradingFeesInstruction<
  TAccountTokenAProgram extends string,
  TAccountTokenBProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountLiquidityPoolState extends string,
  TAccountUser extends string,
  TAccountTokenAMint extends string,
  TAccountTokenBMint extends string,
  TAccountUserTokenAVault extends string,
  TAccountUserTokenBVault extends string,
  TAccountTokenAVault extends string,
  TAccountTokenBVault extends string,
  TAccountProtocolConfig extends string,
  TAccountInstructionSysvarAccountInfo extends string,
  TAccountProtocolAdmin extends string,
  TAccountProtocolAdminState extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: ClaimStandardReflectionTradingFeesInput<
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountLiquidityPoolState,
    TAccountUser,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountUserTokenAVault,
    TAccountUserTokenBVault,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountProtocolConfig,
    TAccountInstructionSysvarAccountInfo,
    TAccountProtocolAdmin,
    TAccountProtocolAdminState
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimStandardReflectionTradingFeesInstruction<
  TProgramAddress,
  TAccountTokenAProgram,
  TAccountTokenBProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountLiquidityPoolState,
  TAccountUser,
  TAccountTokenAMint,
  TAccountTokenBMint,
  TAccountUserTokenAVault,
  TAccountUserTokenBVault,
  TAccountTokenAVault,
  TAccountTokenBVault,
  TAccountProtocolConfig,
  TAccountInstructionSysvarAccountInfo,
  TAccountProtocolAdmin,
  TAccountProtocolAdminState
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    tokenAProgram: { value: input.tokenAProgram ?? null, isWritable: false },
    tokenBProgram: { value: input.tokenBProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    liquidityPoolState: {
      value: input.liquidityPoolState ?? null,
      isWritable: true,
    },
    user: { value: input.user ?? null, isWritable: true },
    tokenAMint: { value: input.tokenAMint ?? null, isWritable: false },
    tokenBMint: { value: input.tokenBMint ?? null, isWritable: false },
    userTokenAVault: { value: input.userTokenAVault ?? null, isWritable: true },
    userTokenBVault: { value: input.userTokenBVault ?? null, isWritable: true },
    tokenAVault: { value: input.tokenAVault ?? null, isWritable: true },
    tokenBVault: { value: input.tokenBVault ?? null, isWritable: true },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: true },
    instructionSysvarAccountInfo: {
      value: input.instructionSysvarAccountInfo ?? null,
      isWritable: false,
    },
    protocolAdmin: { value: input.protocolAdmin ?? null, isWritable: false },
    protocolAdminState: {
      value: input.protocolAdminState ?? null,
      isWritable: false,
    },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.instructionSysvarAccountInfo.value) {
    accounts.instructionSysvarAccountInfo.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tokenAProgram),
      getAccountMeta(accounts.tokenBProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.liquidityPoolState),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.tokenAMint),
      getAccountMeta(accounts.tokenBMint),
      getAccountMeta(accounts.userTokenAVault),
      getAccountMeta(accounts.userTokenBVault),
      getAccountMeta(accounts.tokenAVault),
      getAccountMeta(accounts.tokenBVault),
      getAccountMeta(accounts.protocolConfig),
      getAccountMeta(accounts.instructionSysvarAccountInfo),
      getAccountMeta(accounts.protocolAdmin),
      getAccountMeta(accounts.protocolAdminState),
    ],
    programAddress,
    data: getClaimStandardReflectionTradingFeesInstructionDataEncoder().encode(
      args as ClaimStandardReflectionTradingFeesInstructionDataArgs
    ),
  } as ClaimStandardReflectionTradingFeesInstruction<
    TProgramAddress,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountLiquidityPoolState,
    TAccountUser,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountUserTokenAVault,
    TAccountUserTokenBVault,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountProtocolConfig,
    TAccountInstructionSysvarAccountInfo,
    TAccountProtocolAdmin,
    TAccountProtocolAdminState
  >

  return instruction
}

export type ParsedClaimStandardReflectionTradingFeesInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    tokenAProgram: TAccountMetas[0]
    tokenBProgram: TAccountMetas[1]
    associatedTokenProgram: TAccountMetas[2]
    systemProgram: TAccountMetas[3]
    liquidityPoolState: TAccountMetas[4]
    /** CHECK */
    user: TAccountMetas[5]
    /** CHECK */
    tokenAMint: TAccountMetas[6]
    /** CHECK */
    tokenBMint: TAccountMetas[7]
    userTokenAVault: TAccountMetas[8]
    userTokenBVault: TAccountMetas[9]
    tokenAVault: TAccountMetas[10]
    tokenBVault: TAccountMetas[11]
    protocolConfig: TAccountMetas[12]
    /** CHECK */
    instructionSysvarAccountInfo: TAccountMetas[13]
    protocolAdmin: TAccountMetas[14]
    protocolAdminState: TAccountMetas[15]
  }
  data: ClaimStandardReflectionTradingFeesInstructionData
}

export function parseClaimStandardReflectionTradingFeesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimStandardReflectionTradingFeesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tokenAProgram: getNextAccount(),
      tokenBProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      liquidityPoolState: getNextAccount(),
      user: getNextAccount(),
      tokenAMint: getNextAccount(),
      tokenBMint: getNextAccount(),
      userTokenAVault: getNextAccount(),
      userTokenBVault: getNextAccount(),
      tokenAVault: getNextAccount(),
      tokenBVault: getNextAccount(),
      protocolConfig: getNextAccount(),
      instructionSysvarAccountInfo: getNextAccount(),
      protocolAdmin: getNextAccount(),
      protocolAdminState: getNextAccount(),
    },
    data: getClaimStandardReflectionTradingFeesInstructionDataDecoder().decode(instruction.data),
  }
}
