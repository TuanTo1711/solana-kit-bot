/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit'
import { HEAVEN_PROGRAM_ADDRESS } from '../programs'
import { expectAddress, expectSome, getAccountMetaFactory, type ResolvedAccount } from '../shared'
import {
  getProtocolConfigParamsDecoder,
  getProtocolConfigParamsEncoder,
  type ProtocolConfigParams,
  type ProtocolConfigParamsArgs,
} from '../types'

export const CREATE_PROTOCOL_CONFIG_DISCRIMINATOR = new Uint8Array([
  115, 114, 24, 111, 14, 53, 113, 254,
])

export function getCreateProtocolConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CREATE_PROTOCOL_CONFIG_DISCRIMINATOR)
}

export type CreateProtocolConfigInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountProtocolConfigState extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountProtocolOwnerState extends string | AccountMeta<string> = string,
  TAccountMsolTokenVault extends string | AccountMeta<string> = string,
  TAccountMsolMint extends
    | string
    | AccountMeta<string> = 'mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> & AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountProtocolConfigState extends string
        ? WritableAccount<TAccountProtocolConfigState>
        : TAccountProtocolConfigState,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountProtocolOwnerState extends string
        ? ReadonlyAccount<TAccountProtocolOwnerState>
        : TAccountProtocolOwnerState,
      TAccountMsolTokenVault extends string
        ? WritableAccount<TAccountMsolTokenVault>
        : TAccountMsolTokenVault,
      TAccountMsolMint extends string ? ReadonlyAccount<TAccountMsolMint> : TAccountMsolMint,
      ...TRemainingAccounts,
    ]
  >

export type CreateProtocolConfigInstructionData = {
  discriminator: ReadonlyUint8Array
  version: number
  params: ProtocolConfigParams
}

export type CreateProtocolConfigInstructionDataArgs = {
  version: number
  params: ProtocolConfigParamsArgs
}

export function getCreateProtocolConfigInstructionDataEncoder(): FixedSizeEncoder<CreateProtocolConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['version', getU16Encoder()],
      ['params', getProtocolConfigParamsEncoder()],
    ]),
    value => ({
      ...value,
      discriminator: CREATE_PROTOCOL_CONFIG_DISCRIMINATOR,
    })
  )
}

export function getCreateProtocolConfigInstructionDataDecoder(): FixedSizeDecoder<CreateProtocolConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['version', getU16Decoder()],
    ['params', getProtocolConfigParamsDecoder()],
  ])
}

export function getCreateProtocolConfigInstructionDataCodec(): FixedSizeCodec<
  CreateProtocolConfigInstructionDataArgs,
  CreateProtocolConfigInstructionData
> {
  return combineCodec(
    getCreateProtocolConfigInstructionDataEncoder(),
    getCreateProtocolConfigInstructionDataDecoder()
  )
}

export type CreateProtocolConfigAsyncInput<
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountPayer extends string = string,
  TAccountOwner extends string = string,
  TAccountProtocolConfigState extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountProtocolOwnerState extends string = string,
  TAccountMsolTokenVault extends string = string,
  TAccountMsolMint extends string = string,
> = {
  tokenProgram?: Address<TAccountTokenProgram>
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>
  payer: TransactionSigner<TAccountPayer>
  owner: TransactionSigner<TAccountOwner>
  protocolConfigState?: Address<TAccountProtocolConfigState>
  systemProgram?: Address<TAccountSystemProgram>
  protocolOwnerState?: Address<TAccountProtocolOwnerState>
  msolTokenVault?: Address<TAccountMsolTokenVault>
  /** CHECK */
  msolMint?: Address<TAccountMsolMint>
  version: CreateProtocolConfigInstructionDataArgs['version']
  params: CreateProtocolConfigInstructionDataArgs['params']
}

export async function getCreateProtocolConfigInstructionAsync<
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountPayer extends string,
  TAccountOwner extends string,
  TAccountProtocolConfigState extends string,
  TAccountSystemProgram extends string,
  TAccountProtocolOwnerState extends string,
  TAccountMsolTokenVault extends string,
  TAccountMsolMint extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: CreateProtocolConfigAsyncInput<
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountOwner,
    TAccountProtocolConfigState,
    TAccountSystemProgram,
    TAccountProtocolOwnerState,
    TAccountMsolTokenVault,
    TAccountMsolMint
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateProtocolConfigInstruction<
    TProgramAddress,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountOwner,
    TAccountProtocolConfigState,
    TAccountSystemProgram,
    TAccountProtocolOwnerState,
    TAccountMsolTokenVault,
    TAccountMsolMint
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    protocolConfigState: {
      value: input.protocolConfigState ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    protocolOwnerState: {
      value: input.protocolOwnerState ?? null,
      isWritable: false,
    },
    msolTokenVault: { value: input.msolTokenVault ?? null, isWritable: true },
    msolMint: { value: input.msolMint ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>
  }
  if (!accounts.protocolConfigState.value) {
    accounts.protocolConfigState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 99, 111, 110, 102, 105, 103, 95, 115, 116,
            97, 116, 101,
          ])
        ),
        getU16Encoder().encode(expectSome(args.version)),
      ],
    })
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.protocolOwnerState.value) {
    accounts.protocolOwnerState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 111, 119, 110, 101, 114, 95, 115, 116, 97,
            116, 101,
          ])
        ),
      ],
    })
  }
  if (!accounts.msolMint.value) {
    accounts.msolMint.value =
      'mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So' as Address<'mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So'>
  }
  if (!accounts.msolTokenVault.value) {
    accounts.msolTokenVault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.protocolConfigState.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.msolMint.value)),
      ],
    })
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.protocolConfigState),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.protocolOwnerState),
      getAccountMeta(accounts.msolTokenVault),
      getAccountMeta(accounts.msolMint),
    ],
    programAddress,
    data: getCreateProtocolConfigInstructionDataEncoder().encode(
      args as CreateProtocolConfigInstructionDataArgs
    ),
  } as CreateProtocolConfigInstruction<
    TProgramAddress,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountOwner,
    TAccountProtocolConfigState,
    TAccountSystemProgram,
    TAccountProtocolOwnerState,
    TAccountMsolTokenVault,
    TAccountMsolMint
  >

  return instruction
}

export type CreateProtocolConfigInput<
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountPayer extends string = string,
  TAccountOwner extends string = string,
  TAccountProtocolConfigState extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountProtocolOwnerState extends string = string,
  TAccountMsolTokenVault extends string = string,
  TAccountMsolMint extends string = string,
> = {
  tokenProgram?: Address<TAccountTokenProgram>
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>
  payer: TransactionSigner<TAccountPayer>
  owner: TransactionSigner<TAccountOwner>
  protocolConfigState: Address<TAccountProtocolConfigState>
  systemProgram?: Address<TAccountSystemProgram>
  protocolOwnerState: Address<TAccountProtocolOwnerState>
  msolTokenVault: Address<TAccountMsolTokenVault>
  /** CHECK */
  msolMint?: Address<TAccountMsolMint>
  version: CreateProtocolConfigInstructionDataArgs['version']
  params: CreateProtocolConfigInstructionDataArgs['params']
}

export function getCreateProtocolConfigInstruction<
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountPayer extends string,
  TAccountOwner extends string,
  TAccountProtocolConfigState extends string,
  TAccountSystemProgram extends string,
  TAccountProtocolOwnerState extends string,
  TAccountMsolTokenVault extends string,
  TAccountMsolMint extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: CreateProtocolConfigInput<
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountOwner,
    TAccountProtocolConfigState,
    TAccountSystemProgram,
    TAccountProtocolOwnerState,
    TAccountMsolTokenVault,
    TAccountMsolMint
  >,
  config?: { programAddress?: TProgramAddress }
): CreateProtocolConfigInstruction<
  TProgramAddress,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountPayer,
  TAccountOwner,
  TAccountProtocolConfigState,
  TAccountSystemProgram,
  TAccountProtocolOwnerState,
  TAccountMsolTokenVault,
  TAccountMsolMint
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    protocolConfigState: {
      value: input.protocolConfigState ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    protocolOwnerState: {
      value: input.protocolOwnerState ?? null,
      isWritable: false,
    },
    msolTokenVault: { value: input.msolTokenVault ?? null, isWritable: true },
    msolMint: { value: input.msolMint ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.msolMint.value) {
    accounts.msolMint.value =
      'mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So' as Address<'mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.protocolConfigState),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.protocolOwnerState),
      getAccountMeta(accounts.msolTokenVault),
      getAccountMeta(accounts.msolMint),
    ],
    programAddress,
    data: getCreateProtocolConfigInstructionDataEncoder().encode(
      args as CreateProtocolConfigInstructionDataArgs
    ),
  } as CreateProtocolConfigInstruction<
    TProgramAddress,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountOwner,
    TAccountProtocolConfigState,
    TAccountSystemProgram,
    TAccountProtocolOwnerState,
    TAccountMsolTokenVault,
    TAccountMsolMint
  >

  return instruction
}

export type ParsedCreateProtocolConfigInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    tokenProgram: TAccountMetas[0]
    associatedTokenProgram: TAccountMetas[1]
    payer: TAccountMetas[2]
    owner: TAccountMetas[3]
    protocolConfigState: TAccountMetas[4]
    systemProgram: TAccountMetas[5]
    protocolOwnerState: TAccountMetas[6]
    msolTokenVault: TAccountMetas[7]
    /** CHECK */
    msolMint: TAccountMetas[8]
  }
  data: CreateProtocolConfigInstructionData
}

export function parseCreateProtocolConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateProtocolConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      payer: getNextAccount(),
      owner: getNextAccount(),
      protocolConfigState: getNextAccount(),
      systemProgram: getNextAccount(),
      protocolOwnerState: getNextAccount(),
      msolTokenVault: getNextAccount(),
      msolMint: getNextAccount(),
    },
    data: getCreateProtocolConfigInstructionDataDecoder().decode(instruction.data),
  }
}
