/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit'
import { HEAVEN_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'
import {
  getProtocolConfigParamsDecoder,
  getProtocolConfigParamsEncoder,
  type ProtocolConfigParams,
  type ProtocolConfigParamsArgs,
} from '../types'

export const UPDATE_PROTOCOL_CONFIG_DISCRIMINATOR = new Uint8Array([
  197, 97, 123, 54, 221, 168, 11, 135,
])

export function getUpdateProtocolConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(UPDATE_PROTOCOL_CONFIG_DISCRIMINATOR)
}

export type UpdateProtocolConfigInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountProtocolConfigState extends string | AccountMeta<string> = string,
  TAccountProtocolOwnerState extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> & AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountProtocolConfigState extends string
        ? WritableAccount<TAccountProtocolConfigState>
        : TAccountProtocolConfigState,
      TAccountProtocolOwnerState extends string
        ? ReadonlyAccount<TAccountProtocolOwnerState>
        : TAccountProtocolOwnerState,
      ...TRemainingAccounts,
    ]
  >

export type UpdateProtocolConfigInstructionData = {
  discriminator: ReadonlyUint8Array
  version: number
  params: ProtocolConfigParams
}

export type UpdateProtocolConfigInstructionDataArgs = {
  version: number
  params: ProtocolConfigParamsArgs
}

export function getUpdateProtocolConfigInstructionDataEncoder(): FixedSizeEncoder<UpdateProtocolConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['version', getU16Encoder()],
      ['params', getProtocolConfigParamsEncoder()],
    ]),
    value => ({
      ...value,
      discriminator: UPDATE_PROTOCOL_CONFIG_DISCRIMINATOR,
    })
  )
}

export function getUpdateProtocolConfigInstructionDataDecoder(): FixedSizeDecoder<UpdateProtocolConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['version', getU16Decoder()],
    ['params', getProtocolConfigParamsDecoder()],
  ])
}

export function getUpdateProtocolConfigInstructionDataCodec(): FixedSizeCodec<
  UpdateProtocolConfigInstructionDataArgs,
  UpdateProtocolConfigInstructionData
> {
  return combineCodec(
    getUpdateProtocolConfigInstructionDataEncoder(),
    getUpdateProtocolConfigInstructionDataDecoder()
  )
}

export type UpdateProtocolConfigAsyncInput<
  TAccountOwner extends string = string,
  TAccountProtocolConfigState extends string = string,
  TAccountProtocolOwnerState extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>
  protocolConfigState: Address<TAccountProtocolConfigState>
  protocolOwnerState?: Address<TAccountProtocolOwnerState>
  version: UpdateProtocolConfigInstructionDataArgs['version']
  params: UpdateProtocolConfigInstructionDataArgs['params']
}

export async function getUpdateProtocolConfigInstructionAsync<
  TAccountOwner extends string,
  TAccountProtocolConfigState extends string,
  TAccountProtocolOwnerState extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: UpdateProtocolConfigAsyncInput<
    TAccountOwner,
    TAccountProtocolConfigState,
    TAccountProtocolOwnerState
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateProtocolConfigInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountProtocolConfigState,
    TAccountProtocolOwnerState
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    protocolConfigState: {
      value: input.protocolConfigState ?? null,
      isWritable: true,
    },
    protocolOwnerState: {
      value: input.protocolOwnerState ?? null,
      isWritable: false,
    },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.protocolOwnerState.value) {
    accounts.protocolOwnerState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 111, 119, 110, 101, 114, 95, 115, 116, 97,
            116, 101,
          ])
        ),
      ],
    })
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.protocolConfigState),
      getAccountMeta(accounts.protocolOwnerState),
    ],
    programAddress,
    data: getUpdateProtocolConfigInstructionDataEncoder().encode(
      args as UpdateProtocolConfigInstructionDataArgs
    ),
  } as UpdateProtocolConfigInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountProtocolConfigState,
    TAccountProtocolOwnerState
  >

  return instruction
}

export type UpdateProtocolConfigInput<
  TAccountOwner extends string = string,
  TAccountProtocolConfigState extends string = string,
  TAccountProtocolOwnerState extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>
  protocolConfigState: Address<TAccountProtocolConfigState>
  protocolOwnerState: Address<TAccountProtocolOwnerState>
  version: UpdateProtocolConfigInstructionDataArgs['version']
  params: UpdateProtocolConfigInstructionDataArgs['params']
}

export function getUpdateProtocolConfigInstruction<
  TAccountOwner extends string,
  TAccountProtocolConfigState extends string,
  TAccountProtocolOwnerState extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: UpdateProtocolConfigInput<
    TAccountOwner,
    TAccountProtocolConfigState,
    TAccountProtocolOwnerState
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateProtocolConfigInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountProtocolConfigState,
  TAccountProtocolOwnerState
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    protocolConfigState: {
      value: input.protocolConfigState ?? null,
      isWritable: true,
    },
    protocolOwnerState: {
      value: input.protocolOwnerState ?? null,
      isWritable: false,
    },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.protocolConfigState),
      getAccountMeta(accounts.protocolOwnerState),
    ],
    programAddress,
    data: getUpdateProtocolConfigInstructionDataEncoder().encode(
      args as UpdateProtocolConfigInstructionDataArgs
    ),
  } as UpdateProtocolConfigInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountProtocolConfigState,
    TAccountProtocolOwnerState
  >

  return instruction
}

export type ParsedUpdateProtocolConfigInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    owner: TAccountMetas[0]
    protocolConfigState: TAccountMetas[1]
    protocolOwnerState: TAccountMetas[2]
  }
  data: UpdateProtocolConfigInstructionData
}

export function parseUpdateProtocolConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateProtocolConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      protocolConfigState: getNextAccount(),
      protocolOwnerState: getNextAccount(),
    },
    data: getUpdateProtocolConfigInstructionDataDecoder().decode(instruction.data),
  }
}
