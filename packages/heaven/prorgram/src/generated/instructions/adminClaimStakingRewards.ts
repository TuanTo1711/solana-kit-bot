/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit'
import { HEAVEN_PROGRAM_ADDRESS } from '../programs'
import { expectAddress, expectSome, getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const ADMIN_CLAIM_STAKING_REWARDS_DISCRIMINATOR = new Uint8Array([
  24, 163, 220, 171, 225, 222, 166, 248,
])

export function getAdminClaimStakingRewardsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ADMIN_CLAIM_STAKING_REWARDS_DISCRIMINATOR)
}

export type AdminClaimStakingRewardsInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountProtocolConfigState extends string | AccountMeta<string> = string,
  TAccountProtocolConfigWsolVault extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountProtocolStakingAdminState extends string | AccountMeta<string> = string,
  TAccountWsolTokenVault extends string | AccountMeta<string> = string,
  TAccountWsolMint extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> & AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountProtocolConfigState extends string
        ? WritableAccount<TAccountProtocolConfigState>
        : TAccountProtocolConfigState,
      TAccountProtocolConfigWsolVault extends string
        ? WritableAccount<TAccountProtocolConfigWsolVault>
        : TAccountProtocolConfigWsolVault,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountProtocolStakingAdminState extends string
        ? ReadonlyAccount<TAccountProtocolStakingAdminState>
        : TAccountProtocolStakingAdminState,
      TAccountWsolTokenVault extends string
        ? WritableAccount<TAccountWsolTokenVault>
        : TAccountWsolTokenVault,
      TAccountWsolMint extends string ? ReadonlyAccount<TAccountWsolMint> : TAccountWsolMint,
      ...TRemainingAccounts,
    ]
  >

export type AdminClaimStakingRewardsInstructionData = {
  discriminator: ReadonlyUint8Array
  version: number
  amount: bigint
}

export type AdminClaimStakingRewardsInstructionDataArgs = {
  version: number
  amount: number | bigint
}

export function getAdminClaimStakingRewardsInstructionDataEncoder(): FixedSizeEncoder<AdminClaimStakingRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['version', getU16Encoder()],
      ['amount', getU64Encoder()],
    ]),
    value => ({
      ...value,
      discriminator: ADMIN_CLAIM_STAKING_REWARDS_DISCRIMINATOR,
    })
  )
}

export function getAdminClaimStakingRewardsInstructionDataDecoder(): FixedSizeDecoder<AdminClaimStakingRewardsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['version', getU16Decoder()],
    ['amount', getU64Decoder()],
  ])
}

export function getAdminClaimStakingRewardsInstructionDataCodec(): FixedSizeCodec<
  AdminClaimStakingRewardsInstructionDataArgs,
  AdminClaimStakingRewardsInstructionData
> {
  return combineCodec(
    getAdminClaimStakingRewardsInstructionDataEncoder(),
    getAdminClaimStakingRewardsInstructionDataDecoder()
  )
}

export type AdminClaimStakingRewardsAsyncInput<
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountPayer extends string = string,
  TAccountAdmin extends string = string,
  TAccountProtocolConfigState extends string = string,
  TAccountProtocolConfigWsolVault extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountProtocolStakingAdminState extends string = string,
  TAccountWsolTokenVault extends string = string,
  TAccountWsolMint extends string = string,
> = {
  tokenProgram?: Address<TAccountTokenProgram>
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>
  payer: TransactionSigner<TAccountPayer>
  admin: TransactionSigner<TAccountAdmin>
  protocolConfigState?: Address<TAccountProtocolConfigState>
  protocolConfigWsolVault?: Address<TAccountProtocolConfigWsolVault>
  systemProgram?: Address<TAccountSystemProgram>
  protocolStakingAdminState?: Address<TAccountProtocolStakingAdminState>
  wsolTokenVault?: Address<TAccountWsolTokenVault>
  wsolMint: Address<TAccountWsolMint>
  version: AdminClaimStakingRewardsInstructionDataArgs['version']
  amount: AdminClaimStakingRewardsInstructionDataArgs['amount']
}

export async function getAdminClaimStakingRewardsInstructionAsync<
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountPayer extends string,
  TAccountAdmin extends string,
  TAccountProtocolConfigState extends string,
  TAccountProtocolConfigWsolVault extends string,
  TAccountSystemProgram extends string,
  TAccountProtocolStakingAdminState extends string,
  TAccountWsolTokenVault extends string,
  TAccountWsolMint extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: AdminClaimStakingRewardsAsyncInput<
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountProtocolConfigWsolVault,
    TAccountSystemProgram,
    TAccountProtocolStakingAdminState,
    TAccountWsolTokenVault,
    TAccountWsolMint
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  AdminClaimStakingRewardsInstruction<
    TProgramAddress,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountProtocolConfigWsolVault,
    TAccountSystemProgram,
    TAccountProtocolStakingAdminState,
    TAccountWsolTokenVault,
    TAccountWsolMint
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
    protocolConfigState: {
      value: input.protocolConfigState ?? null,
      isWritable: true,
    },
    protocolConfigWsolVault: {
      value: input.protocolConfigWsolVault ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    protocolStakingAdminState: {
      value: input.protocolStakingAdminState ?? null,
      isWritable: false,
    },
    wsolTokenVault: { value: input.wsolTokenVault ?? null, isWritable: true },
    wsolMint: { value: input.wsolMint ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>
  }
  if (!accounts.protocolConfigState.value) {
    accounts.protocolConfigState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 99, 111, 110, 102, 105, 103, 95, 115, 116,
            97, 116, 101,
          ])
        ),
        getU16Encoder().encode(expectSome(args.version)),
      ],
    })
  }
  if (!accounts.protocolConfigWsolVault.value) {
    accounts.protocolConfigWsolVault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.protocolConfigState.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235, 121, 172, 28, 180,
            133, 237, 95, 91, 55, 145, 58, 140, 245, 133, 126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.wsolMint.value)),
      ],
    })
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.protocolStakingAdminState.value) {
    accounts.protocolStakingAdminState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 115, 116, 97, 107, 105, 110, 103, 95, 97,
            100, 109, 105, 110, 95, 115, 116, 97, 116, 101,
          ])
        ),
      ],
    })
  }
  if (!accounts.wsolTokenVault.value) {
    accounts.wsolTokenVault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.payer.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.wsolMint.value)),
      ],
    })
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.protocolConfigState),
      getAccountMeta(accounts.protocolConfigWsolVault),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.protocolStakingAdminState),
      getAccountMeta(accounts.wsolTokenVault),
      getAccountMeta(accounts.wsolMint),
    ],
    programAddress,
    data: getAdminClaimStakingRewardsInstructionDataEncoder().encode(
      args as AdminClaimStakingRewardsInstructionDataArgs
    ),
  } as AdminClaimStakingRewardsInstruction<
    TProgramAddress,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountProtocolConfigWsolVault,
    TAccountSystemProgram,
    TAccountProtocolStakingAdminState,
    TAccountWsolTokenVault,
    TAccountWsolMint
  >

  return instruction
}

export type AdminClaimStakingRewardsInput<
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountPayer extends string = string,
  TAccountAdmin extends string = string,
  TAccountProtocolConfigState extends string = string,
  TAccountProtocolConfigWsolVault extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountProtocolStakingAdminState extends string = string,
  TAccountWsolTokenVault extends string = string,
  TAccountWsolMint extends string = string,
> = {
  tokenProgram?: Address<TAccountTokenProgram>
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>
  payer: TransactionSigner<TAccountPayer>
  admin: TransactionSigner<TAccountAdmin>
  protocolConfigState: Address<TAccountProtocolConfigState>
  protocolConfigWsolVault: Address<TAccountProtocolConfigWsolVault>
  systemProgram?: Address<TAccountSystemProgram>
  protocolStakingAdminState: Address<TAccountProtocolStakingAdminState>
  wsolTokenVault: Address<TAccountWsolTokenVault>
  wsolMint: Address<TAccountWsolMint>
  version: AdminClaimStakingRewardsInstructionDataArgs['version']
  amount: AdminClaimStakingRewardsInstructionDataArgs['amount']
}

export function getAdminClaimStakingRewardsInstruction<
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountPayer extends string,
  TAccountAdmin extends string,
  TAccountProtocolConfigState extends string,
  TAccountProtocolConfigWsolVault extends string,
  TAccountSystemProgram extends string,
  TAccountProtocolStakingAdminState extends string,
  TAccountWsolTokenVault extends string,
  TAccountWsolMint extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: AdminClaimStakingRewardsInput<
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountProtocolConfigWsolVault,
    TAccountSystemProgram,
    TAccountProtocolStakingAdminState,
    TAccountWsolTokenVault,
    TAccountWsolMint
  >,
  config?: { programAddress?: TProgramAddress }
): AdminClaimStakingRewardsInstruction<
  TProgramAddress,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountPayer,
  TAccountAdmin,
  TAccountProtocolConfigState,
  TAccountProtocolConfigWsolVault,
  TAccountSystemProgram,
  TAccountProtocolStakingAdminState,
  TAccountWsolTokenVault,
  TAccountWsolMint
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
    protocolConfigState: {
      value: input.protocolConfigState ?? null,
      isWritable: true,
    },
    protocolConfigWsolVault: {
      value: input.protocolConfigWsolVault ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    protocolStakingAdminState: {
      value: input.protocolStakingAdminState ?? null,
      isWritable: false,
    },
    wsolTokenVault: { value: input.wsolTokenVault ?? null, isWritable: true },
    wsolMint: { value: input.wsolMint ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.protocolConfigState),
      getAccountMeta(accounts.protocolConfigWsolVault),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.protocolStakingAdminState),
      getAccountMeta(accounts.wsolTokenVault),
      getAccountMeta(accounts.wsolMint),
    ],
    programAddress,
    data: getAdminClaimStakingRewardsInstructionDataEncoder().encode(
      args as AdminClaimStakingRewardsInstructionDataArgs
    ),
  } as AdminClaimStakingRewardsInstruction<
    TProgramAddress,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountProtocolConfigWsolVault,
    TAccountSystemProgram,
    TAccountProtocolStakingAdminState,
    TAccountWsolTokenVault,
    TAccountWsolMint
  >

  return instruction
}

export type ParsedAdminClaimStakingRewardsInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    tokenProgram: TAccountMetas[0]
    associatedTokenProgram: TAccountMetas[1]
    payer: TAccountMetas[2]
    admin: TAccountMetas[3]
    protocolConfigState: TAccountMetas[4]
    protocolConfigWsolVault: TAccountMetas[5]
    systemProgram: TAccountMetas[6]
    protocolStakingAdminState: TAccountMetas[7]
    wsolTokenVault: TAccountMetas[8]
    wsolMint: TAccountMetas[9]
  }
  data: AdminClaimStakingRewardsInstructionData
}

export function parseAdminClaimStakingRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAdminClaimStakingRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      payer: getNextAccount(),
      admin: getNextAccount(),
      protocolConfigState: getNextAccount(),
      protocolConfigWsolVault: getNextAccount(),
      systemProgram: getNextAccount(),
      protocolStakingAdminState: getNextAccount(),
      wsolTokenVault: getNextAccount(),
      wsolMint: getNextAccount(),
    },
    data: getAdminClaimStakingRewardsInstructionDataDecoder().decode(instruction.data),
  }
}
