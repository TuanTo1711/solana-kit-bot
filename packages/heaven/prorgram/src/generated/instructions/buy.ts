/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit'
import { HEAVEN_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const BUY_DISCRIMINATOR = new Uint8Array([102, 6, 61, 18, 1, 218, 235, 234])

export function getBuyDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(BUY_DISCRIMINATOR)
}

export type BuyInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountTokenAProgram extends string | AccountMeta<string> = string,
  TAccountTokenBProgram extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountLiquidityPoolState extends string | AccountMeta<string> = string,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountTokenAMint extends string | AccountMeta<string> = string,
  TAccountTokenBMint extends string | AccountMeta<string> = string,
  TAccountUserTokenAVault extends string | AccountMeta<string> = string,
  TAccountUserTokenBVault extends string | AccountMeta<string> = string,
  TAccountTokenAVault extends string | AccountMeta<string> = string,
  TAccountTokenBVault extends string | AccountMeta<string> = string,
  TAccountProtocolConfig extends string | AccountMeta<string> = string,
  TAccountInstructionSysvarAccountInfo extends
    | string
    | AccountMeta<string> = 'Sysvar1nstructions1111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTokenAProgram extends string
        ? ReadonlyAccount<TAccountTokenAProgram>
        : TAccountTokenAProgram,
      TAccountTokenBProgram extends string
        ? ReadonlyAccount<TAccountTokenBProgram>
        : TAccountTokenBProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountLiquidityPoolState extends string
        ? WritableAccount<TAccountLiquidityPoolState>
        : TAccountLiquidityPoolState,
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountTokenAMint extends string ? ReadonlyAccount<TAccountTokenAMint> : TAccountTokenAMint,
      TAccountTokenBMint extends string ? ReadonlyAccount<TAccountTokenBMint> : TAccountTokenBMint,
      TAccountUserTokenAVault extends string
        ? WritableAccount<TAccountUserTokenAVault>
        : TAccountUserTokenAVault,
      TAccountUserTokenBVault extends string
        ? WritableAccount<TAccountUserTokenBVault>
        : TAccountUserTokenBVault,
      TAccountTokenAVault extends string
        ? WritableAccount<TAccountTokenAVault>
        : TAccountTokenAVault,
      TAccountTokenBVault extends string
        ? WritableAccount<TAccountTokenBVault>
        : TAccountTokenBVault,
      TAccountProtocolConfig extends string
        ? WritableAccount<TAccountProtocolConfig>
        : TAccountProtocolConfig,
      TAccountInstructionSysvarAccountInfo extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccountInfo>
        : TAccountInstructionSysvarAccountInfo,
      ...TRemainingAccounts,
    ]
  >

export type BuyInstructionData = {
  discriminator: ReadonlyUint8Array
  maxSolSpend: bigint
  minimumAmountOut: bigint
  encodedUserDefinedEventData: string
}

export type BuyInstructionDataArgs = {
  maxSolSpend: number | bigint
  minimumAmountOut: number | bigint
  encodedUserDefinedEventData: string
}

export function getBuyInstructionDataEncoder(): Encoder<BuyInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['maxSolSpend', getU64Encoder()],
      ['minimumAmountOut', getU64Encoder()],
      ['encodedUserDefinedEventData', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    value => ({ ...value, discriminator: BUY_DISCRIMINATOR })
  )
}

export function getBuyInstructionDataDecoder(): Decoder<BuyInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['maxSolSpend', getU64Decoder()],
    ['minimumAmountOut', getU64Decoder()],
    ['encodedUserDefinedEventData', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ])
}

export function getBuyInstructionDataCodec(): Codec<BuyInstructionDataArgs, BuyInstructionData> {
  return combineCodec(getBuyInstructionDataEncoder(), getBuyInstructionDataDecoder())
}

export type BuyInput<
  TAccountTokenAProgram extends string = string,
  TAccountTokenBProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountLiquidityPoolState extends string = string,
  TAccountUser extends string = string,
  TAccountTokenAMint extends string = string,
  TAccountTokenBMint extends string = string,
  TAccountUserTokenAVault extends string = string,
  TAccountUserTokenBVault extends string = string,
  TAccountTokenAVault extends string = string,
  TAccountTokenBVault extends string = string,
  TAccountProtocolConfig extends string = string,
  TAccountInstructionSysvarAccountInfo extends string = string,
> = {
  tokenAProgram: Address<TAccountTokenAProgram>
  tokenBProgram: Address<TAccountTokenBProgram>
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>
  systemProgram?: Address<TAccountSystemProgram>
  liquidityPoolState: Address<TAccountLiquidityPoolState>
  /** CHECK */
  user: TransactionSigner<TAccountUser>
  /** CHECK */
  tokenAMint: Address<TAccountTokenAMint>
  /** CHECK */
  tokenBMint: Address<TAccountTokenBMint>
  userTokenAVault: Address<TAccountUserTokenAVault>
  userTokenBVault: Address<TAccountUserTokenBVault>
  tokenAVault: Address<TAccountTokenAVault>
  tokenBVault: Address<TAccountTokenBVault>
  protocolConfig: Address<TAccountProtocolConfig>
  /** CHECK */
  instructionSysvarAccountInfo?: Address<TAccountInstructionSysvarAccountInfo>
  maxSolSpend: BuyInstructionDataArgs['maxSolSpend']
  minimumAmountOut: BuyInstructionDataArgs['minimumAmountOut']
  encodedUserDefinedEventData: BuyInstructionDataArgs['encodedUserDefinedEventData']
}

export function getBuyInstruction<
  TAccountTokenAProgram extends string,
  TAccountTokenBProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountLiquidityPoolState extends string,
  TAccountUser extends string,
  TAccountTokenAMint extends string,
  TAccountTokenBMint extends string,
  TAccountUserTokenAVault extends string,
  TAccountUserTokenBVault extends string,
  TAccountTokenAVault extends string,
  TAccountTokenBVault extends string,
  TAccountProtocolConfig extends string,
  TAccountInstructionSysvarAccountInfo extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: BuyInput<
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountLiquidityPoolState,
    TAccountUser,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountUserTokenAVault,
    TAccountUserTokenBVault,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountProtocolConfig,
    TAccountInstructionSysvarAccountInfo
  >,
  config?: { programAddress?: TProgramAddress }
): BuyInstruction<
  TProgramAddress,
  TAccountTokenAProgram,
  TAccountTokenBProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountLiquidityPoolState,
  TAccountUser,
  TAccountTokenAMint,
  TAccountTokenBMint,
  TAccountUserTokenAVault,
  TAccountUserTokenBVault,
  TAccountTokenAVault,
  TAccountTokenBVault,
  TAccountProtocolConfig,
  TAccountInstructionSysvarAccountInfo
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    tokenAProgram: { value: input.tokenAProgram ?? null, isWritable: false },
    tokenBProgram: { value: input.tokenBProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    liquidityPoolState: {
      value: input.liquidityPoolState ?? null,
      isWritable: true,
    },
    user: { value: input.user ?? null, isWritable: true },
    tokenAMint: { value: input.tokenAMint ?? null, isWritable: false },
    tokenBMint: { value: input.tokenBMint ?? null, isWritable: false },
    userTokenAVault: { value: input.userTokenAVault ?? null, isWritable: true },
    userTokenBVault: { value: input.userTokenBVault ?? null, isWritable: true },
    tokenAVault: { value: input.tokenAVault ?? null, isWritable: true },
    tokenBVault: { value: input.tokenBVault ?? null, isWritable: true },
    protocolConfig: { value: input.protocolConfig ?? null, isWritable: true },
    instructionSysvarAccountInfo: {
      value: input.instructionSysvarAccountInfo ?? null,
      isWritable: false,
    },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.instructionSysvarAccountInfo.value) {
    accounts.instructionSysvarAccountInfo.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tokenAProgram),
      getAccountMeta(accounts.tokenBProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.liquidityPoolState),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.tokenAMint),
      getAccountMeta(accounts.tokenBMint),
      getAccountMeta(accounts.userTokenAVault),
      getAccountMeta(accounts.userTokenBVault),
      getAccountMeta(accounts.tokenAVault),
      getAccountMeta(accounts.tokenBVault),
      getAccountMeta(accounts.protocolConfig),
      getAccountMeta(accounts.instructionSysvarAccountInfo),
    ],
    programAddress,
    data: getBuyInstructionDataEncoder().encode(args as BuyInstructionDataArgs),
  } as BuyInstruction<
    TProgramAddress,
    TAccountTokenAProgram,
    TAccountTokenBProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountLiquidityPoolState,
    TAccountUser,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountUserTokenAVault,
    TAccountUserTokenBVault,
    TAccountTokenAVault,
    TAccountTokenBVault,
    TAccountProtocolConfig,
    TAccountInstructionSysvarAccountInfo
  >

  return instruction
}

export type ParsedBuyInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    tokenAProgram: TAccountMetas[0]
    tokenBProgram: TAccountMetas[1]
    associatedTokenProgram: TAccountMetas[2]
    systemProgram: TAccountMetas[3]
    liquidityPoolState: TAccountMetas[4]
    /** CHECK */
    user: TAccountMetas[5]
    /** CHECK */
    tokenAMint: TAccountMetas[6]
    /** CHECK */
    tokenBMint: TAccountMetas[7]
    userTokenAVault: TAccountMetas[8]
    userTokenBVault: TAccountMetas[9]
    tokenAVault: TAccountMetas[10]
    tokenBVault: TAccountMetas[11]
    protocolConfig: TAccountMetas[12]
    /** CHECK */
    instructionSysvarAccountInfo: TAccountMetas[13]
  }
  data: BuyInstructionData
}

export function parseBuyInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedBuyInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tokenAProgram: getNextAccount(),
      tokenBProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      liquidityPoolState: getNextAccount(),
      user: getNextAccount(),
      tokenAMint: getNextAccount(),
      tokenBMint: getNextAccount(),
      userTokenAVault: getNextAccount(),
      userTokenBVault: getNextAccount(),
      tokenAVault: getNextAccount(),
      tokenBVault: getNextAccount(),
      protocolConfig: getNextAccount(),
      instructionSysvarAccountInfo: getNextAccount(),
    },
    data: getBuyInstructionDataDecoder().decode(instruction.data),
  }
}
