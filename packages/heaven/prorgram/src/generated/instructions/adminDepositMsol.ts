/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit'
import { HEAVEN_PROGRAM_ADDRESS } from '../programs'
import { expectSome, getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const ADMIN_DEPOSIT_MSOL_DISCRIMINATOR = new Uint8Array([
  206, 189, 208, 166, 19, 81, 202, 48,
])

export function getAdminDepositMsolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ADMIN_DEPOSIT_MSOL_DISCRIMINATOR)
}

export type AdminDepositMsolInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountProtocolConfigState extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountProtocolStakingAdminState extends string | AccountMeta<string> = string,
  TAccountAddressLookupProgram extends
    | string
    | AccountMeta<string> = 'AddressLookupTab1e1111111111111111111111111',
  TAccountInstructionSysvarAccountInfo extends string | AccountMeta<string> = string,
  TAccountTempSolHolder extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> & AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountProtocolConfigState extends string
        ? ReadonlyAccount<TAccountProtocolConfigState>
        : TAccountProtocolConfigState,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountProtocolStakingAdminState extends string
        ? ReadonlyAccount<TAccountProtocolStakingAdminState>
        : TAccountProtocolStakingAdminState,
      TAccountAddressLookupProgram extends string
        ? ReadonlyAccount<TAccountAddressLookupProgram>
        : TAccountAddressLookupProgram,
      TAccountInstructionSysvarAccountInfo extends string
        ? ReadonlyAccount<TAccountInstructionSysvarAccountInfo>
        : TAccountInstructionSysvarAccountInfo,
      TAccountTempSolHolder extends string
        ? WritableAccount<TAccountTempSolHolder>
        : TAccountTempSolHolder,
      ...TRemainingAccounts,
    ]
  >

export type AdminDepositMsolInstructionData = {
  discriminator: ReadonlyUint8Array
  version: number
  amount: bigint
}

export type AdminDepositMsolInstructionDataArgs = {
  version: number
  amount: number | bigint
}

export function getAdminDepositMsolInstructionDataEncoder(): FixedSizeEncoder<AdminDepositMsolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['version', getU16Encoder()],
      ['amount', getU64Encoder()],
    ]),
    value => ({ ...value, discriminator: ADMIN_DEPOSIT_MSOL_DISCRIMINATOR })
  )
}

export function getAdminDepositMsolInstructionDataDecoder(): FixedSizeDecoder<AdminDepositMsolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['version', getU16Decoder()],
    ['amount', getU64Decoder()],
  ])
}

export function getAdminDepositMsolInstructionDataCodec(): FixedSizeCodec<
  AdminDepositMsolInstructionDataArgs,
  AdminDepositMsolInstructionData
> {
  return combineCodec(
    getAdminDepositMsolInstructionDataEncoder(),
    getAdminDepositMsolInstructionDataDecoder()
  )
}

export type AdminDepositMsolAsyncInput<
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountPayer extends string = string,
  TAccountAdmin extends string = string,
  TAccountProtocolConfigState extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountProtocolStakingAdminState extends string = string,
  TAccountAddressLookupProgram extends string = string,
  TAccountInstructionSysvarAccountInfo extends string = string,
  TAccountTempSolHolder extends string = string,
> = {
  tokenProgram?: Address<TAccountTokenProgram>
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>
  payer: TransactionSigner<TAccountPayer>
  admin: TransactionSigner<TAccountAdmin>
  protocolConfigState?: Address<TAccountProtocolConfigState>
  systemProgram?: Address<TAccountSystemProgram>
  protocolStakingAdminState?: Address<TAccountProtocolStakingAdminState>
  /** CHECK */
  addressLookupProgram?: Address<TAccountAddressLookupProgram>
  instructionSysvarAccountInfo: Address<TAccountInstructionSysvarAccountInfo>
  /** CHECK */
  tempSolHolder?: Address<TAccountTempSolHolder>
  version: AdminDepositMsolInstructionDataArgs['version']
  amount: AdminDepositMsolInstructionDataArgs['amount']
}

export async function getAdminDepositMsolInstructionAsync<
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountPayer extends string,
  TAccountAdmin extends string,
  TAccountProtocolConfigState extends string,
  TAccountSystemProgram extends string,
  TAccountProtocolStakingAdminState extends string,
  TAccountAddressLookupProgram extends string,
  TAccountInstructionSysvarAccountInfo extends string,
  TAccountTempSolHolder extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: AdminDepositMsolAsyncInput<
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountSystemProgram,
    TAccountProtocolStakingAdminState,
    TAccountAddressLookupProgram,
    TAccountInstructionSysvarAccountInfo,
    TAccountTempSolHolder
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  AdminDepositMsolInstruction<
    TProgramAddress,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountSystemProgram,
    TAccountProtocolStakingAdminState,
    TAccountAddressLookupProgram,
    TAccountInstructionSysvarAccountInfo,
    TAccountTempSolHolder
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
    protocolConfigState: {
      value: input.protocolConfigState ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    protocolStakingAdminState: {
      value: input.protocolStakingAdminState ?? null,
      isWritable: false,
    },
    addressLookupProgram: {
      value: input.addressLookupProgram ?? null,
      isWritable: false,
    },
    instructionSysvarAccountInfo: {
      value: input.instructionSysvarAccountInfo ?? null,
      isWritable: false,
    },
    tempSolHolder: { value: input.tempSolHolder ?? null, isWritable: true },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>
  }
  if (!accounts.protocolConfigState.value) {
    accounts.protocolConfigState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 99, 111, 110, 102, 105, 103, 95, 115, 116,
            97, 116, 101,
          ])
        ),
        getU16Encoder().encode(expectSome(args.version)),
      ],
    })
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.protocolStakingAdminState.value) {
    accounts.protocolStakingAdminState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 115, 116, 97, 107, 105, 110, 103, 95, 97,
            100, 109, 105, 110, 95, 115, 116, 97, 116, 101,
          ])
        ),
      ],
    })
  }
  if (!accounts.addressLookupProgram.value) {
    accounts.addressLookupProgram.value =
      'AddressLookupTab1e1111111111111111111111111' as Address<'AddressLookupTab1e1111111111111111111111111'>
  }
  if (!accounts.tempSolHolder.value) {
    accounts.tempSolHolder.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 101, 109, 112, 95, 115, 111, 108, 95, 104, 111, 108, 100, 101, 114])
        ),
        getU16Encoder().encode(expectSome(args.version)),
      ],
    })
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.protocolConfigState),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.protocolStakingAdminState),
      getAccountMeta(accounts.addressLookupProgram),
      getAccountMeta(accounts.instructionSysvarAccountInfo),
      getAccountMeta(accounts.tempSolHolder),
    ],
    programAddress,
    data: getAdminDepositMsolInstructionDataEncoder().encode(
      args as AdminDepositMsolInstructionDataArgs
    ),
  } as AdminDepositMsolInstruction<
    TProgramAddress,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountSystemProgram,
    TAccountProtocolStakingAdminState,
    TAccountAddressLookupProgram,
    TAccountInstructionSysvarAccountInfo,
    TAccountTempSolHolder
  >

  return instruction
}

export type AdminDepositMsolInput<
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountPayer extends string = string,
  TAccountAdmin extends string = string,
  TAccountProtocolConfigState extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountProtocolStakingAdminState extends string = string,
  TAccountAddressLookupProgram extends string = string,
  TAccountInstructionSysvarAccountInfo extends string = string,
  TAccountTempSolHolder extends string = string,
> = {
  tokenProgram?: Address<TAccountTokenProgram>
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>
  payer: TransactionSigner<TAccountPayer>
  admin: TransactionSigner<TAccountAdmin>
  protocolConfigState: Address<TAccountProtocolConfigState>
  systemProgram?: Address<TAccountSystemProgram>
  protocolStakingAdminState: Address<TAccountProtocolStakingAdminState>
  /** CHECK */
  addressLookupProgram?: Address<TAccountAddressLookupProgram>
  instructionSysvarAccountInfo: Address<TAccountInstructionSysvarAccountInfo>
  /** CHECK */
  tempSolHolder: Address<TAccountTempSolHolder>
  version: AdminDepositMsolInstructionDataArgs['version']
  amount: AdminDepositMsolInstructionDataArgs['amount']
}

export function getAdminDepositMsolInstruction<
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountPayer extends string,
  TAccountAdmin extends string,
  TAccountProtocolConfigState extends string,
  TAccountSystemProgram extends string,
  TAccountProtocolStakingAdminState extends string,
  TAccountAddressLookupProgram extends string,
  TAccountInstructionSysvarAccountInfo extends string,
  TAccountTempSolHolder extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: AdminDepositMsolInput<
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountSystemProgram,
    TAccountProtocolStakingAdminState,
    TAccountAddressLookupProgram,
    TAccountInstructionSysvarAccountInfo,
    TAccountTempSolHolder
  >,
  config?: { programAddress?: TProgramAddress }
): AdminDepositMsolInstruction<
  TProgramAddress,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountPayer,
  TAccountAdmin,
  TAccountProtocolConfigState,
  TAccountSystemProgram,
  TAccountProtocolStakingAdminState,
  TAccountAddressLookupProgram,
  TAccountInstructionSysvarAccountInfo,
  TAccountTempSolHolder
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
    protocolConfigState: {
      value: input.protocolConfigState ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    protocolStakingAdminState: {
      value: input.protocolStakingAdminState ?? null,
      isWritable: false,
    },
    addressLookupProgram: {
      value: input.addressLookupProgram ?? null,
      isWritable: false,
    },
    instructionSysvarAccountInfo: {
      value: input.instructionSysvarAccountInfo ?? null,
      isWritable: false,
    },
    tempSolHolder: { value: input.tempSolHolder ?? null, isWritable: true },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.addressLookupProgram.value) {
    accounts.addressLookupProgram.value =
      'AddressLookupTab1e1111111111111111111111111' as Address<'AddressLookupTab1e1111111111111111111111111'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.protocolConfigState),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.protocolStakingAdminState),
      getAccountMeta(accounts.addressLookupProgram),
      getAccountMeta(accounts.instructionSysvarAccountInfo),
      getAccountMeta(accounts.tempSolHolder),
    ],
    programAddress,
    data: getAdminDepositMsolInstructionDataEncoder().encode(
      args as AdminDepositMsolInstructionDataArgs
    ),
  } as AdminDepositMsolInstruction<
    TProgramAddress,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountPayer,
    TAccountAdmin,
    TAccountProtocolConfigState,
    TAccountSystemProgram,
    TAccountProtocolStakingAdminState,
    TAccountAddressLookupProgram,
    TAccountInstructionSysvarAccountInfo,
    TAccountTempSolHolder
  >

  return instruction
}

export type ParsedAdminDepositMsolInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    tokenProgram: TAccountMetas[0]
    associatedTokenProgram: TAccountMetas[1]
    payer: TAccountMetas[2]
    admin: TAccountMetas[3]
    protocolConfigState: TAccountMetas[4]
    systemProgram: TAccountMetas[5]
    protocolStakingAdminState: TAccountMetas[6]
    /** CHECK */
    addressLookupProgram: TAccountMetas[7]
    instructionSysvarAccountInfo: TAccountMetas[8]
    /** CHECK */
    tempSolHolder: TAccountMetas[9]
  }
  data: AdminDepositMsolInstructionData
}

export function parseAdminDepositMsolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAdminDepositMsolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      payer: getNextAccount(),
      admin: getNextAccount(),
      protocolConfigState: getNextAccount(),
      systemProgram: getNextAccount(),
      protocolStakingAdminState: getNextAccount(),
      addressLookupProgram: getNextAccount(),
      instructionSysvarAccountInfo: getNextAccount(),
      tempSolHolder: getNextAccount(),
    },
    data: getAdminDepositMsolInstructionDataDecoder().decode(instruction.data),
  }
}
