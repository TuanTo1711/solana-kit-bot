/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit'
import { HEAVEN_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const CREATE_PROTOCOL_LOOKUP_TABLE_DISCRIMINATOR = new Uint8Array([
  249, 3, 99, 153, 168, 241, 243, 228,
])

export function getCreateProtocolLookupTableDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CREATE_PROTOCOL_LOOKUP_TABLE_DISCRIMINATOR)
}

export type CreateProtocolLookupTableInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountAddressLookupProgram extends
    | string
    | AccountMeta<string> = 'AddressLookupTab1e1111111111111111111111111',
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountLookupTable extends string | AccountMeta<string> = string,
  TAccountProtocolOwnerState extends string | AccountMeta<string> = string,
  TAccountCurrentOwner extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAddressLookupProgram extends string
        ? ReadonlyAccount<TAccountAddressLookupProgram>
        : TAccountAddressLookupProgram,
      TAccountAuthority extends string ? ReadonlyAccount<TAccountAuthority> : TAccountAuthority,
      TAccountLookupTable extends string
        ? WritableAccount<TAccountLookupTable>
        : TAccountLookupTable,
      TAccountProtocolOwnerState extends string
        ? ReadonlyAccount<TAccountProtocolOwnerState>
        : TAccountProtocolOwnerState,
      TAccountCurrentOwner extends string
        ? ReadonlySignerAccount<TAccountCurrentOwner> & AccountSignerMeta<TAccountCurrentOwner>
        : TAccountCurrentOwner,
      ...TRemainingAccounts,
    ]
  >

export type CreateProtocolLookupTableInstructionData = {
  discriminator: ReadonlyUint8Array
  version: bigint
}

export type CreateProtocolLookupTableInstructionDataArgs = {
  version: number | bigint
}

export function getCreateProtocolLookupTableInstructionDataEncoder(): FixedSizeEncoder<CreateProtocolLookupTableInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['version', getU64Encoder()],
    ]),
    value => ({
      ...value,
      discriminator: CREATE_PROTOCOL_LOOKUP_TABLE_DISCRIMINATOR,
    })
  )
}

export function getCreateProtocolLookupTableInstructionDataDecoder(): FixedSizeDecoder<CreateProtocolLookupTableInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['version', getU64Decoder()],
  ])
}

export function getCreateProtocolLookupTableInstructionDataCodec(): FixedSizeCodec<
  CreateProtocolLookupTableInstructionDataArgs,
  CreateProtocolLookupTableInstructionData
> {
  return combineCodec(
    getCreateProtocolLookupTableInstructionDataEncoder(),
    getCreateProtocolLookupTableInstructionDataDecoder()
  )
}

export type CreateProtocolLookupTableAsyncInput<
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAddressLookupProgram extends string = string,
  TAccountAuthority extends string = string,
  TAccountLookupTable extends string = string,
  TAccountProtocolOwnerState extends string = string,
  TAccountCurrentOwner extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>
  systemProgram?: Address<TAccountSystemProgram>
  /** CHECK */
  addressLookupProgram?: Address<TAccountAddressLookupProgram>
  authority?: Address<TAccountAuthority>
  lookupTable: Address<TAccountLookupTable>
  protocolOwnerState?: Address<TAccountProtocolOwnerState>
  currentOwner: TransactionSigner<TAccountCurrentOwner>
  version: CreateProtocolLookupTableInstructionDataArgs['version']
}

export async function getCreateProtocolLookupTableInstructionAsync<
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountAddressLookupProgram extends string,
  TAccountAuthority extends string,
  TAccountLookupTable extends string,
  TAccountProtocolOwnerState extends string,
  TAccountCurrentOwner extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: CreateProtocolLookupTableAsyncInput<
    TAccountPayer,
    TAccountSystemProgram,
    TAccountAddressLookupProgram,
    TAccountAuthority,
    TAccountLookupTable,
    TAccountProtocolOwnerState,
    TAccountCurrentOwner
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateProtocolLookupTableInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountAddressLookupProgram,
    TAccountAuthority,
    TAccountLookupTable,
    TAccountProtocolOwnerState,
    TAccountCurrentOwner
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    addressLookupProgram: {
      value: input.addressLookupProgram ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    lookupTable: { value: input.lookupTable ?? null, isWritable: true },
    protocolOwnerState: {
      value: input.protocolOwnerState ?? null,
      isWritable: false,
    },
    currentOwner: { value: input.currentOwner ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.addressLookupProgram.value) {
    accounts.addressLookupProgram.value =
      'AddressLookupTab1e1111111111111111111111111' as Address<'AddressLookupTab1e1111111111111111111111111'>
  }
  if (!accounts.authority.value) {
    accounts.authority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 117, 116, 104, 111, 114, 105, 116, 121])),
      ],
    })
  }
  if (!accounts.protocolOwnerState.value) {
    accounts.protocolOwnerState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 111, 119, 110, 101, 114, 95, 115, 116, 97,
            116, 101,
          ])
        ),
      ],
    })
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.addressLookupProgram),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.lookupTable),
      getAccountMeta(accounts.protocolOwnerState),
      getAccountMeta(accounts.currentOwner),
    ],
    programAddress,
    data: getCreateProtocolLookupTableInstructionDataEncoder().encode(
      args as CreateProtocolLookupTableInstructionDataArgs
    ),
  } as CreateProtocolLookupTableInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountAddressLookupProgram,
    TAccountAuthority,
    TAccountLookupTable,
    TAccountProtocolOwnerState,
    TAccountCurrentOwner
  >

  return instruction
}

export type CreateProtocolLookupTableInput<
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAddressLookupProgram extends string = string,
  TAccountAuthority extends string = string,
  TAccountLookupTable extends string = string,
  TAccountProtocolOwnerState extends string = string,
  TAccountCurrentOwner extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>
  systemProgram?: Address<TAccountSystemProgram>
  /** CHECK */
  addressLookupProgram?: Address<TAccountAddressLookupProgram>
  authority: Address<TAccountAuthority>
  lookupTable: Address<TAccountLookupTable>
  protocolOwnerState: Address<TAccountProtocolOwnerState>
  currentOwner: TransactionSigner<TAccountCurrentOwner>
  version: CreateProtocolLookupTableInstructionDataArgs['version']
}

export function getCreateProtocolLookupTableInstruction<
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountAddressLookupProgram extends string,
  TAccountAuthority extends string,
  TAccountLookupTable extends string,
  TAccountProtocolOwnerState extends string,
  TAccountCurrentOwner extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: CreateProtocolLookupTableInput<
    TAccountPayer,
    TAccountSystemProgram,
    TAccountAddressLookupProgram,
    TAccountAuthority,
    TAccountLookupTable,
    TAccountProtocolOwnerState,
    TAccountCurrentOwner
  >,
  config?: { programAddress?: TProgramAddress }
): CreateProtocolLookupTableInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountAddressLookupProgram,
  TAccountAuthority,
  TAccountLookupTable,
  TAccountProtocolOwnerState,
  TAccountCurrentOwner
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    addressLookupProgram: {
      value: input.addressLookupProgram ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    lookupTable: { value: input.lookupTable ?? null, isWritable: true },
    protocolOwnerState: {
      value: input.protocolOwnerState ?? null,
      isWritable: false,
    },
    currentOwner: { value: input.currentOwner ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.addressLookupProgram.value) {
    accounts.addressLookupProgram.value =
      'AddressLookupTab1e1111111111111111111111111' as Address<'AddressLookupTab1e1111111111111111111111111'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.addressLookupProgram),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.lookupTable),
      getAccountMeta(accounts.protocolOwnerState),
      getAccountMeta(accounts.currentOwner),
    ],
    programAddress,
    data: getCreateProtocolLookupTableInstructionDataEncoder().encode(
      args as CreateProtocolLookupTableInstructionDataArgs
    ),
  } as CreateProtocolLookupTableInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountAddressLookupProgram,
    TAccountAuthority,
    TAccountLookupTable,
    TAccountProtocolOwnerState,
    TAccountCurrentOwner
  >

  return instruction
}

export type ParsedCreateProtocolLookupTableInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    payer: TAccountMetas[0]
    systemProgram: TAccountMetas[1]
    /** CHECK */
    addressLookupProgram: TAccountMetas[2]
    authority: TAccountMetas[3]
    lookupTable: TAccountMetas[4]
    protocolOwnerState: TAccountMetas[5]
    currentOwner: TAccountMetas[6]
  }
  data: CreateProtocolLookupTableInstructionData
}

export function parseCreateProtocolLookupTableInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateProtocolLookupTableInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      addressLookupProgram: getNextAccount(),
      authority: getNextAccount(),
      lookupTable: getNextAccount(),
      protocolOwnerState: getNextAccount(),
      currentOwner: getNextAccount(),
    },
    data: getCreateProtocolLookupTableInstructionDataDecoder().decode(instruction.data),
  }
}
