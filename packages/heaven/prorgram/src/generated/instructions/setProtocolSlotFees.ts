/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit'
import { HEAVEN_PROGRAM_ADDRESS } from '../programs'
import { expectSome, getAccountMetaFactory, type ResolvedAccount } from '../shared'
import {
  getFeeTypeDecoder,
  getFeeTypeEncoder,
  getSlotFeeBracketDecoder,
  getSlotFeeBracketEncoder,
  type FeeType,
  type FeeTypeArgs,
  type SlotFeeBracket,
  type SlotFeeBracketArgs,
} from '../types'

export const SET_PROTOCOL_SLOT_FEES_DISCRIMINATOR = new Uint8Array([
  181, 82, 19, 15, 126, 205, 152, 242,
])

export function getSetProtocolSlotFeesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SET_PROTOCOL_SLOT_FEES_DISCRIMINATOR)
}

export type SetProtocolSlotFeesInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountProtocolConfigState extends string | AccountMeta<string> = string,
  TAccountProtocolOwnerState extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> & AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountProtocolConfigState extends string
        ? WritableAccount<TAccountProtocolConfigState>
        : TAccountProtocolConfigState,
      TAccountProtocolOwnerState extends string
        ? ReadonlyAccount<TAccountProtocolOwnerState>
        : TAccountProtocolOwnerState,
      ...TRemainingAccounts,
    ]
  >

export type SetProtocolSlotFeesInstructionData = {
  discriminator: ReadonlyUint8Array
  version: number
  feeType: FeeType
  brackets: Array<SlotFeeBracket>
  maxSlotOffset: number
  maxFeeBps: number
  count: number
  enabled: number
}

export type SetProtocolSlotFeesInstructionDataArgs = {
  version: number
  feeType: FeeTypeArgs
  brackets: Array<SlotFeeBracketArgs>
  maxSlotOffset: number
  maxFeeBps: number
  count: number
  enabled: number
}

export function getSetProtocolSlotFeesInstructionDataEncoder(): Encoder<SetProtocolSlotFeesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['version', getU16Encoder()],
      ['feeType', getFeeTypeEncoder()],
      ['brackets', getArrayEncoder(getSlotFeeBracketEncoder())],
      ['maxSlotOffset', getU16Encoder()],
      ['maxFeeBps', getU16Encoder()],
      ['count', getU8Encoder()],
      ['enabled', getU8Encoder()],
    ]),
    value => ({
      ...value,
      discriminator: SET_PROTOCOL_SLOT_FEES_DISCRIMINATOR,
    })
  )
}

export function getSetProtocolSlotFeesInstructionDataDecoder(): Decoder<SetProtocolSlotFeesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['version', getU16Decoder()],
    ['feeType', getFeeTypeDecoder()],
    ['brackets', getArrayDecoder(getSlotFeeBracketDecoder())],
    ['maxSlotOffset', getU16Decoder()],
    ['maxFeeBps', getU16Decoder()],
    ['count', getU8Decoder()],
    ['enabled', getU8Decoder()],
  ])
}

export function getSetProtocolSlotFeesInstructionDataCodec(): Codec<
  SetProtocolSlotFeesInstructionDataArgs,
  SetProtocolSlotFeesInstructionData
> {
  return combineCodec(
    getSetProtocolSlotFeesInstructionDataEncoder(),
    getSetProtocolSlotFeesInstructionDataDecoder()
  )
}

export type SetProtocolSlotFeesAsyncInput<
  TAccountOwner extends string = string,
  TAccountProtocolConfigState extends string = string,
  TAccountProtocolOwnerState extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>
  protocolConfigState?: Address<TAccountProtocolConfigState>
  protocolOwnerState?: Address<TAccountProtocolOwnerState>
  version: SetProtocolSlotFeesInstructionDataArgs['version']
  feeType: SetProtocolSlotFeesInstructionDataArgs['feeType']
  brackets: SetProtocolSlotFeesInstructionDataArgs['brackets']
  maxSlotOffset: SetProtocolSlotFeesInstructionDataArgs['maxSlotOffset']
  maxFeeBps: SetProtocolSlotFeesInstructionDataArgs['maxFeeBps']
  count: SetProtocolSlotFeesInstructionDataArgs['count']
  enabled: SetProtocolSlotFeesInstructionDataArgs['enabled']
}

export async function getSetProtocolSlotFeesInstructionAsync<
  TAccountOwner extends string,
  TAccountProtocolConfigState extends string,
  TAccountProtocolOwnerState extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: SetProtocolSlotFeesAsyncInput<
    TAccountOwner,
    TAccountProtocolConfigState,
    TAccountProtocolOwnerState
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SetProtocolSlotFeesInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountProtocolConfigState,
    TAccountProtocolOwnerState
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    protocolConfigState: {
      value: input.protocolConfigState ?? null,
      isWritable: true,
    },
    protocolOwnerState: {
      value: input.protocolOwnerState ?? null,
      isWritable: false,
    },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.protocolConfigState.value) {
    accounts.protocolConfigState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 99, 111, 110, 102, 105, 103, 95, 115, 116,
            97, 116, 101,
          ])
        ),
        getU16Encoder().encode(expectSome(args.version)),
      ],
    })
  }
  if (!accounts.protocolOwnerState.value) {
    accounts.protocolOwnerState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 111, 119, 110, 101, 114, 95, 115, 116, 97,
            116, 101,
          ])
        ),
      ],
    })
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.protocolConfigState),
      getAccountMeta(accounts.protocolOwnerState),
    ],
    programAddress,
    data: getSetProtocolSlotFeesInstructionDataEncoder().encode(
      args as SetProtocolSlotFeesInstructionDataArgs
    ),
  } as SetProtocolSlotFeesInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountProtocolConfigState,
    TAccountProtocolOwnerState
  >

  return instruction
}

export type SetProtocolSlotFeesInput<
  TAccountOwner extends string = string,
  TAccountProtocolConfigState extends string = string,
  TAccountProtocolOwnerState extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>
  protocolConfigState: Address<TAccountProtocolConfigState>
  protocolOwnerState: Address<TAccountProtocolOwnerState>
  version: SetProtocolSlotFeesInstructionDataArgs['version']
  feeType: SetProtocolSlotFeesInstructionDataArgs['feeType']
  brackets: SetProtocolSlotFeesInstructionDataArgs['brackets']
  maxSlotOffset: SetProtocolSlotFeesInstructionDataArgs['maxSlotOffset']
  maxFeeBps: SetProtocolSlotFeesInstructionDataArgs['maxFeeBps']
  count: SetProtocolSlotFeesInstructionDataArgs['count']
  enabled: SetProtocolSlotFeesInstructionDataArgs['enabled']
}

export function getSetProtocolSlotFeesInstruction<
  TAccountOwner extends string,
  TAccountProtocolConfigState extends string,
  TAccountProtocolOwnerState extends string,
  TProgramAddress extends Address = typeof HEAVEN_PROGRAM_ADDRESS,
>(
  input: SetProtocolSlotFeesInput<
    TAccountOwner,
    TAccountProtocolConfigState,
    TAccountProtocolOwnerState
  >,
  config?: { programAddress?: TProgramAddress }
): SetProtocolSlotFeesInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountProtocolConfigState,
  TAccountProtocolOwnerState
> {
  // Program address.
  const programAddress = config?.programAddress ?? HEAVEN_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    protocolConfigState: {
      value: input.protocolConfigState ?? null,
      isWritable: true,
    },
    protocolOwnerState: {
      value: input.protocolOwnerState ?? null,
      isWritable: false,
    },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.protocolConfigState),
      getAccountMeta(accounts.protocolOwnerState),
    ],
    programAddress,
    data: getSetProtocolSlotFeesInstructionDataEncoder().encode(
      args as SetProtocolSlotFeesInstructionDataArgs
    ),
  } as SetProtocolSlotFeesInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountProtocolConfigState,
    TAccountProtocolOwnerState
  >

  return instruction
}

export type ParsedSetProtocolSlotFeesInstruction<
  TProgram extends string = typeof HEAVEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    owner: TAccountMetas[0]
    protocolConfigState: TAccountMetas[1]
    protocolOwnerState: TAccountMetas[2]
  }
  data: SetProtocolSlotFeesInstructionData
}

export function parseSetProtocolSlotFeesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetProtocolSlotFeesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      protocolConfigState: getNextAccount(),
      protocolOwnerState: getNextAccount(),
    },
    data: getSetProtocolSlotFeesInstructionDataDecoder().decode(instruction.data),
  }
}
