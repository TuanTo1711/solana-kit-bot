/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit'

export const PROTOCOL_OWNER_STATE_DISCRIMINATOR = new Uint8Array([
  208, 64, 209, 204, 113, 226, 22, 98,
])

export function getProtocolOwnerStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PROTOCOL_OWNER_STATE_DISCRIMINATOR)
}

export type ProtocolOwnerState = {
  discriminator: ReadonlyUint8Array
  currentProtocolOwner: Address
}

export type ProtocolOwnerStateArgs = { currentProtocolOwner: Address }

export function getProtocolOwnerStateEncoder(): FixedSizeEncoder<ProtocolOwnerStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['currentProtocolOwner', getAddressEncoder()],
    ]),
    value => ({ ...value, discriminator: PROTOCOL_OWNER_STATE_DISCRIMINATOR })
  )
}

export function getProtocolOwnerStateDecoder(): FixedSizeDecoder<ProtocolOwnerState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['currentProtocolOwner', getAddressDecoder()],
  ])
}

export function getProtocolOwnerStateCodec(): FixedSizeCodec<
  ProtocolOwnerStateArgs,
  ProtocolOwnerState
> {
  return combineCodec(getProtocolOwnerStateEncoder(), getProtocolOwnerStateDecoder())
}

export function decodeProtocolOwnerState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ProtocolOwnerState, TAddress>
export function decodeProtocolOwnerState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ProtocolOwnerState, TAddress>
export function decodeProtocolOwnerState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ProtocolOwnerState, TAddress> | MaybeAccount<ProtocolOwnerState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getProtocolOwnerStateDecoder()
  )
}

export async function fetchProtocolOwnerState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ProtocolOwnerState, TAddress>> {
  const maybeAccount = await fetchMaybeProtocolOwnerState(rpc, address, config)
  assertAccountExists(maybeAccount)
  return maybeAccount
}

export async function fetchMaybeProtocolOwnerState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ProtocolOwnerState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config)
  return decodeProtocolOwnerState(maybeAccount)
}

export async function fetchAllProtocolOwnerState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ProtocolOwnerState>[]> {
  const maybeAccounts = await fetchAllMaybeProtocolOwnerState(rpc, addresses, config)
  assertAccountsExist(maybeAccounts)
  return maybeAccounts
}

export async function fetchAllMaybeProtocolOwnerState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ProtocolOwnerState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config)
  return maybeAccounts.map(maybeAccount => decodeProtocolOwnerState(maybeAccount))
}

export function getProtocolOwnerStateSize(): number {
  return 40
}
