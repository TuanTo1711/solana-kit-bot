/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getF64Decoder,
  getF64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit'
import {
  getLiquidityPoolMarketCapBasedFeesDecoder,
  getLiquidityPoolMarketCapBasedFeesEncoder,
  getLiquidityPoolSlotOffsetBasedFeesDecoder,
  getLiquidityPoolSlotOffsetBasedFeesEncoder,
  type LiquidityPoolMarketCapBasedFees,
  type LiquidityPoolMarketCapBasedFeesArgs,
  type LiquidityPoolSlotOffsetBasedFees,
  type LiquidityPoolSlotOffsetBasedFeesArgs,
} from '../types'

export const PROTOCOL_CONFIG_DISCRIMINATOR = new Uint8Array([207, 91, 250, 28, 152, 179, 215, 209])

export function getProtocolConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PROTOCOL_CONFIG_DISCRIMINATOR)
}

export type ProtocolConfig = {
  discriminator: ReadonlyUint8Array
  createPoolFee: bigint
  initialTokenBAmount: number
  initialTokenAAmount: bigint
  unstakedWsolReserve: bigint
  totalSolSpent: bigint
  totalMsolReceived: bigint
  totalRealizedProfit: bigint
  poolCount: bigint
  maxSupplyPerWallet: bigint
  creatorTradingFeeTradingVolumeThreshold: number
  marketCapBasedFees: LiquidityPoolMarketCapBasedFees
  bufferBps: number
  autoStakingThresholdBps: number
  version: number
  protocolConfigStateBump: number
  allowCreatePool: number
  supportedPoolType: number
  defaultLeaderSlotWindow: number
  autoStakingEnabled: number
  leaderSlotWindow: number
  sandwichResistenceEnabled: number
  tokenADecimals: number
  migrationMarketCapThreshold: number
  pad: ReadonlyUint8Array
  maxCreatorTradingFee: number
  slotOffsetBasedFees: LiquidityPoolSlotOffsetBasedFees
}

export type ProtocolConfigArgs = {
  createPoolFee: number | bigint
  initialTokenBAmount: number
  initialTokenAAmount: number | bigint
  unstakedWsolReserve: number | bigint
  totalSolSpent: number | bigint
  totalMsolReceived: number | bigint
  totalRealizedProfit: number | bigint
  poolCount: number | bigint
  maxSupplyPerWallet: number | bigint
  creatorTradingFeeTradingVolumeThreshold: number
  marketCapBasedFees: LiquidityPoolMarketCapBasedFeesArgs
  bufferBps: number
  autoStakingThresholdBps: number
  version: number
  protocolConfigStateBump: number
  allowCreatePool: number
  supportedPoolType: number
  defaultLeaderSlotWindow: number
  autoStakingEnabled: number
  leaderSlotWindow: number
  sandwichResistenceEnabled: number
  tokenADecimals: number
  migrationMarketCapThreshold: number
  pad: ReadonlyUint8Array
  maxCreatorTradingFee: number
  slotOffsetBasedFees: LiquidityPoolSlotOffsetBasedFeesArgs
}

export function getProtocolConfigEncoder(): FixedSizeEncoder<ProtocolConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['createPoolFee', getU64Encoder()],
      ['initialTokenBAmount', getF64Encoder()],
      ['initialTokenAAmount', getU64Encoder()],
      ['unstakedWsolReserve', getU64Encoder()],
      ['totalSolSpent', getU64Encoder()],
      ['totalMsolReceived', getU64Encoder()],
      ['totalRealizedProfit', getU64Encoder()],
      ['poolCount', getU64Encoder()],
      ['maxSupplyPerWallet', getU64Encoder()],
      ['creatorTradingFeeTradingVolumeThreshold', getF64Encoder()],
      ['marketCapBasedFees', getLiquidityPoolMarketCapBasedFeesEncoder()],
      ['bufferBps', getU16Encoder()],
      ['autoStakingThresholdBps', getU16Encoder()],
      ['version', getU16Encoder()],
      ['protocolConfigStateBump', getU8Encoder()],
      ['allowCreatePool', getU8Encoder()],
      ['supportedPoolType', getU8Encoder()],
      ['defaultLeaderSlotWindow', getU8Encoder()],
      ['autoStakingEnabled', getU8Encoder()],
      ['leaderSlotWindow', getU8Encoder()],
      ['sandwichResistenceEnabled', getU8Encoder()],
      ['tokenADecimals', getU8Encoder()],
      ['migrationMarketCapThreshold', getU16Encoder()],
      ['pad', fixEncoderSize(getBytesEncoder(), 8)],
      ['maxCreatorTradingFee', getU32Encoder()],
      ['slotOffsetBasedFees', getLiquidityPoolSlotOffsetBasedFeesEncoder()],
    ]),
    value => ({ ...value, discriminator: PROTOCOL_CONFIG_DISCRIMINATOR })
  )
}

export function getProtocolConfigDecoder(): FixedSizeDecoder<ProtocolConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['createPoolFee', getU64Decoder()],
    ['initialTokenBAmount', getF64Decoder()],
    ['initialTokenAAmount', getU64Decoder()],
    ['unstakedWsolReserve', getU64Decoder()],
    ['totalSolSpent', getU64Decoder()],
    ['totalMsolReceived', getU64Decoder()],
    ['totalRealizedProfit', getU64Decoder()],
    ['poolCount', getU64Decoder()],
    ['maxSupplyPerWallet', getU64Decoder()],
    ['creatorTradingFeeTradingVolumeThreshold', getF64Decoder()],
    ['marketCapBasedFees', getLiquidityPoolMarketCapBasedFeesDecoder()],
    ['bufferBps', getU16Decoder()],
    ['autoStakingThresholdBps', getU16Decoder()],
    ['version', getU16Decoder()],
    ['protocolConfigStateBump', getU8Decoder()],
    ['allowCreatePool', getU8Decoder()],
    ['supportedPoolType', getU8Decoder()],
    ['defaultLeaderSlotWindow', getU8Decoder()],
    ['autoStakingEnabled', getU8Decoder()],
    ['leaderSlotWindow', getU8Decoder()],
    ['sandwichResistenceEnabled', getU8Decoder()],
    ['tokenADecimals', getU8Decoder()],
    ['migrationMarketCapThreshold', getU16Decoder()],
    ['pad', fixDecoderSize(getBytesDecoder(), 8)],
    ['maxCreatorTradingFee', getU32Decoder()],
    ['slotOffsetBasedFees', getLiquidityPoolSlotOffsetBasedFeesDecoder()],
  ])
}

export function getProtocolConfigCodec(): FixedSizeCodec<ProtocolConfigArgs, ProtocolConfig> {
  return combineCodec(getProtocolConfigEncoder(), getProtocolConfigDecoder())
}

export function decodeProtocolConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ProtocolConfig, TAddress>
export function decodeProtocolConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ProtocolConfig, TAddress>
export function decodeProtocolConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ProtocolConfig, TAddress> | MaybeAccount<ProtocolConfig, TAddress> {
  return decodeAccount(encodedAccount as MaybeEncodedAccount<TAddress>, getProtocolConfigDecoder())
}

export async function fetchProtocolConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ProtocolConfig, TAddress>> {
  const maybeAccount = await fetchMaybeProtocolConfig(rpc, address, config)
  assertAccountExists(maybeAccount)
  return maybeAccount
}

export async function fetchMaybeProtocolConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ProtocolConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config)
  return decodeProtocolConfig(maybeAccount)
}

export async function fetchAllProtocolConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ProtocolConfig>[]> {
  const maybeAccounts = await fetchAllMaybeProtocolConfig(rpc, addresses, config)
  assertAccountsExist(maybeAccounts)
  return maybeAccounts
}

export async function fetchAllMaybeProtocolConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ProtocolConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config)
  return maybeAccounts.map(maybeAccount => decodeProtocolConfig(maybeAccount))
}

export function getProtocolConfigSize(): number {
  return 1792
}
