/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit'

export const PROTOCOL_ADMIN_STATE_DISCRIMINATOR = new Uint8Array([
  24, 124, 174, 225, 232, 30, 115, 192,
])

export function getProtocolAdminStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PROTOCOL_ADMIN_STATE_DISCRIMINATOR)
}

export type ProtocolAdminState = {
  discriminator: ReadonlyUint8Array
  currentProtocolAdmin: Address
}

export type ProtocolAdminStateArgs = { currentProtocolAdmin: Address }

export function getProtocolAdminStateEncoder(): FixedSizeEncoder<ProtocolAdminStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['currentProtocolAdmin', getAddressEncoder()],
    ]),
    value => ({ ...value, discriminator: PROTOCOL_ADMIN_STATE_DISCRIMINATOR })
  )
}

export function getProtocolAdminStateDecoder(): FixedSizeDecoder<ProtocolAdminState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['currentProtocolAdmin', getAddressDecoder()],
  ])
}

export function getProtocolAdminStateCodec(): FixedSizeCodec<
  ProtocolAdminStateArgs,
  ProtocolAdminState
> {
  return combineCodec(getProtocolAdminStateEncoder(), getProtocolAdminStateDecoder())
}

export function decodeProtocolAdminState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ProtocolAdminState, TAddress>
export function decodeProtocolAdminState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ProtocolAdminState, TAddress>
export function decodeProtocolAdminState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ProtocolAdminState, TAddress> | MaybeAccount<ProtocolAdminState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getProtocolAdminStateDecoder()
  )
}

export async function fetchProtocolAdminState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ProtocolAdminState, TAddress>> {
  const maybeAccount = await fetchMaybeProtocolAdminState(rpc, address, config)
  assertAccountExists(maybeAccount)
  return maybeAccount
}

export async function fetchMaybeProtocolAdminState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ProtocolAdminState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config)
  return decodeProtocolAdminState(maybeAccount)
}

export async function fetchAllProtocolAdminState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ProtocolAdminState>[]> {
  const maybeAccounts = await fetchAllMaybeProtocolAdminState(rpc, addresses, config)
  assertAccountsExist(maybeAccounts)
  return maybeAccounts
}

export async function fetchAllMaybeProtocolAdminState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ProtocolAdminState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config)
  return maybeAccounts.map(maybeAccount => decodeProtocolAdminState(maybeAccount))
}

export function getProtocolAdminStateSize(): number {
  return 40
}
