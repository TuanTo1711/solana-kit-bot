/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit'

export const MSOL_TICKET_SOL_SPENT_DISCRIMINATOR = new Uint8Array([
  66, 196, 62, 134, 124, 149, 250, 66,
])

export function getMsolTicketSolSpentDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MSOL_TICKET_SOL_SPENT_DISCRIMINATOR)
}

export type MsolTicketSolSpent = {
  discriminator: ReadonlyUint8Array
  costBasis: bigint
  msolUnstaked: bigint
}

export type MsolTicketSolSpentArgs = {
  costBasis: number | bigint
  msolUnstaked: number | bigint
}

export function getMsolTicketSolSpentEncoder(): FixedSizeEncoder<MsolTicketSolSpentArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['costBasis', getU64Encoder()],
      ['msolUnstaked', getU64Encoder()],
    ]),
    value => ({
      ...value,
      discriminator: MSOL_TICKET_SOL_SPENT_DISCRIMINATOR,
    })
  )
}

export function getMsolTicketSolSpentDecoder(): FixedSizeDecoder<MsolTicketSolSpent> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['costBasis', getU64Decoder()],
    ['msolUnstaked', getU64Decoder()],
  ])
}

export function getMsolTicketSolSpentCodec(): FixedSizeCodec<
  MsolTicketSolSpentArgs,
  MsolTicketSolSpent
> {
  return combineCodec(getMsolTicketSolSpentEncoder(), getMsolTicketSolSpentDecoder())
}

export function decodeMsolTicketSolSpent<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<MsolTicketSolSpent, TAddress>
export function decodeMsolTicketSolSpent<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<MsolTicketSolSpent, TAddress>
export function decodeMsolTicketSolSpent<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<MsolTicketSolSpent, TAddress> | MaybeAccount<MsolTicketSolSpent, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMsolTicketSolSpentDecoder()
  )
}

export async function fetchMsolTicketSolSpent<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<MsolTicketSolSpent, TAddress>> {
  const maybeAccount = await fetchMaybeMsolTicketSolSpent(rpc, address, config)
  assertAccountExists(maybeAccount)
  return maybeAccount
}

export async function fetchMaybeMsolTicketSolSpent<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<MsolTicketSolSpent, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config)
  return decodeMsolTicketSolSpent(maybeAccount)
}

export async function fetchAllMsolTicketSolSpent(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<MsolTicketSolSpent>[]> {
  const maybeAccounts = await fetchAllMaybeMsolTicketSolSpent(rpc, addresses, config)
  assertAccountsExist(maybeAccounts)
  return maybeAccounts
}

export async function fetchAllMaybeMsolTicketSolSpent(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<MsolTicketSolSpent>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config)
  return maybeAccounts.map(maybeAccount => decodeMsolTicketSolSpent(maybeAccount))
}

export function getMsolTicketSolSpentSize(): number {
  return 24
}
