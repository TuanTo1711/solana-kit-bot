/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getBooleanDecoder,
  getBooleanEncoder,
  getF64Decoder,
  getF64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
} from '@solana/kit'
import {
  getLiquidityPoolMarketCapBasedFeesDecoder,
  getLiquidityPoolMarketCapBasedFeesEncoder,
  getLiquidityPoolTypeDecoder,
  getLiquidityPoolTypeEncoder,
  type LiquidityPoolMarketCapBasedFees,
  type LiquidityPoolMarketCapBasedFeesArgs,
  type LiquidityPoolType,
  type LiquidityPoolTypeArgs,
} from '.'

export type ProtocolConfigParams = {
  createPoolFee: bigint
  allowCreatePool: boolean
  supportedPoolType: LiquidityPoolType
  marketCapBasedFees: LiquidityPoolMarketCapBasedFees
  initialTokenBAmount: number
  initialTokenAAmount: bigint
  defaultLeaderSlotWindow: number
  autoStakingEnabled: boolean
  sandwichResistenceEnabled: boolean
  bufferBps: number
  autoStakingThresholdBps: number
  tokenADecimals: number
  maxCreatorTradingFee: number
  maxSupplyPerWallet: bigint
  creatorTradingFeeTradingVolumeThreshold: number
  migrationMarketCapThreshold: number
}

export type ProtocolConfigParamsArgs = {
  createPoolFee: number | bigint
  allowCreatePool: boolean
  supportedPoolType: LiquidityPoolTypeArgs
  marketCapBasedFees: LiquidityPoolMarketCapBasedFeesArgs
  initialTokenBAmount: number
  initialTokenAAmount: number | bigint
  defaultLeaderSlotWindow: number
  autoStakingEnabled: boolean
  sandwichResistenceEnabled: boolean
  bufferBps: number
  autoStakingThresholdBps: number
  tokenADecimals: number
  maxCreatorTradingFee: number
  maxSupplyPerWallet: number | bigint
  creatorTradingFeeTradingVolumeThreshold: number
  migrationMarketCapThreshold: number
}

export function getProtocolConfigParamsEncoder(): FixedSizeEncoder<ProtocolConfigParamsArgs> {
  return getStructEncoder([
    ['createPoolFee', getU64Encoder()],
    ['allowCreatePool', getBooleanEncoder()],
    ['supportedPoolType', getLiquidityPoolTypeEncoder()],
    ['marketCapBasedFees', getLiquidityPoolMarketCapBasedFeesEncoder()],
    ['initialTokenBAmount', getF64Encoder()],
    ['initialTokenAAmount', getU64Encoder()],
    ['defaultLeaderSlotWindow', getU8Encoder()],
    ['autoStakingEnabled', getBooleanEncoder()],
    ['sandwichResistenceEnabled', getBooleanEncoder()],
    ['bufferBps', getU16Encoder()],
    ['autoStakingThresholdBps', getU16Encoder()],
    ['tokenADecimals', getU8Encoder()],
    ['maxCreatorTradingFee', getU32Encoder()],
    ['maxSupplyPerWallet', getU64Encoder()],
    ['creatorTradingFeeTradingVolumeThreshold', getF64Encoder()],
    ['migrationMarketCapThreshold', getU16Encoder()],
  ])
}

export function getProtocolConfigParamsDecoder(): FixedSizeDecoder<ProtocolConfigParams> {
  return getStructDecoder([
    ['createPoolFee', getU64Decoder()],
    ['allowCreatePool', getBooleanDecoder()],
    ['supportedPoolType', getLiquidityPoolTypeDecoder()],
    ['marketCapBasedFees', getLiquidityPoolMarketCapBasedFeesDecoder()],
    ['initialTokenBAmount', getF64Decoder()],
    ['initialTokenAAmount', getU64Decoder()],
    ['defaultLeaderSlotWindow', getU8Decoder()],
    ['autoStakingEnabled', getBooleanDecoder()],
    ['sandwichResistenceEnabled', getBooleanDecoder()],
    ['bufferBps', getU16Decoder()],
    ['autoStakingThresholdBps', getU16Decoder()],
    ['tokenADecimals', getU8Decoder()],
    ['maxCreatorTradingFee', getU32Decoder()],
    ['maxSupplyPerWallet', getU64Decoder()],
    ['creatorTradingFeeTradingVolumeThreshold', getF64Decoder()],
    ['migrationMarketCapThreshold', getU16Decoder()],
  ])
}

export function getProtocolConfigParamsCodec(): FixedSizeCodec<
  ProtocolConfigParamsArgs,
  ProtocolConfigParams
> {
  return combineCodec(getProtocolConfigParamsEncoder(), getProtocolConfigParamsDecoder())
}
