/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type ReadonlyUint8Array,
} from '@solana/kit'

export type LiquidityPoolReserve = {
  tokenA: bigint
  tokenB: bigint
  snapshotSlot: bigint
  snapshotA: bigint
  snapshotB: bigint
  padding: bigint
  initialA: bigint
  initialB: bigint
  leaderSlotWindow: number
  pad: ReadonlyUint8Array
}

export type LiquidityPoolReserveArgs = {
  tokenA: number | bigint
  tokenB: number | bigint
  snapshotSlot: number | bigint
  snapshotA: number | bigint
  snapshotB: number | bigint
  padding: number | bigint
  initialA: number | bigint
  initialB: number | bigint
  leaderSlotWindow: number
  pad: ReadonlyUint8Array
}

export function getLiquidityPoolReserveEncoder(): FixedSizeEncoder<LiquidityPoolReserveArgs> {
  return getStructEncoder([
    ['tokenA', getU64Encoder()],
    ['tokenB', getU64Encoder()],
    ['snapshotSlot', getU64Encoder()],
    ['snapshotA', getU64Encoder()],
    ['snapshotB', getU64Encoder()],
    ['padding', getU64Encoder()],
    ['initialA', getU64Encoder()],
    ['initialB', getU64Encoder()],
    ['leaderSlotWindow', getU8Encoder()],
    ['pad', fixEncoderSize(getBytesEncoder(), 7)],
  ])
}

export function getLiquidityPoolReserveDecoder(): FixedSizeDecoder<LiquidityPoolReserve> {
  return getStructDecoder([
    ['tokenA', getU64Decoder()],
    ['tokenB', getU64Decoder()],
    ['snapshotSlot', getU64Decoder()],
    ['snapshotA', getU64Decoder()],
    ['snapshotB', getU64Decoder()],
    ['padding', getU64Decoder()],
    ['initialA', getU64Decoder()],
    ['initialB', getU64Decoder()],
    ['leaderSlotWindow', getU8Decoder()],
    ['pad', fixDecoderSize(getBytesDecoder(), 7)],
  ])
}

export function getLiquidityPoolReserveCodec(): FixedSizeCodec<
  LiquidityPoolReserveArgs,
  LiquidityPoolReserve
> {
  return combineCodec(getLiquidityPoolReserveEncoder(), getLiquidityPoolReserveDecoder())
}
