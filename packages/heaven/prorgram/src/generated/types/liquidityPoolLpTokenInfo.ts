/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type ReadonlyUint8Array,
} from '@solana/kit'
import {
  getLiquidityPoolLpTokenSupplyDecoder,
  getLiquidityPoolLpTokenSupplyEncoder,
  type LiquidityPoolLpTokenSupply,
  type LiquidityPoolLpTokenSupplyArgs,
} from '.'

export type LiquidityPoolLpTokenInfo = {
  supply: LiquidityPoolLpTokenSupply
  decimals: number
  pad: ReadonlyUint8Array
}

export type LiquidityPoolLpTokenInfoArgs = {
  supply: LiquidityPoolLpTokenSupplyArgs
  decimals: number
  pad: ReadonlyUint8Array
}

export function getLiquidityPoolLpTokenInfoEncoder(): FixedSizeEncoder<LiquidityPoolLpTokenInfoArgs> {
  return getStructEncoder([
    ['supply', getLiquidityPoolLpTokenSupplyEncoder()],
    ['decimals', getU8Encoder()],
    ['pad', fixEncoderSize(getBytesEncoder(), 7)],
  ])
}

export function getLiquidityPoolLpTokenInfoDecoder(): FixedSizeDecoder<LiquidityPoolLpTokenInfo> {
  return getStructDecoder([
    ['supply', getLiquidityPoolLpTokenSupplyDecoder()],
    ['decimals', getU8Decoder()],
    ['pad', fixDecoderSize(getBytesDecoder(), 7)],
  ])
}

export function getLiquidityPoolLpTokenInfoCodec(): FixedSizeCodec<
  LiquidityPoolLpTokenInfoArgs,
  LiquidityPoolLpTokenInfo
> {
  return combineCodec(getLiquidityPoolLpTokenInfoEncoder(), getLiquidityPoolLpTokenInfoDecoder())
}
