import { formatUnits, wrapEscHandler } from '@solana-kit-bot/core'
import chalk from 'chalk'
import CliTable3 from 'cli-table3'
import { Command, type BaseContext } from 'clipanion'
import type { ConfigService } from '~/services/ConfigService'

import type { PoolCheckerConfig } from '~/types'

export type PoolCheckerConfigContext = {
  configService: ConfigService
}

export class ConfigCommand extends Command<BaseContext & PoolCheckerConfigContext> {
  override async execute(): Promise<number | void> {
    const inquirer = await import('inquirer')
    const prompt = inquirer.default.prompt
    const controller = new AbortController()

    while (!controller.signal.aborted) {
      const question = prompt<{ action: () => Promise<void> }>({
        type: 'list',
        name: 'action',
        message: 'Ch·ªçn h√†nh ƒë·ªông: ',
        choices: [
          {
            name: 'üîç Xem c·∫•u h√¨nh',
            value: this.view.bind(this),
          },
          {
            name: '‚ûï Th√™m c·∫•u h√¨nh',
            value: this.add.bind(this),
          },
          {
            name: 'üóëÔ∏è X√≥a c·∫•u h√¨nh',
            value: this.remove.bind(this),
          },
          {
            name: 'üîÑ Ch·ªânh s·ª≠a c·∫•u h√¨nh',
            value: this.edit.bind(this),
          },
          new inquirer.default.Separator(chalk.hex('#00FF88')('‚îÄ'.repeat(100))),
          {
            name: `üîô ${chalk.gray('Quay l·∫°i menu ch√≠nh')}`,
            value: controller.abort.bind(controller),
          },
        ],
        theme: {
          style: {
            answer: (text: string) => chalk.hex('#00FF88')(text),
            message: (text: string, status: string) =>
              status === 'done' ? chalk.hex('#00FF88')(text) : chalk.hex('#FFFFFF')(text),
            error: (text: string) => chalk.red(text),
            defaultAnswer: (text: string) => chalk.dim(text),
            help: (text: string) => chalk.dim(text),
            highlight: (text: string) => chalk.hex('#00FF88').bold(text),
            key: (text: string) => chalk.hex('#FFFFFF').bold(text),
          },
        },
      })

      const answer = await wrapEscHandler<typeof question>(question)

      await answer.action()
    }
  }

  async view() {
    const configs = await this.context.configService.getConfigs()
    if (configs.length === 0) {
      console.log('üìù Kh√¥ng c√≥ c·∫•u h√¨nh n√†o ƒë∆∞·ª£c t·∫°o')
      return
    }

    const cliTable = new CliTable3({
      head: [
        'ID',
        'M·ª•c ti√™u',
        'Boost',
        'T·ªïng boost',
        'H√¨nh',
        'H·∫øt h·∫°n (gi·ªù)',
        'S·ªë ti·ªÅn (SOL)',
        'L·ª£i nhu·∫≠n (%)',
        'Tip (SOL)',
      ],
      colWidths: [5, 10, 7, 12, 6, 15, 15, 15, 10],
    })

    configs.forEach((config, index) => {
      cliTable.push([
        index + 1,
        formatUnits(Number(config.target) / 10 ** 6),
        config.hasBoost ? '‚úÖ' : '‚ùå',
        config.totalBoost ?? 'N/A',
        config.hasImage ? '‚úÖ' : '‚ùå',
        config.expiresHour,
        Number(config.amount) / 10 ** 9,
        config.profitSell,
        Number(config.jitoTip) / 10 ** 9,
      ])
    })

    console.log('\nüìã Danh s√°ch c·∫•u h√¨nh Pool Checker: ')
    console.log(cliTable.toString())
  }

  async add() {
    const inquirer = await import('inquirer')
    const prompt = inquirer.default.prompt

    const questions = prompt<PoolCheckerConfig>([
      {
        type: 'input',
        name: 'target',
        message: 'M·ª©c pool m·ª•c ti√™u ƒë·ªÉ ki·ªÉm tra: ',
        required: true,
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || parseFloat(value) <= 0
            ? 'M·ª©c pool m·ª•c ti√™u ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
        filter: (value: string) => BigInt(Number(value) * 10 ** 6),
      },
      {
        type: 'confirm',
        name: 'hasBoost',
        message: 'C√≥ c·∫ßn ki·ªÉm tra boost kh√¥ng? ',
        default: false,
      },
      {
        type: 'input',
        name: 'totalBoost',
        message: 'T·ªïng boost mu·ªën ki·ªÉm tra: ',
        required: true,
        when: ({ hasBoost }) => hasBoost,
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || Number(value) <= 0 ? 'T·ªïng boost ph·∫£i l√† s·ªë l·ªõn h∆°n 0' : true,
        filter: value => Number(value),
      },
      {
        type: 'confirm',
        name: 'hasImage',
        message: 'C√≥ c·∫ßn ki·ªÉm tra ·∫£nh kh√¥ng? ',
        default: false,
      },
      {
        type: 'input',
        name: 'expiresHour',
        message: 'Th·ªùi gian h·∫øt h·∫°n (gi·ªù): ',
        default: '15',
        required: true,
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || Number(value) <= 0
            ? 'Th·ªùi gian h·∫øt h·∫°n ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
        filter: (value: string) => Number(value),
      },
      {
        type: 'input',
        name: 'amount',
        message: 'S·ªë ti·ªÅn mua (SOL): ',
        required: true,
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || parseFloat(value) <= 0
            ? 'S·ªë ti·ªÅn mua ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
        filter: value => BigInt(Number(value) * 10 ** 9),
      },
      {
        type: 'input',
        name: 'profitSell',
        message: 'L·ª£i nhu·∫≠n t·ª± ƒë·ªông b√°n (%): ',
        required: true,
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || parseFloat(value) <= 0
            ? 'L·ª£i nhu·∫≠n t·ª± ƒë·ªông b√°n ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
        default: '80',
        filter: value => Number(value),
      },
      {
        type: 'input',
        name: 'jitoTip',
        message: 'Tip cho Jito (SOL): ',
        required: true,
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || parseFloat(value) <= 0
            ? 'Tip cho Jito ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
        default: '0.001',
        filter: value => BigInt(Number(value) * 10 ** 9),
      },
    ])

    const data = await wrapEscHandler<typeof questions>(questions)

    await this.context.configService.createConfig(data)

    console.log('C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng')
  }

  private async remove() {
    const configs = await this.context.configService.getConfigs()

    if (configs.length === 0) {
      console.log('‚ùå Kh√¥ng c√≥ c·∫•u h√¨nh n√†o ƒë·ªÉ x√≥a')
      return
    }

    const inquirer = await import('inquirer')
    const prompt = inquirer.default.prompt

    const choices = configs.map((config, index) => ({
      name: `Config ${index + 1}: Target=${formatUnits(Number(config.target) / 10 ** 6)}, Amount=${Number(config.amount) / 10 ** 9} SOL`,
      value: config,
    }))

    const question = prompt<{ config: PoolCheckerConfig | 'back' }>({
      type: 'select',
      name: 'config',
      message: 'Ch·ªçn c·∫•u h√¨nh ƒë·ªÉ x√≥a: ',
      choices: [
        ...choices,
        new inquirer.default.Separator(chalk.hex('#00FF88')('‚îÄ'.repeat(100))),
        {
          name: `üîô ${chalk.gray('Quay l·∫°i menu ch√≠nh')}`,
          value: 'back',
        },
      ],
      theme: {
        style: {
          answer: (text: string) => chalk.hex('#00FF88')(text),
          message: (text: string, status: string) =>
            status === 'done' ? chalk.hex('#00FF88')(text) : chalk.hex('#FFFFFF')(text),
          error: (text: string) => chalk.red(text),
          defaultAnswer: (text: string) => chalk.dim(text),
          help: (text: string) => chalk.dim(text),
          highlight: (text: string) => chalk.hex('#00FF88').bold(text),
          key: (text: string) => chalk.hex('#FFFFFF').bold(text),
        },
      },
    })

    const { config } = await wrapEscHandler<typeof question>(question)

    if (config === 'back') {
      return
    }

    if (config && config.id) {
      // Confirm deletion
      const confirmQuestion = prompt<{ confirmed: boolean }>({
        type: 'confirm',
        name: 'confirmed',
        message: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c·∫•u h√¨nh n√†y kh√¥ng?`,
        default: false,
        theme: {
          style: {
            answer: (text: string) => chalk.hex('#00FF88')(text),
            message: (text: string, status: string) =>
              status === 'done' ? chalk.hex('#00FF88')(text) : chalk.hex('#FFFFFF')(text),
            error: (text: string) => chalk.red(text),
            defaultAnswer: (text: string) => chalk.dim(text),
            help: (text: string) => chalk.dim(text),
            highlight: (text: string) => chalk.hex('#00FF88').bold(text),
            key: (text: string) => chalk.hex('#FFFFFF').bold(text),
          },
        },
      })

      const { confirmed } = await wrapEscHandler<typeof confirmQuestion>(confirmQuestion)

      if (confirmed) {
        await this.context.configService.deleteConfig(config.id)
        console.log('‚úÖ C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng')
      } else {
        console.log('‚ùå H·ªßy x√≥a c·∫•u h√¨nh')
      }
    }
  }

  private async edit() {
    const configs = await this.context.configService.getConfigs()

    if (configs.length === 0) {
      console.log('‚ùå Kh√¥ng c√≥ c·∫•u h√¨nh n√†o ƒë·ªÉ s·ª≠a')
      return
    }

    const inquirer = await import('inquirer')
    const prompt = inquirer.default.prompt

    const choices = configs.map((config, index) => ({
      name: `Config ${index + 1}: Target=${config.target}, Amount=${config.amount}`,
      value: config,
    }))

    const question = prompt<{ config: PoolCheckerConfig }>({
      type: 'list',
      name: 'config',
      message: 'Ch·ªçn c·∫•u h√¨nh ƒë·ªÉ s·ª≠a:',
      choices,
    })

    const { config } = await wrapEscHandler<typeof question>(question)

    if (config) {
      const updatedConfig = await this.editConfigFields(config)
      await this.context.configService.updateConfig(updatedConfig)
      console.log('‚úÖ C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng')
    }
  }

  private async editConfigFields(config: PoolCheckerConfig): Promise<PoolCheckerConfig> {
    const inquirer = await import('inquirer')
    const prompt = inquirer.default.prompt

    const question = prompt<Partial<PoolCheckerConfig>>([
      {
        type: 'input',
        name: 'target',
        message: `M·ª©c pool m·ª•c ti√™u (hi·ªán t·∫°i: ${config.target}):`,
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || parseFloat(value) <= 0
            ? 'M·ª©c pool m·ª•c ti√™u ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
        filter: (value: string) => BigInt(Number(value) * 10 ** 6),
      },
      {
        type: 'confirm',
        name: 'hasBoost',
        message: `C√≥ c·∫ßn ki·ªÉm tra boost kh√¥ng? (hi·ªán t·∫°i: ${config.hasBoost ? 'C√≥' : 'Kh√¥ng'}):`,
      },
      {
        type: 'input',
        name: 'totalBoost',
        message: 'T·ªïng boost mu·ªën ki·ªÉm tra:',
        when: ({ hasBoost }) => hasBoost,
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || Number(value) <= 0 ? 'T·ªïng boost ph·∫£i l√† s·ªë l·ªõn h∆°n 0' : true,
        filter: value => Number(value),
      },
      {
        type: 'confirm',
        name: 'hasImage',
        message: `C√≥ c·∫ßn ki·ªÉm tra ·∫£nh kh√¥ng? (hi·ªán t·∫°i: ${config.hasImage ? 'C√≥' : 'Kh√¥ng'}):`,
      },
      {
        type: 'input',
        name: 'expiresHour',
        message: `Th·ªùi gian h·∫øt h·∫°n (gi·ªù) (hi·ªán t·∫°i: ${config.expiresHour / 3600}):`,
        default: (config.expiresHour / 3600).toString(),
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || Number(value) <= 0
            ? 'Th·ªùi gian h·∫øt h·∫°n ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
        filter: (value: string) => Number(value),
      },
      {
        type: 'input',
        name: 'amount',
        message: `S·ªë ti·ªÅn mua (SOL) (hi·ªán t·∫°i: ${Number(config.amount) / 10 ** 9}):`,
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || parseFloat(value) <= 0
            ? 'S·ªë ti·ªÅn mua ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
        filter: value => BigInt(Number(value) * 10 ** 9),
      },
      {
        type: 'input',
        name: 'profitSell',
        message: `L·ª£i nhu·∫≠n t·ª± ƒë·ªông b√°n (%) (hi·ªán t·∫°i: ${config.profitSell / 100}):`,
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || parseFloat(value) <= 0
            ? 'L·ª£i nhu·∫≠n t·ª± ƒë·ªông b√°n ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
        filter: value => Number(value),
      },
      {
        type: 'input',
        name: 'jitoTip',
        message: `Tip cho Jito (SOL) (hi·ªán t·∫°i: ${config.jitoTip}): `,
        transformer: (value: string) => value.trim(),
        validate: (value: string) =>
          isNaN(Number(value)) || parseFloat(value) <= 0
            ? 'Tip cho Jito ph·∫£i l√† s·ªë l·ªõn h∆°n 0'
            : true,
        filter: value => BigInt(Number(value) * 10 ** 9),
      },
    ])

    const answers = await wrapEscHandler<Partial<PoolCheckerConfig>>(question)
    return { ...config, ...answers }
  }
}

ConfigCommand.paths = [['config']]
