import { Telegraf } from 'telegraf'

/**
 * Configuration interface for TelegramService
 */
export interface TelegramConfig {
  /** Bot token from @BotFather */
  botToken: string
  /** Array of chat IDs that should receive notifications */
  chatIds: string[]
  /** Enable/disable notifications */
  enabled: boolean
}

/**
 * Interface for pool notification data
 */
export interface PoolNotification {
  poolAddress: string
  baseMint: string
  quoteMint: string
  baseAmount?: bigint
  quoteAmount?: bigint
  action: 'NEW_POOL' | 'BUY_SUCCESS' | 'TARGET_REACHED' | 'ERROR'
  message?: string
  timestamp?: Date
}

/**
 * TelegramService - Chuy√™n d√πng ƒë·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn bot Telegram
 *
 * T√≠nh nƒÉng:
 * - G·ª≠i th√¥ng b√°o pool m·ªõi
 * - Th√¥ng b√°o giao d·ªãch mua th√†nh c√¥ng
 * - C·∫£nh b√°o l·ªói
 * - Qu·∫£n l√Ω danh s√°ch chat ID
 * - H·ªó tr·ª£ g·ª≠i tin nh·∫Øn broadcast
 */
export class TelegramService {
  private bot: Telegraf | null = null
  private config: TelegramConfig
  private isInitialized = false

  constructor(config: TelegramConfig) {
    this.config = config
    this.initialize()
  }

  /**
   * Kh·ªüi t·∫°o bot Telegram
   */
  private initialize(): void {
    if (!this.config.enabled || !this.config.botToken) {
      console.log('ü§ñ Telegram service is disabled or no bot token provided')
      return
    }

    try {
      this.bot = new Telegraf(this.config.botToken)
      this.isInitialized = true
      console.log('‚úÖ Telegram service initialized successfully')
    } catch (error) {
      console.error('‚ùå Failed to initialize Telegram service:', error)
      this.isInitialized = false
    }
  }

  /**
   * Ki·ªÉm tra xem service c√≥ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng kh√¥ng
   */
  public isReady(): boolean {
    return this.isInitialized && this.bot !== null && this.config.enabled
  }

  /**
   * C·∫≠p nh·∫≠t c·∫•u h√¨nh Telegram
   */
  public updateConfig(newConfig: Partial<TelegramConfig>): void {
    this.config = { ...this.config, ...newConfig }

    // Kh·ªüi t·∫°o l·∫°i n·∫øu bot token thay ƒë·ªïi
    if (newConfig.botToken && newConfig.botToken !== this.config.botToken) {
      this.initialize()
    }
  }

  /**
   * Th√™m chat ID v√†o danh s√°ch nh·∫≠n th√¥ng b√°o
   */
  public addChatId(chatId: string): void {
    if (!this.config.chatIds.includes(chatId)) {
      this.config.chatIds.push(chatId)
      console.log(`‚úÖ Added chat ID: ${chatId}`)
    }
  }

  /**
   * X√≥a chat ID kh·ªèi danh s√°ch nh·∫≠n th√¥ng b√°o
   */
  public removeChatId(chatId: string): void {
    const index = this.config.chatIds.indexOf(chatId)
    if (index > -1) {
      this.config.chatIds.splice(index, 1)
      console.log(`‚úÖ Removed chat ID: ${chatId}`)
    }
  }

  /**
   * L·∫•y danh s√°ch chat ID hi·ªán t·∫°i
   */
  public getChatIds(): string[] {
    return [...this.config.chatIds]
  }

  /**
   * G·ª≠i tin nh·∫Øn ƒë·∫øn m·ªôt chat c·ª• th·ªÉ
   */
  public async sendMessage(chatId: string, message: string): Promise<boolean> {
    if (!this.isReady()) {
      console.log('‚ö†Ô∏è Telegram service is not ready')
      return false
    }

    try {
      await this.bot!.telegram.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        link_preview_options: { is_disabled: true },
      })
      return true
    } catch (error) {
      console.error(`‚ùå Failed to send message to chat ${chatId}:`, error)
      return false
    }
  }

  /**
   * G·ª≠i tin nh·∫Øn broadcast ƒë·∫øn t·∫•t c·∫£ chat ID
   */
  public async sendBroadcastMessage(message: string): Promise<{ success: number; failed: number }> {
    if (!this.isReady()) {
      console.log('‚ö†Ô∏è Telegram service is not ready')
      return { success: 0, failed: 0 }
    }

    if (this.config.chatIds.length === 0) {
      console.log('üì≠ No chat IDs configured for notifications')
      return { success: 0, failed: 0 }
    }

    let successCount = 0
    let failedCount = 0

    console.log(`üì§ Sending broadcast message to ${this.config.chatIds.length} chats...`)

    for (const chatId of this.config.chatIds) {
      const success = await this.sendMessage(chatId, message)
      if (success) {
        successCount++
      } else {
        failedCount++
      }

      // Delay ƒë·ªÉ tr√°nh rate limit
      await this.delay(100)
    }

    console.log(`‚úÖ Broadcast completed: ${successCount} success, ${failedCount} failed`)
    return { success: successCount, failed: failedCount }
  }

  /**
   * G·ª≠i th√¥ng b√°o v·ªÅ pool m·ªõi
   */
  public async notifyNewPool(poolData: {
    poolAddress: string
    baseMint: string
    quoteMint: string
    baseAmount?: bigint
    quoteAmount?: bigint
  }): Promise<void> {
    const message = this.formatNewPoolMessage(poolData)
    await this.sendBroadcastMessage(message)
  }

  /**
   * G·ª≠i th√¥ng b√°o giao d·ªãch mua th√†nh c√¥ng
   */
  public async notifyBuySuccess(buyData: {
    poolAddress: string
    baseMint: string
    baseAmount: bigint
    quoteAmount: bigint
    txSignature?: string
  }): Promise<void> {
    const message = this.formatBuySuccessMessage(buyData)
    await this.sendBroadcastMessage(message)
  }

  /**
   * G·ª≠i th√¥ng b√°o ƒë·∫°t target
   */
  public async notifyTargetReached(targetData: {
    poolAddress: string
    baseMint: string
    targetAmount: bigint
    currentAmount: bigint
  }): Promise<void> {
    const message = this.formatTargetReachedMessage(targetData)
    await this.sendBroadcastMessage(message)
  }

  /**
   * G·ª≠i th√¥ng b√°o l·ªói
   */
  public async notifyError(errorData: {
    poolAddress?: string
    error: string
    context?: string
  }): Promise<void> {
    const message = this.formatErrorMessage(errorData)
    await this.sendBroadcastMessage(message)
  }

  /**
   * G·ª≠i th√¥ng b√°o t√πy ch·ªânh v·ªõi data pool
   */
  public async sendPoolNotification(notification: PoolNotification): Promise<void> {
    let message: string

    switch (notification.action) {
      case 'NEW_POOL':
        message = this.formatNewPoolMessage(notification)
        break
      case 'BUY_SUCCESS':
        message = this.formatBuySuccessMessage(notification)
        break
      case 'TARGET_REACHED':
        message = this.formatTargetReachedMessage(notification)
        break
      case 'ERROR':
        message = this.formatErrorMessage({
          poolAddress: notification.poolAddress,
          error: notification.message || 'Unknown error',
          context: notification.quoteMint,
        })
        break
      default:
        message = notification.message || 'Unknown notification type'
    }

    await this.sendBroadcastMessage(message)
  }

  /**
   * Format tin nh·∫Øn pool m·ªõi
   */
  private formatNewPoolMessage(data: {
    poolAddress: string
    baseMint: string
    quoteMint?: string
    baseAmount?: bigint
    quoteAmount?: bigint
  }): string {
    const timestamp = new Date().toLocaleString('vi-VN')

    return `üéØ **POOL M·ªöI PH√ÅT HI·ªÜN**
    
üìç **Pool Address:** \`${data.poolAddress}\`
ü™ô **Base Mint:** \`${data.baseMint}\`
${data.quoteMint ? `üí∞ **Quote Mint:** \`${data.quoteMint}\`` : ''}
${data.baseAmount ? `üìä **Base Amount:** ${this.formatAmount(data.baseAmount)}` : ''}
${data.quoteAmount ? `üíµ **Quote Amount:** ${this.formatAmount(data.quoteAmount)}` : ''}

‚è∞ **Th·ªùi gian:** ${timestamp}

üîó [Xem tr√™n Solscan](https://solscan.io/account/${data.poolAddress})`
  }

  /**
   * Format tin nh·∫Øn mua th√†nh c√¥ng
   */
  private formatBuySuccessMessage(data: {
    poolAddress: string
    baseMint: string
    baseAmount?: bigint
    quoteAmount?: bigint
    txSignature?: string
  }): string {
    const timestamp = new Date().toLocaleString('vi-VN')

    return `üöÄ **MUA TH√ÄNH C√îNG**
    
üìç **Pool:** \`${data.poolAddress}\`
ü™ô **Token:** \`${data.baseMint}\`
${data.baseAmount ? `üìä **Base Amount:** ${this.formatAmount(data.baseAmount)}` : ''}
${data.quoteAmount ? `üíµ **Quote Amount:** ${this.formatAmount(data.quoteAmount)}` : ''}
üîó **Dexscreener:** https://dexscreener.com/solana/${data.poolAddress}?maker

‚è∞ **Th·ªùi gian:** ${timestamp}

${data.txSignature ? `[Xem giao d·ªãch](https://solscan.io/tx/${data.txSignature})` : ''}`
  }

  /**
   * Format tin nh·∫Øn ƒë·∫°t target
   */
  private formatTargetReachedMessage(data: {
    poolAddress: string
    baseMint: string
    targetAmount?: bigint
    currentAmount?: bigint
  }): string {
    const timestamp = new Date().toLocaleString('vi-VN')

    return `üéØ **ƒê√É ƒê·∫†T TARGET**
    
üìç **Pool:** \`${data.poolAddress}\`
ü™ô **Token:** \`${data.baseMint}\`
${data.targetAmount ? `üéØ **Target:** ${this.formatAmount(data.targetAmount)}` : ''}
${data.currentAmount ? `üìä **Current:** ${this.formatAmount(data.currentAmount)}` : ''}

‚è∞ **Th·ªùi gian:** ${timestamp}`
  }

  /**
   * Format tin nh·∫Øn l·ªói
   */
  private formatErrorMessage(data: {
    poolAddress?: string
    error: string
    context?: string
    message?: string
  }): string {
    const timestamp = new Date().toLocaleString('vi-VN')

    return `‚ùå **L·ªñI**
    
${data.poolAddress ? `üìç **Pool:** \`${data.poolAddress}\`` : ''}
${data.context ? `üìù **Context:** ${data.context}` : ''}
üö® **Error:** ${data.message || data.error}

‚è∞ **Th·ªùi gian:** ${timestamp}`
  }

  /**
   * Format s·ªë l∆∞·ª£ng token
   */
  private formatAmount(amount: bigint): string {
    const num = Number(amount)
    if (num >= 1_000_000_000) {
      return `${(num / 1_000_000_000).toFixed(2)}B`
    } else if (num >= 1_000_000) {
      return `${(num / 1_000_000).toFixed(2)}M`
    } else if (num >= 1_000) {
      return `${(num / 1_000).toFixed(2)}K`
    }
    return num.toLocaleString()
  }

  /**
   * Delay utility function
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms))
  }

  /**
   * ƒê√≥ng k·∫øt n·ªëi bot (cleanup)
   */
  public async close(): Promise<void> {
    if (this.bot) {
      try {
        await this.bot.stop()
        console.log('‚úÖ Telegram bot stopped successfully')
      } catch (error) {
        console.error('‚ùå Error stopping Telegram bot:', error)
      }
      this.bot = null
      this.isInitialized = false
    }
  }
}
