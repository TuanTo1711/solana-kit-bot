
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PumpSwapPool` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PumpSwapPool
 * 
 */
export type PumpSwapPoolModel = runtime.Types.Result.DefaultSelection<Prisma.$PumpSwapPoolPayload>

export type AggregatePumpSwapPool = {
  _count: PumpSwapPoolCountAggregateOutputType | null
  _avg: PumpSwapPoolAvgAggregateOutputType | null
  _sum: PumpSwapPoolSumAggregateOutputType | null
  _min: PumpSwapPoolMinAggregateOutputType | null
  _max: PumpSwapPoolMaxAggregateOutputType | null
}

export type PumpSwapPoolAvgAggregateOutputType = {
  poolBump: number | null
  index: number | null
  lpSupply: number | null
  timestamp: number | null
}

export type PumpSwapPoolSumAggregateOutputType = {
  poolBump: number | null
  index: number | null
  lpSupply: bigint | null
  timestamp: bigint | null
}

export type PumpSwapPoolMinAggregateOutputType = {
  pool: string | null
  poolBump: number | null
  index: number | null
  creator: string | null
  baseMint: string | null
  quoteMint: string | null
  lpMint: string | null
  poolBaseTokenAccount: string | null
  poolQuoteTokenAccount: string | null
  lpSupply: bigint | null
  coinCreator: string | null
  timestamp: bigint | null
}

export type PumpSwapPoolMaxAggregateOutputType = {
  pool: string | null
  poolBump: number | null
  index: number | null
  creator: string | null
  baseMint: string | null
  quoteMint: string | null
  lpMint: string | null
  poolBaseTokenAccount: string | null
  poolQuoteTokenAccount: string | null
  lpSupply: bigint | null
  coinCreator: string | null
  timestamp: bigint | null
}

export type PumpSwapPoolCountAggregateOutputType = {
  pool: number
  poolBump: number
  index: number
  creator: number
  baseMint: number
  quoteMint: number
  lpMint: number
  poolBaseTokenAccount: number
  poolQuoteTokenAccount: number
  lpSupply: number
  coinCreator: number
  timestamp: number
  _all: number
}


export type PumpSwapPoolAvgAggregateInputType = {
  poolBump?: true
  index?: true
  lpSupply?: true
  timestamp?: true
}

export type PumpSwapPoolSumAggregateInputType = {
  poolBump?: true
  index?: true
  lpSupply?: true
  timestamp?: true
}

export type PumpSwapPoolMinAggregateInputType = {
  pool?: true
  poolBump?: true
  index?: true
  creator?: true
  baseMint?: true
  quoteMint?: true
  lpMint?: true
  poolBaseTokenAccount?: true
  poolQuoteTokenAccount?: true
  lpSupply?: true
  coinCreator?: true
  timestamp?: true
}

export type PumpSwapPoolMaxAggregateInputType = {
  pool?: true
  poolBump?: true
  index?: true
  creator?: true
  baseMint?: true
  quoteMint?: true
  lpMint?: true
  poolBaseTokenAccount?: true
  poolQuoteTokenAccount?: true
  lpSupply?: true
  coinCreator?: true
  timestamp?: true
}

export type PumpSwapPoolCountAggregateInputType = {
  pool?: true
  poolBump?: true
  index?: true
  creator?: true
  baseMint?: true
  quoteMint?: true
  lpMint?: true
  poolBaseTokenAccount?: true
  poolQuoteTokenAccount?: true
  lpSupply?: true
  coinCreator?: true
  timestamp?: true
  _all?: true
}

export type PumpSwapPoolAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PumpSwapPool to aggregate.
   */
  where?: Prisma.PumpSwapPoolWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PumpSwapPools to fetch.
   */
  orderBy?: Prisma.PumpSwapPoolOrderByWithRelationInput | Prisma.PumpSwapPoolOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PumpSwapPoolWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PumpSwapPools from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PumpSwapPools.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PumpSwapPools
  **/
  _count?: true | PumpSwapPoolCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PumpSwapPoolAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PumpSwapPoolSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PumpSwapPoolMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PumpSwapPoolMaxAggregateInputType
}

export type GetPumpSwapPoolAggregateType<T extends PumpSwapPoolAggregateArgs> = {
      [P in keyof T & keyof AggregatePumpSwapPool]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePumpSwapPool[P]>
    : Prisma.GetScalarType<T[P], AggregatePumpSwapPool[P]>
}




export type PumpSwapPoolGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PumpSwapPoolWhereInput
  orderBy?: Prisma.PumpSwapPoolOrderByWithAggregationInput | Prisma.PumpSwapPoolOrderByWithAggregationInput[]
  by: Prisma.PumpSwapPoolScalarFieldEnum[] | Prisma.PumpSwapPoolScalarFieldEnum
  having?: Prisma.PumpSwapPoolScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PumpSwapPoolCountAggregateInputType | true
  _avg?: PumpSwapPoolAvgAggregateInputType
  _sum?: PumpSwapPoolSumAggregateInputType
  _min?: PumpSwapPoolMinAggregateInputType
  _max?: PumpSwapPoolMaxAggregateInputType
}

export type PumpSwapPoolGroupByOutputType = {
  pool: string
  poolBump: number
  index: number
  creator: string
  baseMint: string
  quoteMint: string
  lpMint: string
  poolBaseTokenAccount: string
  poolQuoteTokenAccount: string
  lpSupply: bigint
  coinCreator: string
  timestamp: bigint
  _count: PumpSwapPoolCountAggregateOutputType | null
  _avg: PumpSwapPoolAvgAggregateOutputType | null
  _sum: PumpSwapPoolSumAggregateOutputType | null
  _min: PumpSwapPoolMinAggregateOutputType | null
  _max: PumpSwapPoolMaxAggregateOutputType | null
}

type GetPumpSwapPoolGroupByPayload<T extends PumpSwapPoolGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PumpSwapPoolGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PumpSwapPoolGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PumpSwapPoolGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PumpSwapPoolGroupByOutputType[P]>
      }
    >
  >



export type PumpSwapPoolWhereInput = {
  AND?: Prisma.PumpSwapPoolWhereInput | Prisma.PumpSwapPoolWhereInput[]
  OR?: Prisma.PumpSwapPoolWhereInput[]
  NOT?: Prisma.PumpSwapPoolWhereInput | Prisma.PumpSwapPoolWhereInput[]
  pool?: Prisma.StringFilter<"PumpSwapPool"> | string
  poolBump?: Prisma.IntFilter<"PumpSwapPool"> | number
  index?: Prisma.IntFilter<"PumpSwapPool"> | number
  creator?: Prisma.StringFilter<"PumpSwapPool"> | string
  baseMint?: Prisma.StringFilter<"PumpSwapPool"> | string
  quoteMint?: Prisma.StringFilter<"PumpSwapPool"> | string
  lpMint?: Prisma.StringFilter<"PumpSwapPool"> | string
  poolBaseTokenAccount?: Prisma.StringFilter<"PumpSwapPool"> | string
  poolQuoteTokenAccount?: Prisma.StringFilter<"PumpSwapPool"> | string
  lpSupply?: Prisma.BigIntFilter<"PumpSwapPool"> | bigint | number
  coinCreator?: Prisma.StringFilter<"PumpSwapPool"> | string
  timestamp?: Prisma.BigIntFilter<"PumpSwapPool"> | bigint | number
}

export type PumpSwapPoolOrderByWithRelationInput = {
  pool?: Prisma.SortOrder
  poolBump?: Prisma.SortOrder
  index?: Prisma.SortOrder
  creator?: Prisma.SortOrder
  baseMint?: Prisma.SortOrder
  quoteMint?: Prisma.SortOrder
  lpMint?: Prisma.SortOrder
  poolBaseTokenAccount?: Prisma.SortOrder
  poolQuoteTokenAccount?: Prisma.SortOrder
  lpSupply?: Prisma.SortOrder
  coinCreator?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type PumpSwapPoolWhereUniqueInput = Prisma.AtLeast<{
  pool?: string
  AND?: Prisma.PumpSwapPoolWhereInput | Prisma.PumpSwapPoolWhereInput[]
  OR?: Prisma.PumpSwapPoolWhereInput[]
  NOT?: Prisma.PumpSwapPoolWhereInput | Prisma.PumpSwapPoolWhereInput[]
  poolBump?: Prisma.IntFilter<"PumpSwapPool"> | number
  index?: Prisma.IntFilter<"PumpSwapPool"> | number
  creator?: Prisma.StringFilter<"PumpSwapPool"> | string
  baseMint?: Prisma.StringFilter<"PumpSwapPool"> | string
  quoteMint?: Prisma.StringFilter<"PumpSwapPool"> | string
  lpMint?: Prisma.StringFilter<"PumpSwapPool"> | string
  poolBaseTokenAccount?: Prisma.StringFilter<"PumpSwapPool"> | string
  poolQuoteTokenAccount?: Prisma.StringFilter<"PumpSwapPool"> | string
  lpSupply?: Prisma.BigIntFilter<"PumpSwapPool"> | bigint | number
  coinCreator?: Prisma.StringFilter<"PumpSwapPool"> | string
  timestamp?: Prisma.BigIntFilter<"PumpSwapPool"> | bigint | number
}, "pool">

export type PumpSwapPoolOrderByWithAggregationInput = {
  pool?: Prisma.SortOrder
  poolBump?: Prisma.SortOrder
  index?: Prisma.SortOrder
  creator?: Prisma.SortOrder
  baseMint?: Prisma.SortOrder
  quoteMint?: Prisma.SortOrder
  lpMint?: Prisma.SortOrder
  poolBaseTokenAccount?: Prisma.SortOrder
  poolQuoteTokenAccount?: Prisma.SortOrder
  lpSupply?: Prisma.SortOrder
  coinCreator?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  _count?: Prisma.PumpSwapPoolCountOrderByAggregateInput
  _avg?: Prisma.PumpSwapPoolAvgOrderByAggregateInput
  _max?: Prisma.PumpSwapPoolMaxOrderByAggregateInput
  _min?: Prisma.PumpSwapPoolMinOrderByAggregateInput
  _sum?: Prisma.PumpSwapPoolSumOrderByAggregateInput
}

export type PumpSwapPoolScalarWhereWithAggregatesInput = {
  AND?: Prisma.PumpSwapPoolScalarWhereWithAggregatesInput | Prisma.PumpSwapPoolScalarWhereWithAggregatesInput[]
  OR?: Prisma.PumpSwapPoolScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PumpSwapPoolScalarWhereWithAggregatesInput | Prisma.PumpSwapPoolScalarWhereWithAggregatesInput[]
  pool?: Prisma.StringWithAggregatesFilter<"PumpSwapPool"> | string
  poolBump?: Prisma.IntWithAggregatesFilter<"PumpSwapPool"> | number
  index?: Prisma.IntWithAggregatesFilter<"PumpSwapPool"> | number
  creator?: Prisma.StringWithAggregatesFilter<"PumpSwapPool"> | string
  baseMint?: Prisma.StringWithAggregatesFilter<"PumpSwapPool"> | string
  quoteMint?: Prisma.StringWithAggregatesFilter<"PumpSwapPool"> | string
  lpMint?: Prisma.StringWithAggregatesFilter<"PumpSwapPool"> | string
  poolBaseTokenAccount?: Prisma.StringWithAggregatesFilter<"PumpSwapPool"> | string
  poolQuoteTokenAccount?: Prisma.StringWithAggregatesFilter<"PumpSwapPool"> | string
  lpSupply?: Prisma.BigIntWithAggregatesFilter<"PumpSwapPool"> | bigint | number
  coinCreator?: Prisma.StringWithAggregatesFilter<"PumpSwapPool"> | string
  timestamp?: Prisma.BigIntWithAggregatesFilter<"PumpSwapPool"> | bigint | number
}

export type PumpSwapPoolCreateInput = {
  pool: string
  poolBump: number
  index: number
  creator: string
  baseMint: string
  quoteMint: string
  lpMint: string
  poolBaseTokenAccount: string
  poolQuoteTokenAccount: string
  lpSupply: bigint | number
  coinCreator: string
  timestamp: bigint | number
}

export type PumpSwapPoolUncheckedCreateInput = {
  pool: string
  poolBump: number
  index: number
  creator: string
  baseMint: string
  quoteMint: string
  lpMint: string
  poolBaseTokenAccount: string
  poolQuoteTokenAccount: string
  lpSupply: bigint | number
  coinCreator: string
  timestamp: bigint | number
}

export type PumpSwapPoolUpdateInput = {
  pool?: Prisma.StringFieldUpdateOperationsInput | string
  poolBump?: Prisma.IntFieldUpdateOperationsInput | number
  index?: Prisma.IntFieldUpdateOperationsInput | number
  creator?: Prisma.StringFieldUpdateOperationsInput | string
  baseMint?: Prisma.StringFieldUpdateOperationsInput | string
  quoteMint?: Prisma.StringFieldUpdateOperationsInput | string
  lpMint?: Prisma.StringFieldUpdateOperationsInput | string
  poolBaseTokenAccount?: Prisma.StringFieldUpdateOperationsInput | string
  poolQuoteTokenAccount?: Prisma.StringFieldUpdateOperationsInput | string
  lpSupply?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  coinCreator?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type PumpSwapPoolUncheckedUpdateInput = {
  pool?: Prisma.StringFieldUpdateOperationsInput | string
  poolBump?: Prisma.IntFieldUpdateOperationsInput | number
  index?: Prisma.IntFieldUpdateOperationsInput | number
  creator?: Prisma.StringFieldUpdateOperationsInput | string
  baseMint?: Prisma.StringFieldUpdateOperationsInput | string
  quoteMint?: Prisma.StringFieldUpdateOperationsInput | string
  lpMint?: Prisma.StringFieldUpdateOperationsInput | string
  poolBaseTokenAccount?: Prisma.StringFieldUpdateOperationsInput | string
  poolQuoteTokenAccount?: Prisma.StringFieldUpdateOperationsInput | string
  lpSupply?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  coinCreator?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type PumpSwapPoolCreateManyInput = {
  pool: string
  poolBump: number
  index: number
  creator: string
  baseMint: string
  quoteMint: string
  lpMint: string
  poolBaseTokenAccount: string
  poolQuoteTokenAccount: string
  lpSupply: bigint | number
  coinCreator: string
  timestamp: bigint | number
}

export type PumpSwapPoolUpdateManyMutationInput = {
  pool?: Prisma.StringFieldUpdateOperationsInput | string
  poolBump?: Prisma.IntFieldUpdateOperationsInput | number
  index?: Prisma.IntFieldUpdateOperationsInput | number
  creator?: Prisma.StringFieldUpdateOperationsInput | string
  baseMint?: Prisma.StringFieldUpdateOperationsInput | string
  quoteMint?: Prisma.StringFieldUpdateOperationsInput | string
  lpMint?: Prisma.StringFieldUpdateOperationsInput | string
  poolBaseTokenAccount?: Prisma.StringFieldUpdateOperationsInput | string
  poolQuoteTokenAccount?: Prisma.StringFieldUpdateOperationsInput | string
  lpSupply?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  coinCreator?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type PumpSwapPoolUncheckedUpdateManyInput = {
  pool?: Prisma.StringFieldUpdateOperationsInput | string
  poolBump?: Prisma.IntFieldUpdateOperationsInput | number
  index?: Prisma.IntFieldUpdateOperationsInput | number
  creator?: Prisma.StringFieldUpdateOperationsInput | string
  baseMint?: Prisma.StringFieldUpdateOperationsInput | string
  quoteMint?: Prisma.StringFieldUpdateOperationsInput | string
  lpMint?: Prisma.StringFieldUpdateOperationsInput | string
  poolBaseTokenAccount?: Prisma.StringFieldUpdateOperationsInput | string
  poolQuoteTokenAccount?: Prisma.StringFieldUpdateOperationsInput | string
  lpSupply?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  coinCreator?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type PumpSwapPoolCountOrderByAggregateInput = {
  pool?: Prisma.SortOrder
  poolBump?: Prisma.SortOrder
  index?: Prisma.SortOrder
  creator?: Prisma.SortOrder
  baseMint?: Prisma.SortOrder
  quoteMint?: Prisma.SortOrder
  lpMint?: Prisma.SortOrder
  poolBaseTokenAccount?: Prisma.SortOrder
  poolQuoteTokenAccount?: Prisma.SortOrder
  lpSupply?: Prisma.SortOrder
  coinCreator?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type PumpSwapPoolAvgOrderByAggregateInput = {
  poolBump?: Prisma.SortOrder
  index?: Prisma.SortOrder
  lpSupply?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type PumpSwapPoolMaxOrderByAggregateInput = {
  pool?: Prisma.SortOrder
  poolBump?: Prisma.SortOrder
  index?: Prisma.SortOrder
  creator?: Prisma.SortOrder
  baseMint?: Prisma.SortOrder
  quoteMint?: Prisma.SortOrder
  lpMint?: Prisma.SortOrder
  poolBaseTokenAccount?: Prisma.SortOrder
  poolQuoteTokenAccount?: Prisma.SortOrder
  lpSupply?: Prisma.SortOrder
  coinCreator?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type PumpSwapPoolMinOrderByAggregateInput = {
  pool?: Prisma.SortOrder
  poolBump?: Prisma.SortOrder
  index?: Prisma.SortOrder
  creator?: Prisma.SortOrder
  baseMint?: Prisma.SortOrder
  quoteMint?: Prisma.SortOrder
  lpMint?: Prisma.SortOrder
  poolBaseTokenAccount?: Prisma.SortOrder
  poolQuoteTokenAccount?: Prisma.SortOrder
  lpSupply?: Prisma.SortOrder
  coinCreator?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type PumpSwapPoolSumOrderByAggregateInput = {
  poolBump?: Prisma.SortOrder
  index?: Prisma.SortOrder
  lpSupply?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type BigIntFieldUpdateOperationsInput = {
  set?: bigint | number
  increment?: bigint | number
  decrement?: bigint | number
  multiply?: bigint | number
  divide?: bigint | number
}



export type PumpSwapPoolSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  pool?: boolean
  poolBump?: boolean
  index?: boolean
  creator?: boolean
  baseMint?: boolean
  quoteMint?: boolean
  lpMint?: boolean
  poolBaseTokenAccount?: boolean
  poolQuoteTokenAccount?: boolean
  lpSupply?: boolean
  coinCreator?: boolean
  timestamp?: boolean
}, ExtArgs["result"]["pumpSwapPool"]>

export type PumpSwapPoolSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  pool?: boolean
  poolBump?: boolean
  index?: boolean
  creator?: boolean
  baseMint?: boolean
  quoteMint?: boolean
  lpMint?: boolean
  poolBaseTokenAccount?: boolean
  poolQuoteTokenAccount?: boolean
  lpSupply?: boolean
  coinCreator?: boolean
  timestamp?: boolean
}, ExtArgs["result"]["pumpSwapPool"]>

export type PumpSwapPoolSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  pool?: boolean
  poolBump?: boolean
  index?: boolean
  creator?: boolean
  baseMint?: boolean
  quoteMint?: boolean
  lpMint?: boolean
  poolBaseTokenAccount?: boolean
  poolQuoteTokenAccount?: boolean
  lpSupply?: boolean
  coinCreator?: boolean
  timestamp?: boolean
}, ExtArgs["result"]["pumpSwapPool"]>

export type PumpSwapPoolSelectScalar = {
  pool?: boolean
  poolBump?: boolean
  index?: boolean
  creator?: boolean
  baseMint?: boolean
  quoteMint?: boolean
  lpMint?: boolean
  poolBaseTokenAccount?: boolean
  poolQuoteTokenAccount?: boolean
  lpSupply?: boolean
  coinCreator?: boolean
  timestamp?: boolean
}

export type PumpSwapPoolOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"pool" | "poolBump" | "index" | "creator" | "baseMint" | "quoteMint" | "lpMint" | "poolBaseTokenAccount" | "poolQuoteTokenAccount" | "lpSupply" | "coinCreator" | "timestamp", ExtArgs["result"]["pumpSwapPool"]>

export type $PumpSwapPoolPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PumpSwapPool"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    pool: string
    poolBump: number
    index: number
    creator: string
    baseMint: string
    quoteMint: string
    lpMint: string
    poolBaseTokenAccount: string
    poolQuoteTokenAccount: string
    lpSupply: bigint
    coinCreator: string
    timestamp: bigint
  }, ExtArgs["result"]["pumpSwapPool"]>
  composites: {}
}

export type PumpSwapPoolGetPayload<S extends boolean | null | undefined | PumpSwapPoolDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PumpSwapPoolPayload, S>

export type PumpSwapPoolCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PumpSwapPoolFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PumpSwapPoolCountAggregateInputType | true
  }

export interface PumpSwapPoolDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PumpSwapPool'], meta: { name: 'PumpSwapPool' } }
  /**
   * Find zero or one PumpSwapPool that matches the filter.
   * @param {PumpSwapPoolFindUniqueArgs} args - Arguments to find a PumpSwapPool
   * @example
   * // Get one PumpSwapPool
   * const pumpSwapPool = await prisma.pumpSwapPool.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PumpSwapPoolFindUniqueArgs>(args: Prisma.SelectSubset<T, PumpSwapPoolFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PumpSwapPoolClient<runtime.Types.Result.GetResult<Prisma.$PumpSwapPoolPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PumpSwapPool that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PumpSwapPoolFindUniqueOrThrowArgs} args - Arguments to find a PumpSwapPool
   * @example
   * // Get one PumpSwapPool
   * const pumpSwapPool = await prisma.pumpSwapPool.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PumpSwapPoolFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PumpSwapPoolFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PumpSwapPoolClient<runtime.Types.Result.GetResult<Prisma.$PumpSwapPoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PumpSwapPool that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PumpSwapPoolFindFirstArgs} args - Arguments to find a PumpSwapPool
   * @example
   * // Get one PumpSwapPool
   * const pumpSwapPool = await prisma.pumpSwapPool.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PumpSwapPoolFindFirstArgs>(args?: Prisma.SelectSubset<T, PumpSwapPoolFindFirstArgs<ExtArgs>>): Prisma.Prisma__PumpSwapPoolClient<runtime.Types.Result.GetResult<Prisma.$PumpSwapPoolPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PumpSwapPool that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PumpSwapPoolFindFirstOrThrowArgs} args - Arguments to find a PumpSwapPool
   * @example
   * // Get one PumpSwapPool
   * const pumpSwapPool = await prisma.pumpSwapPool.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PumpSwapPoolFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PumpSwapPoolFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PumpSwapPoolClient<runtime.Types.Result.GetResult<Prisma.$PumpSwapPoolPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PumpSwapPools that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PumpSwapPoolFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PumpSwapPools
   * const pumpSwapPools = await prisma.pumpSwapPool.findMany()
   * 
   * // Get first 10 PumpSwapPools
   * const pumpSwapPools = await prisma.pumpSwapPool.findMany({ take: 10 })
   * 
   * // Only select the `pool`
   * const pumpSwapPoolWithPoolOnly = await prisma.pumpSwapPool.findMany({ select: { pool: true } })
   * 
   */
  findMany<T extends PumpSwapPoolFindManyArgs>(args?: Prisma.SelectSubset<T, PumpSwapPoolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PumpSwapPoolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PumpSwapPool.
   * @param {PumpSwapPoolCreateArgs} args - Arguments to create a PumpSwapPool.
   * @example
   * // Create one PumpSwapPool
   * const PumpSwapPool = await prisma.pumpSwapPool.create({
   *   data: {
   *     // ... data to create a PumpSwapPool
   *   }
   * })
   * 
   */
  create<T extends PumpSwapPoolCreateArgs>(args: Prisma.SelectSubset<T, PumpSwapPoolCreateArgs<ExtArgs>>): Prisma.Prisma__PumpSwapPoolClient<runtime.Types.Result.GetResult<Prisma.$PumpSwapPoolPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PumpSwapPools.
   * @param {PumpSwapPoolCreateManyArgs} args - Arguments to create many PumpSwapPools.
   * @example
   * // Create many PumpSwapPools
   * const pumpSwapPool = await prisma.pumpSwapPool.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PumpSwapPoolCreateManyArgs>(args?: Prisma.SelectSubset<T, PumpSwapPoolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PumpSwapPools and returns the data saved in the database.
   * @param {PumpSwapPoolCreateManyAndReturnArgs} args - Arguments to create many PumpSwapPools.
   * @example
   * // Create many PumpSwapPools
   * const pumpSwapPool = await prisma.pumpSwapPool.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PumpSwapPools and only return the `pool`
   * const pumpSwapPoolWithPoolOnly = await prisma.pumpSwapPool.createManyAndReturn({
   *   select: { pool: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PumpSwapPoolCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PumpSwapPoolCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PumpSwapPoolPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PumpSwapPool.
   * @param {PumpSwapPoolDeleteArgs} args - Arguments to delete one PumpSwapPool.
   * @example
   * // Delete one PumpSwapPool
   * const PumpSwapPool = await prisma.pumpSwapPool.delete({
   *   where: {
   *     // ... filter to delete one PumpSwapPool
   *   }
   * })
   * 
   */
  delete<T extends PumpSwapPoolDeleteArgs>(args: Prisma.SelectSubset<T, PumpSwapPoolDeleteArgs<ExtArgs>>): Prisma.Prisma__PumpSwapPoolClient<runtime.Types.Result.GetResult<Prisma.$PumpSwapPoolPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PumpSwapPool.
   * @param {PumpSwapPoolUpdateArgs} args - Arguments to update one PumpSwapPool.
   * @example
   * // Update one PumpSwapPool
   * const pumpSwapPool = await prisma.pumpSwapPool.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PumpSwapPoolUpdateArgs>(args: Prisma.SelectSubset<T, PumpSwapPoolUpdateArgs<ExtArgs>>): Prisma.Prisma__PumpSwapPoolClient<runtime.Types.Result.GetResult<Prisma.$PumpSwapPoolPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PumpSwapPools.
   * @param {PumpSwapPoolDeleteManyArgs} args - Arguments to filter PumpSwapPools to delete.
   * @example
   * // Delete a few PumpSwapPools
   * const { count } = await prisma.pumpSwapPool.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PumpSwapPoolDeleteManyArgs>(args?: Prisma.SelectSubset<T, PumpSwapPoolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PumpSwapPools.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PumpSwapPoolUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PumpSwapPools
   * const pumpSwapPool = await prisma.pumpSwapPool.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PumpSwapPoolUpdateManyArgs>(args: Prisma.SelectSubset<T, PumpSwapPoolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PumpSwapPools and returns the data updated in the database.
   * @param {PumpSwapPoolUpdateManyAndReturnArgs} args - Arguments to update many PumpSwapPools.
   * @example
   * // Update many PumpSwapPools
   * const pumpSwapPool = await prisma.pumpSwapPool.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PumpSwapPools and only return the `pool`
   * const pumpSwapPoolWithPoolOnly = await prisma.pumpSwapPool.updateManyAndReturn({
   *   select: { pool: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PumpSwapPoolUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PumpSwapPoolUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PumpSwapPoolPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PumpSwapPool.
   * @param {PumpSwapPoolUpsertArgs} args - Arguments to update or create a PumpSwapPool.
   * @example
   * // Update or create a PumpSwapPool
   * const pumpSwapPool = await prisma.pumpSwapPool.upsert({
   *   create: {
   *     // ... data to create a PumpSwapPool
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PumpSwapPool we want to update
   *   }
   * })
   */
  upsert<T extends PumpSwapPoolUpsertArgs>(args: Prisma.SelectSubset<T, PumpSwapPoolUpsertArgs<ExtArgs>>): Prisma.Prisma__PumpSwapPoolClient<runtime.Types.Result.GetResult<Prisma.$PumpSwapPoolPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PumpSwapPools.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PumpSwapPoolCountArgs} args - Arguments to filter PumpSwapPools to count.
   * @example
   * // Count the number of PumpSwapPools
   * const count = await prisma.pumpSwapPool.count({
   *   where: {
   *     // ... the filter for the PumpSwapPools we want to count
   *   }
   * })
  **/
  count<T extends PumpSwapPoolCountArgs>(
    args?: Prisma.Subset<T, PumpSwapPoolCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PumpSwapPoolCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PumpSwapPool.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PumpSwapPoolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PumpSwapPoolAggregateArgs>(args: Prisma.Subset<T, PumpSwapPoolAggregateArgs>): Prisma.PrismaPromise<GetPumpSwapPoolAggregateType<T>>

  /**
   * Group by PumpSwapPool.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PumpSwapPoolGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PumpSwapPoolGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PumpSwapPoolGroupByArgs['orderBy'] }
      : { orderBy?: PumpSwapPoolGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PumpSwapPoolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPumpSwapPoolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PumpSwapPool model
 */
readonly fields: PumpSwapPoolFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PumpSwapPool.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PumpSwapPoolClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PumpSwapPool model
 */
export interface PumpSwapPoolFieldRefs {
  readonly pool: Prisma.FieldRef<"PumpSwapPool", 'String'>
  readonly poolBump: Prisma.FieldRef<"PumpSwapPool", 'Int'>
  readonly index: Prisma.FieldRef<"PumpSwapPool", 'Int'>
  readonly creator: Prisma.FieldRef<"PumpSwapPool", 'String'>
  readonly baseMint: Prisma.FieldRef<"PumpSwapPool", 'String'>
  readonly quoteMint: Prisma.FieldRef<"PumpSwapPool", 'String'>
  readonly lpMint: Prisma.FieldRef<"PumpSwapPool", 'String'>
  readonly poolBaseTokenAccount: Prisma.FieldRef<"PumpSwapPool", 'String'>
  readonly poolQuoteTokenAccount: Prisma.FieldRef<"PumpSwapPool", 'String'>
  readonly lpSupply: Prisma.FieldRef<"PumpSwapPool", 'BigInt'>
  readonly coinCreator: Prisma.FieldRef<"PumpSwapPool", 'String'>
  readonly timestamp: Prisma.FieldRef<"PumpSwapPool", 'BigInt'>
}
    

// Custom InputTypes
/**
 * PumpSwapPool findUnique
 */
export type PumpSwapPoolFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PumpSwapPool
   */
  select?: Prisma.PumpSwapPoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PumpSwapPool
   */
  omit?: Prisma.PumpSwapPoolOmit<ExtArgs> | null
  /**
   * Filter, which PumpSwapPool to fetch.
   */
  where: Prisma.PumpSwapPoolWhereUniqueInput
}

/**
 * PumpSwapPool findUniqueOrThrow
 */
export type PumpSwapPoolFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PumpSwapPool
   */
  select?: Prisma.PumpSwapPoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PumpSwapPool
   */
  omit?: Prisma.PumpSwapPoolOmit<ExtArgs> | null
  /**
   * Filter, which PumpSwapPool to fetch.
   */
  where: Prisma.PumpSwapPoolWhereUniqueInput
}

/**
 * PumpSwapPool findFirst
 */
export type PumpSwapPoolFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PumpSwapPool
   */
  select?: Prisma.PumpSwapPoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PumpSwapPool
   */
  omit?: Prisma.PumpSwapPoolOmit<ExtArgs> | null
  /**
   * Filter, which PumpSwapPool to fetch.
   */
  where?: Prisma.PumpSwapPoolWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PumpSwapPools to fetch.
   */
  orderBy?: Prisma.PumpSwapPoolOrderByWithRelationInput | Prisma.PumpSwapPoolOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PumpSwapPools.
   */
  cursor?: Prisma.PumpSwapPoolWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PumpSwapPools from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PumpSwapPools.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PumpSwapPools.
   */
  distinct?: Prisma.PumpSwapPoolScalarFieldEnum | Prisma.PumpSwapPoolScalarFieldEnum[]
}

/**
 * PumpSwapPool findFirstOrThrow
 */
export type PumpSwapPoolFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PumpSwapPool
   */
  select?: Prisma.PumpSwapPoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PumpSwapPool
   */
  omit?: Prisma.PumpSwapPoolOmit<ExtArgs> | null
  /**
   * Filter, which PumpSwapPool to fetch.
   */
  where?: Prisma.PumpSwapPoolWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PumpSwapPools to fetch.
   */
  orderBy?: Prisma.PumpSwapPoolOrderByWithRelationInput | Prisma.PumpSwapPoolOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PumpSwapPools.
   */
  cursor?: Prisma.PumpSwapPoolWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PumpSwapPools from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PumpSwapPools.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PumpSwapPools.
   */
  distinct?: Prisma.PumpSwapPoolScalarFieldEnum | Prisma.PumpSwapPoolScalarFieldEnum[]
}

/**
 * PumpSwapPool findMany
 */
export type PumpSwapPoolFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PumpSwapPool
   */
  select?: Prisma.PumpSwapPoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PumpSwapPool
   */
  omit?: Prisma.PumpSwapPoolOmit<ExtArgs> | null
  /**
   * Filter, which PumpSwapPools to fetch.
   */
  where?: Prisma.PumpSwapPoolWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PumpSwapPools to fetch.
   */
  orderBy?: Prisma.PumpSwapPoolOrderByWithRelationInput | Prisma.PumpSwapPoolOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PumpSwapPools.
   */
  cursor?: Prisma.PumpSwapPoolWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PumpSwapPools from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PumpSwapPools.
   */
  skip?: number
  distinct?: Prisma.PumpSwapPoolScalarFieldEnum | Prisma.PumpSwapPoolScalarFieldEnum[]
}

/**
 * PumpSwapPool create
 */
export type PumpSwapPoolCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PumpSwapPool
   */
  select?: Prisma.PumpSwapPoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PumpSwapPool
   */
  omit?: Prisma.PumpSwapPoolOmit<ExtArgs> | null
  /**
   * The data needed to create a PumpSwapPool.
   */
  data: Prisma.XOR<Prisma.PumpSwapPoolCreateInput, Prisma.PumpSwapPoolUncheckedCreateInput>
}

/**
 * PumpSwapPool createMany
 */
export type PumpSwapPoolCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PumpSwapPools.
   */
  data: Prisma.PumpSwapPoolCreateManyInput | Prisma.PumpSwapPoolCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PumpSwapPool createManyAndReturn
 */
export type PumpSwapPoolCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PumpSwapPool
   */
  select?: Prisma.PumpSwapPoolSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PumpSwapPool
   */
  omit?: Prisma.PumpSwapPoolOmit<ExtArgs> | null
  /**
   * The data used to create many PumpSwapPools.
   */
  data: Prisma.PumpSwapPoolCreateManyInput | Prisma.PumpSwapPoolCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PumpSwapPool update
 */
export type PumpSwapPoolUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PumpSwapPool
   */
  select?: Prisma.PumpSwapPoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PumpSwapPool
   */
  omit?: Prisma.PumpSwapPoolOmit<ExtArgs> | null
  /**
   * The data needed to update a PumpSwapPool.
   */
  data: Prisma.XOR<Prisma.PumpSwapPoolUpdateInput, Prisma.PumpSwapPoolUncheckedUpdateInput>
  /**
   * Choose, which PumpSwapPool to update.
   */
  where: Prisma.PumpSwapPoolWhereUniqueInput
}

/**
 * PumpSwapPool updateMany
 */
export type PumpSwapPoolUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PumpSwapPools.
   */
  data: Prisma.XOR<Prisma.PumpSwapPoolUpdateManyMutationInput, Prisma.PumpSwapPoolUncheckedUpdateManyInput>
  /**
   * Filter which PumpSwapPools to update
   */
  where?: Prisma.PumpSwapPoolWhereInput
  /**
   * Limit how many PumpSwapPools to update.
   */
  limit?: number
}

/**
 * PumpSwapPool updateManyAndReturn
 */
export type PumpSwapPoolUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PumpSwapPool
   */
  select?: Prisma.PumpSwapPoolSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PumpSwapPool
   */
  omit?: Prisma.PumpSwapPoolOmit<ExtArgs> | null
  /**
   * The data used to update PumpSwapPools.
   */
  data: Prisma.XOR<Prisma.PumpSwapPoolUpdateManyMutationInput, Prisma.PumpSwapPoolUncheckedUpdateManyInput>
  /**
   * Filter which PumpSwapPools to update
   */
  where?: Prisma.PumpSwapPoolWhereInput
  /**
   * Limit how many PumpSwapPools to update.
   */
  limit?: number
}

/**
 * PumpSwapPool upsert
 */
export type PumpSwapPoolUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PumpSwapPool
   */
  select?: Prisma.PumpSwapPoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PumpSwapPool
   */
  omit?: Prisma.PumpSwapPoolOmit<ExtArgs> | null
  /**
   * The filter to search for the PumpSwapPool to update in case it exists.
   */
  where: Prisma.PumpSwapPoolWhereUniqueInput
  /**
   * In case the PumpSwapPool found by the `where` argument doesn't exist, create a new PumpSwapPool with this data.
   */
  create: Prisma.XOR<Prisma.PumpSwapPoolCreateInput, Prisma.PumpSwapPoolUncheckedCreateInput>
  /**
   * In case the PumpSwapPool was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PumpSwapPoolUpdateInput, Prisma.PumpSwapPoolUncheckedUpdateInput>
}

/**
 * PumpSwapPool delete
 */
export type PumpSwapPoolDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PumpSwapPool
   */
  select?: Prisma.PumpSwapPoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PumpSwapPool
   */
  omit?: Prisma.PumpSwapPoolOmit<ExtArgs> | null
  /**
   * Filter which PumpSwapPool to delete.
   */
  where: Prisma.PumpSwapPoolWhereUniqueInput
}

/**
 * PumpSwapPool deleteMany
 */
export type PumpSwapPoolDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PumpSwapPools to delete
   */
  where?: Prisma.PumpSwapPoolWhereInput
  /**
   * Limit how many PumpSwapPools to delete.
   */
  limit?: number
}

/**
 * PumpSwapPool without action
 */
export type PumpSwapPoolDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PumpSwapPool
   */
  select?: Prisma.PumpSwapPoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PumpSwapPool
   */
  omit?: Prisma.PumpSwapPoolOmit<ExtArgs> | null
}
