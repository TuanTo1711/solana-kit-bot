/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit'
import { PUMP_PROGRAM_ADDRESS } from '../programs'
import { expectAddress, getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const BUY_DISCRIMINATOR = new Uint8Array([102, 6, 61, 18, 1, 218, 235, 234])

export function getBuyDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(BUY_DISCRIMINATOR)
}

export type BuyInstruction<
  TProgram extends string = typeof PUMP_PROGRAM_ADDRESS,
  TAccountGlobal extends string | AccountMeta<string> = string,
  TAccountFeeRecipient extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountBondingCurve extends string | AccountMeta<string> = string,
  TAccountAssociatedBondingCurve extends string | AccountMeta<string> = string,
  TAccountAssociatedUser extends string | AccountMeta<string> = string,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountCreatorVault extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TAccountGlobalVolumeAccumulator extends string | AccountMeta<string> = string,
  TAccountUserVolumeAccumulator extends string | AccountMeta<string> = string,
  TAccountUserAccTarget extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGlobal extends string ? ReadonlyAccount<TAccountGlobal> : TAccountGlobal,
      TAccountFeeRecipient extends string
        ? WritableAccount<TAccountFeeRecipient>
        : TAccountFeeRecipient,
      TAccountMint extends string ? ReadonlyAccount<TAccountMint> : TAccountMint,
      TAccountBondingCurve extends string
        ? WritableAccount<TAccountBondingCurve>
        : TAccountBondingCurve,
      TAccountAssociatedBondingCurve extends string
        ? WritableAccount<TAccountAssociatedBondingCurve>
        : TAccountAssociatedBondingCurve,
      TAccountAssociatedUser extends string
        ? WritableAccount<TAccountAssociatedUser>
        : TAccountAssociatedUser,
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountCreatorVault extends string
        ? WritableAccount<TAccountCreatorVault>
        : TAccountCreatorVault,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string ? ReadonlyAccount<TAccountProgram> : TAccountProgram,
      TAccountGlobalVolumeAccumulator extends string
        ? WritableAccount<TAccountGlobalVolumeAccumulator>
        : TAccountGlobalVolumeAccumulator,
      TAccountUserVolumeAccumulator extends string
        ? WritableAccount<TAccountUserVolumeAccumulator>
        : TAccountUserVolumeAccumulator,
      TAccountUserAccTarget extends string
        ? WritableSignerAccount<TAccountUserAccTarget> & AccountSignerMeta<TAccountUserAccTarget>
        : TAccountUserAccTarget,
      ...TRemainingAccounts,
    ]
  >

export type BuyInstructionData = {
  discriminator: ReadonlyUint8Array
  amount: bigint
  maxSolCost: bigint
}

export type BuyInstructionDataArgs = {
  amount: number | bigint
  maxSolCost: number | bigint
}

export function getBuyInstructionDataEncoder(): FixedSizeEncoder<BuyInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
      ['maxSolCost', getU64Encoder()],
    ]),
    value => ({ ...value, discriminator: BUY_DISCRIMINATOR })
  )
}

export function getBuyInstructionDataDecoder(): FixedSizeDecoder<BuyInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
    ['maxSolCost', getU64Decoder()],
  ])
}

export function getBuyInstructionDataCodec(): FixedSizeCodec<
  BuyInstructionDataArgs,
  BuyInstructionData
> {
  return combineCodec(getBuyInstructionDataEncoder(), getBuyInstructionDataDecoder())
}

export type BuyAsyncInput<
  TAccountGlobal extends string = string,
  TAccountFeeRecipient extends string = string,
  TAccountMint extends string = string,
  TAccountBondingCurve extends string = string,
  TAccountAssociatedBondingCurve extends string = string,
  TAccountAssociatedUser extends string = string,
  TAccountUser extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountCreatorVault extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
  TAccountGlobalVolumeAccumulator extends string = string,
  TAccountUserVolumeAccumulator extends string = string,
  TAccountUserAccTarget extends string = string,
> = {
  global?: Address<TAccountGlobal>
  feeRecipient: Address<TAccountFeeRecipient>
  mint: Address<TAccountMint>
  bondingCurve?: Address<TAccountBondingCurve>
  associatedBondingCurve?: Address<TAccountAssociatedBondingCurve>
  associatedUser: Address<TAccountAssociatedUser>
  user: TransactionSigner<TAccountUser>
  systemProgram?: Address<TAccountSystemProgram>
  tokenProgram?: Address<TAccountTokenProgram>
  creatorVault: Address<TAccountCreatorVault>
  eventAuthority?: Address<TAccountEventAuthority>
  program: Address<TAccountProgram>
  globalVolumeAccumulator?: Address<TAccountGlobalVolumeAccumulator>
  userVolumeAccumulator?: Address<TAccountUserVolumeAccumulator>
  userAccTarget: TransactionSigner<TAccountUserAccTarget>
  amount: BuyInstructionDataArgs['amount']
  maxSolCost: BuyInstructionDataArgs['maxSolCost']
}

export async function getBuyInstructionAsync<
  TAccountGlobal extends string,
  TAccountFeeRecipient extends string,
  TAccountMint extends string,
  TAccountBondingCurve extends string,
  TAccountAssociatedBondingCurve extends string,
  TAccountAssociatedUser extends string,
  TAccountUser extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountCreatorVault extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TAccountGlobalVolumeAccumulator extends string,
  TAccountUserVolumeAccumulator extends string,
  TAccountUserAccTarget extends string,
  TProgramAddress extends Address = typeof PUMP_PROGRAM_ADDRESS,
>(
  input: BuyAsyncInput<
    TAccountGlobal,
    TAccountFeeRecipient,
    TAccountMint,
    TAccountBondingCurve,
    TAccountAssociatedBondingCurve,
    TAccountAssociatedUser,
    TAccountUser,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountCreatorVault,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountGlobalVolumeAccumulator,
    TAccountUserVolumeAccumulator,
    TAccountUserAccTarget
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  BuyInstruction<
    TProgramAddress,
    TAccountGlobal,
    TAccountFeeRecipient,
    TAccountMint,
    TAccountBondingCurve,
    TAccountAssociatedBondingCurve,
    TAccountAssociatedUser,
    TAccountUser,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountCreatorVault,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountGlobalVolumeAccumulator,
    TAccountUserVolumeAccumulator,
    TAccountUserAccTarget
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    global: { value: input.global ?? null, isWritable: false },
    feeRecipient: { value: input.feeRecipient ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    bondingCurve: { value: input.bondingCurve ?? null, isWritable: true },
    associatedBondingCurve: {
      value: input.associatedBondingCurve ?? null,
      isWritable: true,
    },
    associatedUser: { value: input.associatedUser ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    creatorVault: { value: input.creatorVault ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
    globalVolumeAccumulator: {
      value: input.globalVolumeAccumulator ?? null,
      isWritable: true,
    },
    userVolumeAccumulator: {
      value: input.userVolumeAccumulator ?? null,
      isWritable: true,
    },
    userAccTarget: { value: input.userAccTarget ?? null, isWritable: true },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.global.value) {
    accounts.global.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [getBytesEncoder().encode(new Uint8Array([103, 108, 111, 98, 97, 108]))],
    })
  }
  if (!accounts.bondingCurve.value) {
    accounts.bondingCurve.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([98, 111, 110, 100, 105, 110, 103, 45, 99, 117, 114, 118, 101])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    })
  }
  if (!accounts.associatedBondingCurve.value) {
    accounts.associatedBondingCurve.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.bondingCurve.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235, 121, 172, 28, 180,
            133, 237, 95, 91, 55, 145, 58, 140, 245, 133, 126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    })
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121,
          ])
        ),
      ],
    })
  }
  if (!accounts.globalVolumeAccumulator.value) {
    accounts.globalVolumeAccumulator.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 108, 111, 98, 97, 108, 95, 118, 111, 108, 117, 109, 101, 95, 97, 99, 99, 117, 109,
            117, 108, 97, 116, 111, 114,
          ])
        ),
      ],
    })
  }
  if (!accounts.userVolumeAccumulator.value) {
    accounts.userVolumeAccumulator.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            117, 115, 101, 114, 95, 118, 111, 108, 117, 109, 101, 95, 97, 99, 99, 117, 109, 117,
            108, 97, 116, 111, 114,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.userAccTarget.value)),
      ],
    })
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.global),
      getAccountMeta(accounts.feeRecipient),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.bondingCurve),
      getAccountMeta(accounts.associatedBondingCurve),
      getAccountMeta(accounts.associatedUser),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.creatorVault),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
      getAccountMeta(accounts.globalVolumeAccumulator),
      getAccountMeta(accounts.userVolumeAccumulator),
      getAccountMeta(accounts.userAccTarget),
    ],
    programAddress,
    data: getBuyInstructionDataEncoder().encode(args as BuyInstructionDataArgs),
  } as BuyInstruction<
    TProgramAddress,
    TAccountGlobal,
    TAccountFeeRecipient,
    TAccountMint,
    TAccountBondingCurve,
    TAccountAssociatedBondingCurve,
    TAccountAssociatedUser,
    TAccountUser,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountCreatorVault,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountGlobalVolumeAccumulator,
    TAccountUserVolumeAccumulator,
    TAccountUserAccTarget
  >

  return instruction
}

export type BuyInput<
  TAccountGlobal extends string = string,
  TAccountFeeRecipient extends string = string,
  TAccountMint extends string = string,
  TAccountBondingCurve extends string = string,
  TAccountAssociatedBondingCurve extends string = string,
  TAccountAssociatedUser extends string = string,
  TAccountUser extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountCreatorVault extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
  TAccountGlobalVolumeAccumulator extends string = string,
  TAccountUserVolumeAccumulator extends string = string,
  TAccountUserAccTarget extends string = string,
> = {
  global: Address<TAccountGlobal>
  feeRecipient: Address<TAccountFeeRecipient>
  mint: Address<TAccountMint>
  bondingCurve: Address<TAccountBondingCurve>
  associatedBondingCurve: Address<TAccountAssociatedBondingCurve>
  associatedUser: Address<TAccountAssociatedUser>
  user: TransactionSigner<TAccountUser>
  systemProgram?: Address<TAccountSystemProgram>
  tokenProgram?: Address<TAccountTokenProgram>
  creatorVault: Address<TAccountCreatorVault>
  eventAuthority: Address<TAccountEventAuthority>
  program: Address<TAccountProgram>
  globalVolumeAccumulator: Address<TAccountGlobalVolumeAccumulator>
  userVolumeAccumulator: Address<TAccountUserVolumeAccumulator>
  userAccTarget: TransactionSigner<TAccountUserAccTarget>
  amount: BuyInstructionDataArgs['amount']
  maxSolCost: BuyInstructionDataArgs['maxSolCost']
}

export function getBuyInstruction<
  TAccountGlobal extends string,
  TAccountFeeRecipient extends string,
  TAccountMint extends string,
  TAccountBondingCurve extends string,
  TAccountAssociatedBondingCurve extends string,
  TAccountAssociatedUser extends string,
  TAccountUser extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountCreatorVault extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TAccountGlobalVolumeAccumulator extends string,
  TAccountUserVolumeAccumulator extends string,
  TAccountUserAccTarget extends string,
  TProgramAddress extends Address = typeof PUMP_PROGRAM_ADDRESS,
>(
  input: BuyInput<
    TAccountGlobal,
    TAccountFeeRecipient,
    TAccountMint,
    TAccountBondingCurve,
    TAccountAssociatedBondingCurve,
    TAccountAssociatedUser,
    TAccountUser,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountCreatorVault,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountGlobalVolumeAccumulator,
    TAccountUserVolumeAccumulator,
    TAccountUserAccTarget
  >,
  config?: { programAddress?: TProgramAddress }
): BuyInstruction<
  TProgramAddress,
  TAccountGlobal,
  TAccountFeeRecipient,
  TAccountMint,
  TAccountBondingCurve,
  TAccountAssociatedBondingCurve,
  TAccountAssociatedUser,
  TAccountUser,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountCreatorVault,
  TAccountEventAuthority,
  TAccountProgram,
  TAccountGlobalVolumeAccumulator,
  TAccountUserVolumeAccumulator,
  TAccountUserAccTarget
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    global: { value: input.global ?? null, isWritable: false },
    feeRecipient: { value: input.feeRecipient ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    bondingCurve: { value: input.bondingCurve ?? null, isWritable: true },
    associatedBondingCurve: {
      value: input.associatedBondingCurve ?? null,
      isWritable: true,
    },
    associatedUser: { value: input.associatedUser ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    creatorVault: { value: input.creatorVault ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
    globalVolumeAccumulator: {
      value: input.globalVolumeAccumulator ?? null,
      isWritable: true,
    },
    userVolumeAccumulator: {
      value: input.userVolumeAccumulator ?? null,
      isWritable: true,
    },
    userAccTarget: { value: input.userAccTarget ?? null, isWritable: true },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.global),
      getAccountMeta(accounts.feeRecipient),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.bondingCurve),
      getAccountMeta(accounts.associatedBondingCurve),
      getAccountMeta(accounts.associatedUser),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.creatorVault),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
      getAccountMeta(accounts.globalVolumeAccumulator),
      getAccountMeta(accounts.userVolumeAccumulator),
      getAccountMeta(accounts.userAccTarget),
    ],
    programAddress,
    data: getBuyInstructionDataEncoder().encode(args as BuyInstructionDataArgs),
  } as BuyInstruction<
    TProgramAddress,
    TAccountGlobal,
    TAccountFeeRecipient,
    TAccountMint,
    TAccountBondingCurve,
    TAccountAssociatedBondingCurve,
    TAccountAssociatedUser,
    TAccountUser,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountCreatorVault,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountGlobalVolumeAccumulator,
    TAccountUserVolumeAccumulator,
    TAccountUserAccTarget
  >

  return instruction
}

export type ParsedBuyInstruction<
  TProgram extends string = typeof PUMP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    global: TAccountMetas[0]
    feeRecipient: TAccountMetas[1]
    mint: TAccountMetas[2]
    bondingCurve: TAccountMetas[3]
    associatedBondingCurve: TAccountMetas[4]
    associatedUser: TAccountMetas[5]
    user: TAccountMetas[6]
    systemProgram: TAccountMetas[7]
    tokenProgram: TAccountMetas[8]
    creatorVault: TAccountMetas[9]
    eventAuthority: TAccountMetas[10]
    program: TAccountMetas[11]
    globalVolumeAccumulator: TAccountMetas[12]
    userVolumeAccumulator: TAccountMetas[13]
    userAccTarget: TAccountMetas[14]
  }
  data: BuyInstructionData
}

export function parseBuyInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedBuyInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      global: getNextAccount(),
      feeRecipient: getNextAccount(),
      mint: getNextAccount(),
      bondingCurve: getNextAccount(),
      associatedBondingCurve: getNextAccount(),
      associatedUser: getNextAccount(),
      user: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      creatorVault: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
      globalVolumeAccumulator: getNextAccount(),
      userVolumeAccumulator: getNextAccount(),
      userAccTarget: getNextAccount(),
    },
    data: getBuyInstructionDataDecoder().decode(instruction.data),
  }
}
